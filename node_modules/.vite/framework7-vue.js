import {
  app_class_default,
  clicks_default,
  core_class_default,
  device_default,
  history_default,
  modal_default,
  navbar_default,
  request_default,
  resize_default,
  router_default,
  service_worker_default,
  statusbar_default,
  store_default,
  subnavbar_default,
  support_default,
  toolbar_default,
  touch_default,
  touch_ripple_default,
  utils_default,
  view_default
} from "./chunk-Q7SKJDY4.js";
import {
  Fragment,
  computed,
  createBlock,
  createCommentVNode,
  createStaticVNode,
  createTextVNode,
  createVNode,
  h,
  inject,
  mergeProps,
  nextTick,
  onBeforeUnmount,
  onBeforeUpdate,
  onMounted,
  onUpdated,
  openBlock,
  provide,
  ref,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDynamicComponent,
  toDisplayString,
  toRaw,
  watch,
  withCtx
} from "./chunk-4H7HWE4F.js";

// node_modules/framework7/esm/framework7-lite.js
app_class_default.use([device_default, support_default, utils_default, resize_default, request_default, touch_default, clicks_default, router_default, history_default, service_worker_default, store_default, statusbar_default, view_default, navbar_default, toolbar_default, subnavbar_default, touch_ripple_default, modal_default]);
var framework7_lite_default = app_class_default;

// node_modules/framework7-vue/esm/shared/utils.js
function noUndefinedProps(obj) {
  var o = {};
  Object.keys(obj).forEach(function(key) {
    if (typeof obj[key] !== "undefined")
      o[key] = obj[key];
  });
  return o;
}
function isStringProp(val) {
  return typeof val === "string" && val !== "";
}
function isObject(o) {
  return typeof o === "object" && o !== null && o.constructor && o.constructor === Object;
}
function now() {
  return Date.now();
}
function extend() {
  var deep = true;
  var to;
  var from;
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (typeof args[0] === "boolean") {
    deep = args[0];
    to = args[1];
    args.splice(0, 2);
    from = args;
  } else {
    to = args[0];
    args.splice(0, 1);
    from = args;
  }
  for (var i = 0; i < from.length; i += 1) {
    var nextSource = args[i];
    if (nextSource !== void 0 && nextSource !== null) {
      var keysArray = Object.keys(Object(nextSource));
      for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
        var nextKey = keysArray[nextIndex];
        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
        if (desc !== void 0 && desc.enumerable) {
          if (!deep) {
            to[nextKey] = nextSource[nextKey];
          } else if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            extend(to[nextKey], nextSource[nextKey]);
          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            to[nextKey] = {};
            extend(to[nextKey], nextSource[nextKey]);
          } else {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }
  }
  return to;
}
function classNames() {
  var classes = [];
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  args.forEach(function(arg) {
    if (typeof arg === "object" && arg.constructor === Object) {
      Object.keys(arg).forEach(function(key) {
        if (arg[key])
          classes.push(key);
      });
    } else if (arg)
      classes.push(arg);
  });
  var uniqueClasses2 = [];
  classes.forEach(function(c) {
    if (uniqueClasses2.indexOf(c) < 0)
      uniqueClasses2.push(c);
  });
  return uniqueClasses2.join(" ");
}
var routerIdCounter = 0;
var routerComponentIdCounter = 0;
function unsetRouterIds() {
  routerIdCounter = 0;
  routerComponentIdCounter = 0;
}
function getRouterId() {
  routerIdCounter += 1;
  return now() + "_" + routerIdCounter;
}
function getComponentId() {
  routerComponentIdCounter += 1;
  return now() + "_" + routerComponentIdCounter;
}

// node_modules/framework7-vue/esm/shared/f7.js
var f7;
var f7events;
var theme = {};
var f7routers = {
  views: [],
  tabs: [],
  modals: null
};
var setTheme = function setTheme2() {
  if (!f7)
    return;
  theme.ios = f7.theme === "ios";
  theme.md = f7.theme === "md";
  theme.aurora = f7.theme === "aurora";
};
var cleanup = function cleanup2() {
  unsetRouterIds();
  delete theme.ios;
  delete theme.md;
  delete theme.aurora;
  f7routers.views = [];
  f7routers.tabs = [];
  f7routers.modals = null;
};
var f7initEvents = function f7initEvents2() {
  f7events = new framework7_lite_default.Events();
};
var f7init = function f7init2(rootEl, params, init) {
  if (params === void 0) {
    params = {};
  }
  if (init === void 0) {
    init = true;
  }
  var f7Params = extend({}, params, {
    el: rootEl,
    init
  });
  if (typeof params.store !== "undefined")
    f7Params.store = params.store;
  if (!f7Params.routes)
    f7Params.routes = [];
  if (f7Params.userAgent && (f7Params.theme === "auto" || !f7Params.theme)) {
    var device = framework7_lite_default.getDevice({
      userAgent: f7Params.userAgent
    }, true);
    theme.ios = !!device.ios;
    theme.aurora = device.desktop && device.electron;
    theme.md = !theme.ios && !theme.aurora;
  }
  if (f7 && typeof window !== "undefined")
    return;
  if (typeof window === "undefined")
    cleanup();
  var instance = new framework7_lite_default(f7Params);
  f7 = instance;
  setTheme();
  if (instance.initialized) {
    f7 = instance;
    f7events.emit("ready", f7);
  } else {
    instance.on("init", function() {
      f7 = instance;
      f7events.emit("ready", f7);
    });
  }
};
var f7ready = function f7ready2(callback) {
  if (!callback)
    return;
  if (f7 && f7.initialized)
    callback(f7);
  else {
    f7events.once("ready", callback);
  }
};

// node_modules/framework7-vue/esm/shared/components-router.js
var components_router_default = {
  proto: {
    pageComponentLoader: function pageComponentLoader(_ref) {
      var routerEl = _ref.routerEl, component = _ref.component, options = _ref.options, resolve = _ref.resolve, reject = _ref.reject;
      var router = this;
      var routerId = router.id;
      var el = routerEl;
      var viewRouter;
      f7routers.views.forEach(function(data) {
        if (data.el && data.el === routerEl || data.routerId && data.routerId === routerId) {
          viewRouter = data;
        }
      });
      if (!viewRouter) {
        reject();
        return;
      }
      var pageData = {
        component,
        id: getComponentId(),
        props: extend({
          f7route: options.route,
          f7router: router
        }, options.route.params, options.props || {})
      };
      var resolved;
      function onDidUpdate(componentRouterData) {
        if (componentRouterData !== viewRouter || resolved)
          return;
        f7events.off("viewRouterDidUpdate", onDidUpdate);
        var pageEl = el.children[el.children.length - 1];
        pageData.el = pageEl;
        resolve(pageEl);
        resolved = true;
      }
      f7events.on("viewRouterDidUpdate", onDidUpdate);
      viewRouter.pages.push(pageData);
      viewRouter.setPages(viewRouter.pages);
    },
    removePage: function removePage($pageEl) {
      if (!$pageEl)
        return;
      var router = this;
      var f7Page;
      if ("length" in $pageEl && $pageEl[0])
        f7Page = $pageEl[0].f7Page;
      else
        f7Page = $pageEl.f7Page;
      if (f7Page && f7Page.route && f7Page.route.route && f7Page.route.route.keepAlive) {
        router.app.$($pageEl).remove();
        return;
      }
      var viewRouter;
      f7routers.views.forEach(function(data) {
        if (data.el && data.el === router.el) {
          viewRouter = data;
        }
      });
      var pageEl;
      if ("length" in $pageEl) {
        if ($pageEl.length === 0)
          return;
        pageEl = $pageEl[0];
      } else {
        pageEl = $pageEl;
      }
      if (!pageEl)
        return;
      var pageComponentFound;
      viewRouter.pages.forEach(function(page, index) {
        if (page.el === pageEl) {
          pageComponentFound = true;
          viewRouter.pages.splice(index, 1);
          viewRouter.setPages(viewRouter.pages);
        }
      });
      if (!pageComponentFound) {
        pageEl.parentNode.removeChild(pageEl);
      }
    },
    tabComponentLoader: function tabComponentLoader(_temp) {
      var _ref2 = _temp === void 0 ? {} : _temp, tabEl = _ref2.tabEl, component = _ref2.component, options = _ref2.options, resolve = _ref2.resolve, reject = _ref2.reject;
      var router = this;
      if (!tabEl)
        reject();
      var tabRouter;
      f7routers.tabs.forEach(function(tabData) {
        if (tabData.el && tabData.el === tabEl) {
          tabRouter = tabData;
        }
      });
      if (!tabRouter) {
        reject();
        return;
      }
      var id = getComponentId();
      var tabContent = {
        id,
        component,
        props: extend({
          f7route: options.route,
          f7router: router
        }, options.route.params, options.props || {})
      };
      var resolved;
      function onDidUpdate(componentRouterData) {
        if (componentRouterData !== tabRouter || resolved)
          return;
        f7events.off("tabRouterDidUpdate", onDidUpdate);
        var tabContentEl = tabEl.children[0];
        resolve(tabContentEl);
        resolved = true;
      }
      f7events.on("tabRouterDidUpdate", onDidUpdate);
      tabRouter.setTabContent(tabContent);
    },
    removeTabContent: function removeTabContent(tabEl) {
      if (!tabEl)
        return;
      var tabRouter;
      f7routers.tabs.forEach(function(tabData) {
        if (tabData.el && tabData.el === tabEl) {
          tabRouter = tabData;
        }
      });
      if (!tabRouter) {
        tabEl.innerHTML = "";
        return;
      }
      tabRouter.setTabContent(null);
    },
    modalComponentLoader: function modalComponentLoader(_temp2) {
      var _ref3 = _temp2 === void 0 ? {} : _temp2, component = _ref3.component, options = _ref3.options, resolve = _ref3.resolve, reject = _ref3.reject;
      var router = this;
      var modalsRouter = f7routers.modals;
      if (!modalsRouter) {
        reject();
        return;
      }
      var modalData = {
        component,
        id: getComponentId(),
        props: extend({
          f7route: options.route,
          f7router: router
        }, options.route.params, options.props || {})
      };
      var resolved;
      function onDidUpdate() {
        if (resolved)
          return;
        f7events.off("modalsRouterDidUpdate", onDidUpdate);
        var modalEl = modalsRouter.el.children[modalsRouter.el.children.length - 1];
        modalData.el = modalEl;
        resolve(modalEl);
        resolved = true;
      }
      f7events.on("modalsRouterDidUpdate", onDidUpdate);
      modalsRouter.modals.push(modalData);
      modalsRouter.setModals(modalsRouter.modals);
    },
    removeModal: function removeModal(modalEl) {
      var modalsRouter = f7routers.modals;
      if (!modalsRouter)
        return;
      var modalDataToRemove;
      modalsRouter.modals.forEach(function(modalData) {
        if (modalData.el === modalEl)
          modalDataToRemove = modalData;
      });
      modalsRouter.modals.splice(modalsRouter.modals.indexOf(modalDataToRemove), 1);
      modalsRouter.setModals(modalsRouter.modals);
    }
  }
};

// node_modules/framework7-vue/esm/shared/plugin.js
var Framework7Vue = {
  name: "vuePlugin",
  installed: false,
  install: function install(params) {
    if (params === void 0) {
      params = {};
    }
    if (Framework7Vue.installed)
      return;
    Framework7Vue.installed = true;
    f7initEvents();
    var _params = params, paramsTheme = _params.theme, userAgent = _params.userAgent;
    if (paramsTheme === "md")
      theme.md = true;
    if (paramsTheme === "ios")
      theme.ios = true;
    if (paramsTheme === "aurora")
      theme.aurora = true;
    var needThemeCalc = typeof window === "undefined" ? !!userAgent : true;
    if (needThemeCalc && (!paramsTheme || paramsTheme === "auto")) {
      var device = framework7_lite_default.getDevice({
        userAgent
      }, true);
      theme.ios = !!device.ios;
      theme.aurora = device.desktop && device.electron;
      theme.md = !theme.ios && !theme.aurora;
    }
    f7ready(function() {
      setTheme();
    });
    framework7_lite_default.Router.use(components_router_default);
  }
};
var plugin_default = Framework7Vue;

// node_modules/framework7-vue/esm/shared/use-store.js
var useStore = function useStore2() {
  var store = arguments.length <= 0 ? void 0 : arguments[0];
  var getter = arguments.length <= 1 ? void 0 : arguments[1];
  if (arguments.length === 1) {
    store = f7.store;
    getter = arguments.length <= 0 ? void 0 : arguments[0];
  }
  var obj = store.getters[getter];
  var valueRef = ref(obj.value);
  var callback = function callback2(v) {
    valueRef.value = v;
  };
  obj.onUpdated(callback);
  onBeforeUnmount(function() {
    store.__removeCallback(callback);
    store.__removeCallback(obj.__callback);
  });
  return valueRef;
};

// node_modules/framework7-vue/esm/shared/mixins.js
function colorClasses(props) {
  var _ref;
  var color = props.color, colorTheme = props.colorTheme, textColor = props.textColor, bgColor = props.bgColor, borderColor = props.borderColor, rippleColor = props.rippleColor, themeDark = props.themeDark;
  return _ref = {
    "theme-dark": themeDark
  }, _ref["color-" + color] = color, _ref["color-theme-" + colorTheme] = colorTheme, _ref["text-color-" + textColor] = textColor, _ref["bg-color-" + bgColor] = bgColor, _ref["border-color-" + borderColor] = borderColor, _ref["ripple-color-" + rippleColor] = rippleColor, _ref;
}
var colorProps = {
  color: String,
  colorTheme: String,
  textColor: String,
  bgColor: String,
  borderColor: String,
  rippleColor: String,
  themeDark: Boolean
};
var iconProps = {
  icon: String,
  iconMaterial: String,
  iconF7: String,
  iconIos: String,
  iconMd: String,
  iconAurora: String,
  iconColor: String,
  iconSize: [String, Number],
  iconBadge: [String, Number],
  iconBadgeColor: String
};
var routerProps = {
  back: Boolean,
  external: Boolean,
  force: Boolean,
  animate: {
    type: Boolean,
    default: void 0
  },
  ignoreCache: Boolean,
  reloadCurrent: Boolean,
  reloadAll: Boolean,
  reloadPrevious: Boolean,
  reloadDetail: {
    type: Boolean,
    default: void 0
  },
  routeTabId: String,
  view: String,
  routeProps: Object,
  preventRouter: Boolean,
  transition: String,
  openIn: String
};
function routerAttrs(props) {
  var force = props.force, reloadCurrent = props.reloadCurrent, reloadPrevious = props.reloadPrevious, reloadAll = props.reloadAll, reloadDetail = props.reloadDetail, animate = props.animate, ignoreCache = props.ignoreCache, routeTabId = props.routeTabId, view = props.view, transition = props.transition, openIn = props.openIn;
  var dataAnimate;
  if ("animate" in props && typeof animate !== "undefined") {
    dataAnimate = animate.toString();
  }
  var dataReloadDetail;
  if ("reloadDetail" in props && typeof reloadDetail !== "undefined") {
    dataReloadDetail = reloadDetail.toString();
  }
  return {
    "data-force": force || void 0,
    "data-reload-current": reloadCurrent || void 0,
    "data-reload-all": reloadAll || void 0,
    "data-reload-previous": reloadPrevious || void 0,
    "data-reload-detail": dataReloadDetail,
    "data-animate": dataAnimate,
    "data-ignore-cache": ignoreCache || void 0,
    "data-route-tab-id": routeTabId || void 0,
    "data-view": isStringProp(view) ? view : void 0,
    "data-transition": isStringProp(transition) ? transition : void 0,
    "data-open-in": isStringProp(openIn) ? openIn : void 0
  };
}
function routerClasses(props) {
  var back = props.back, linkBack = props.linkBack, external = props.external, preventRouter = props.preventRouter;
  return {
    back: back || linkBack,
    external,
    "prevent-router": preventRouter
  };
}
var actionsProps = {
  searchbarEnable: [Boolean, String],
  searchbarDisable: [Boolean, String],
  searchbarClear: [Boolean, String],
  searchbarToggle: [Boolean, String],
  panelOpen: [Boolean, String],
  panelClose: [Boolean, String],
  panelToggle: [Boolean, String],
  popupOpen: [Boolean, String],
  popupClose: [Boolean, String],
  actionsOpen: [Boolean, String],
  actionsClose: [Boolean, String],
  popoverOpen: [Boolean, String],
  popoverClose: [Boolean, String],
  loginScreenOpen: [Boolean, String],
  loginScreenClose: [Boolean, String],
  sheetOpen: [Boolean, String],
  sheetClose: [Boolean, String],
  sortableEnable: [Boolean, String],
  sortableDisable: [Boolean, String],
  sortableToggle: [Boolean, String],
  cardOpen: [Boolean, String],
  cardPreventOpen: [Boolean, String],
  cardClose: [Boolean, String],
  menuClose: {
    type: [Boolean, String],
    default: void 0
  }
};
function actionsAttrs(props) {
  var searchbarEnable = props.searchbarEnable, searchbarDisable = props.searchbarDisable, searchbarClear = props.searchbarClear, searchbarToggle = props.searchbarToggle, panelOpen = props.panelOpen, panelClose = props.panelClose, panelToggle = props.panelToggle, popupOpen = props.popupOpen, popupClose = props.popupClose, actionsOpen = props.actionsOpen, actionsClose = props.actionsClose, popoverOpen = props.popoverOpen, popoverClose = props.popoverClose, loginScreenOpen = props.loginScreenOpen, loginScreenClose = props.loginScreenClose, sheetOpen = props.sheetOpen, sheetClose = props.sheetClose, sortableEnable = props.sortableEnable, sortableDisable = props.sortableDisable, sortableToggle = props.sortableToggle, cardOpen = props.cardOpen, cardClose = props.cardClose;
  return {
    "data-searchbar": isStringProp(searchbarEnable) && searchbarEnable || isStringProp(searchbarDisable) && searchbarDisable || isStringProp(searchbarClear) && searchbarClear || isStringProp(searchbarToggle) && searchbarToggle || void 0,
    "data-panel": isStringProp(panelOpen) && panelOpen || isStringProp(panelClose) && panelClose || isStringProp(panelToggle) && panelToggle || void 0,
    "data-popup": isStringProp(popupOpen) && popupOpen || isStringProp(popupClose) && popupClose || void 0,
    "data-actions": isStringProp(actionsOpen) && actionsOpen || isStringProp(actionsClose) && actionsClose || void 0,
    "data-popover": isStringProp(popoverOpen) && popoverOpen || isStringProp(popoverClose) && popoverClose || void 0,
    "data-sheet": isStringProp(sheetOpen) && sheetOpen || isStringProp(sheetClose) && sheetClose || void 0,
    "data-login-screen": isStringProp(loginScreenOpen) && loginScreenOpen || isStringProp(loginScreenClose) && loginScreenClose || void 0,
    "data-sortable": isStringProp(sortableEnable) && sortableEnable || isStringProp(sortableDisable) && sortableDisable || isStringProp(sortableToggle) && sortableToggle || void 0,
    "data-card": isStringProp(cardOpen) && cardOpen || isStringProp(cardClose) && cardClose || void 0
  };
}
function actionsClasses(props) {
  var searchbarEnable = props.searchbarEnable, searchbarDisable = props.searchbarDisable, searchbarClear = props.searchbarClear, searchbarToggle = props.searchbarToggle, panelOpen = props.panelOpen, panelClose = props.panelClose, panelToggle = props.panelToggle, popupOpen = props.popupOpen, popupClose = props.popupClose, actionsClose = props.actionsClose, actionsOpen = props.actionsOpen, popoverOpen = props.popoverOpen, popoverClose = props.popoverClose, loginScreenOpen = props.loginScreenOpen, loginScreenClose = props.loginScreenClose, sheetOpen = props.sheetOpen, sheetClose = props.sheetClose, sortableEnable = props.sortableEnable, sortableDisable = props.sortableDisable, sortableToggle = props.sortableToggle, cardOpen = props.cardOpen, cardPreventOpen = props.cardPreventOpen, cardClose = props.cardClose, menuClose = props.menuClose;
  return {
    "searchbar-enable": searchbarEnable || searchbarEnable === "",
    "searchbar-disable": searchbarDisable || searchbarDisable === "",
    "searchbar-clear": searchbarClear || searchbarClear === "",
    "searchbar-toggle": searchbarToggle || searchbarToggle === "",
    "panel-close": panelClose || panelClose === "",
    "panel-open": panelOpen || panelOpen === "",
    "panel-toggle": panelToggle || panelToggle === "",
    "popup-close": popupClose || popupClose === "",
    "popup-open": popupOpen || popupOpen === "",
    "actions-close": actionsClose || actionsClose === "",
    "actions-open": actionsOpen || actionsOpen === "",
    "popover-close": popoverClose || popoverClose === "",
    "popover-open": popoverOpen || popoverOpen === "",
    "sheet-close": sheetClose || sheetClose === "",
    "sheet-open": sheetOpen || sheetOpen === "",
    "login-screen-close": loginScreenClose || loginScreenClose === "",
    "login-screen-open": loginScreenOpen || loginScreenOpen === "",
    "sortable-enable": sortableEnable || sortableEnable === "",
    "sortable-disable": sortableDisable || sortableDisable === "",
    "sortable-toggle": sortableToggle || sortableToggle === "",
    "card-close": cardClose || cardClose === "",
    "card-open": cardOpen || cardOpen === "",
    "card-prevent-open": cardPreventOpen || cardPreventOpen === "",
    "menu-close": menuClose || menuClose === ""
  };
}

// node_modules/framework7-vue/esm/components/accordion-content.js
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function render(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var accordion_content_default = {
  name: "f7-accordion-content",
  render,
  props: _extends({}, colorProps),
  setup: function setup(props) {
    var classes = computed(function() {
      return classNames("accordion-item-content", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/accordion-item.js
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function render2(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var accordion_item_default = {
  name: "f7-accordion-item",
  render: render2,
  props: _extends2({
    opened: Boolean
  }, colorProps),
  emits: ["accordion:beforeopen", "accordion:open", "accordion:opened", "accordion:beforeclose", "accordion:close", "accordion:closed"],
  setup: function setup2(props, _ref) {
    var emit = _ref.emit;
    var elRef = ref(null);
    var onBeforeOpen = function onBeforeOpen2(el, prevent) {
      if (elRef.value !== el)
        return;
      emit("accordion:beforeopen", prevent);
    };
    var onOpen = function onOpen2(el) {
      if (elRef.value !== el)
        return;
      emit("accordion:open");
    };
    var onOpened = function onOpened2(el) {
      if (elRef.value !== el)
        return;
      emit("accordion:opened");
    };
    var onBeforeClose = function onBeforeClose2(el, prevent) {
      if (elRef.value !== el)
        return;
      emit("accordion:beforeclose", prevent);
    };
    var onClose = function onClose2(el) {
      if (elRef.value !== el)
        return;
      emit("accordion:close");
    };
    var onClosed = function onClosed2(el) {
      if (elRef.value !== el)
        return;
      emit("accordion:closed");
    };
    var attachEvents = function attachEvents2() {
      f7ready(function() {
        f7.on("accordionBeforeOpen", onBeforeOpen);
        f7.on("accordionOpen", onOpen);
        f7.on("accordionOpened", onOpened);
        f7.on("accordionBeforeClose", onBeforeClose);
        f7.on("accordionClose", onClose);
        f7.on("accordionClosed", onClosed);
      });
    };
    var detachEvents = function detachEvents2() {
      f7.off("accordionBeforeOpen", onBeforeOpen);
      f7.off("accordionOpen", onOpen);
      f7.off("accordionOpened", onOpened);
      f7.off("accordionBeforeClose", onBeforeClose);
      f7.off("accordionClose", onClose);
      f7.off("accordionClosed", onClosed);
    };
    onMounted(function() {
      return attachEvents();
    });
    onBeforeUnmount(function() {
      return detachEvents();
    });
    var classes = computed(function() {
      return classNames("accordion-item", {
        "accordion-item-opened": props.opened
      }, colorClasses(props));
    });
    return {
      elRef,
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/accordion-toggle.js
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function render3(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var accordion_toggle_default = {
  name: "f7-accordion-toggle",
  render: render3,
  props: _extends3({}, colorProps),
  setup: function setup3(props) {
    var classes = computed(function() {
      return classNames("accordion-item-toggle", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/accordion.js
function _extends4() {
  _extends4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function render4(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var accordion_default = {
  name: "f7-accordion",
  render: render4,
  props: _extends4({
    accordionOpposite: Boolean
  }, colorProps),
  setup: function setup4(props) {
    var classes = computed(function() {
      return classNames("accordion-list", props.accordionOpposite && "accordion-opposite", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/actions-button.js
function _extends5() {
  _extends5 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
var _hoisted_1 = {
  key: 0,
  class: "actions-button-media"
};
var _hoisted_2 = {
  class: "actions-button-text"
};
function render5(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes,
    onClick: _cache[1] || (_cache[1] = function() {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }, [_ctx.hasMedia ? (openBlock(), createBlock("div", _hoisted_1, [renderSlot(_ctx.$slots, "media")])) : createCommentVNode("", true), createVNode("div", _hoisted_2, [renderSlot(_ctx.$slots, "default")])], 2);
}
var actions_button_default = {
  name: "f7-actions-button",
  render: render5,
  props: _extends5({
    bold: Boolean,
    close: {
      type: Boolean,
      default: true
    }
  }, colorProps),
  emits: ["click"],
  setup: function setup5(props, _ref) {
    var slots = _ref.slots, emit = _ref.emit;
    var elRef = ref(null);
    var onClick = function onClick2(e) {
      if (elRef.value && props.close && f7) {
        f7.actions.close(f7.$(elRef.value).parents(".actions-modal"));
      }
      emit("click", e);
    };
    var hasMedia = computed(function() {
      return slots && !!slots.media;
    });
    var classes = computed(function() {
      return classNames({
        "actions-button": true,
        "actions-button-bold": props.bold
      }, colorClasses(props));
    });
    return {
      classes,
      elRef,
      hasMedia,
      onClick
    };
  }
};

// node_modules/framework7-vue/esm/components/actions-group.js
function _extends6() {
  _extends6 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
function render6(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var actions_group_default = {
  name: "f7-actions-group",
  render: render6,
  props: _extends6({}, colorProps),
  setup: function setup6(props) {
    var classes = computed(function() {
      return classNames("actions-group", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/actions-label.js
function _extends7() {
  _extends7 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
function render7(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes,
    onClick: _cache[1] || (_cache[1] = function() {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var actions_label_default = {
  name: "f7-actions-label",
  render: render7,
  props: _extends7({
    bold: Boolean
  }, colorProps),
  emits: ["click"],
  setup: function setup7(props, _ref) {
    var emit = _ref.emit;
    var onClick = function onClick2(e) {
      emit("click", e);
    };
    var classes = computed(function() {
      return classNames("actions-label", {
        "actions-button-bold": props.bold
      }, colorClasses(props));
    });
    return {
      classes,
      onClick
    };
  }
};

// node_modules/framework7-vue/esm/shared/modal-state-classes.js
var modalStateClasses = function modalStateClasses2(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, isOpened = _ref.isOpened, isClosing = _ref.isClosing;
  return {
    "modal-in": isOpened && !isClosing,
    "modal-out": isClosing
  };
};

// node_modules/framework7-vue/esm/components/actions.js
function _extends8() {
  _extends8 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends8.apply(this, arguments);
}
function render8(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var actions_default = {
  name: "f7-actions",
  render: render8,
  props: _extends8({
    tabletFullscreen: Boolean,
    opened: Boolean,
    animate: {
      type: Boolean,
      default: void 0
    },
    grid: Boolean,
    target: {
      type: [String, Object],
      default: void 0
    },
    convertToPopover: {
      type: Boolean,
      default: void 0
    },
    forceToPopover: {
      type: Boolean,
      default: void 0
    },
    backdrop: {
      type: Boolean,
      default: void 0
    },
    backdropEl: {
      type: [String, Object],
      default: void 0
    },
    closeByBackdropClick: {
      type: Boolean,
      default: void 0
    },
    closeByOutsideClick: {
      type: Boolean,
      default: void 0
    },
    closeOnEscape: {
      type: Boolean,
      default: void 0
    },
    containerEl: {
      type: [String, Object],
      default: void 0
    }
  }, colorProps),
  emits: ["actions:open", "actions:opened", "actions:close", "actions:closed", "update:opened"],
  setup: function setup8(props, _ref) {
    var emit = _ref.emit;
    var f7Actions = null;
    var isOpened = props.opened;
    var isClosing = false;
    var elRef = ref(null);
    var onOpen = function onOpen2(instance) {
      isOpened = true;
      isClosing = false;
      emit("actions:open", instance);
      emit("update:opened", true);
    };
    var onOpened = function onOpened2(instance) {
      emit("actions:opened", instance);
    };
    var onClose = function onClose2(instance) {
      isOpened = false;
      isClosing = true;
      emit("actions:close", instance);
    };
    var onClosed = function onClosed2(instance) {
      isClosing = false;
      emit("actions:closed", instance);
      emit("update:opened", false);
    };
    watch(function() {
      return props.opened;
    }, function(value) {
      if (!f7Actions)
        return;
      if (value) {
        f7Actions.open();
      } else {
        f7Actions.close();
      }
    });
    onMounted(function() {
      if (!elRef.value)
        return;
      var target = props.target, convertToPopover = props.convertToPopover, forceToPopover = props.forceToPopover, closeByBackdropClick = props.closeByBackdropClick, closeByOutsideClick = props.closeByOutsideClick, closeOnEscape = props.closeOnEscape, backdrop = props.backdrop, backdropEl = props.backdropEl, grid = props.grid, containerEl = props.containerEl;
      var params = {
        el: elRef.value,
        grid,
        on: {
          open: onOpen,
          opened: onOpened,
          close: onClose,
          closed: onClosed
        }
      };
      if (typeof target !== "undefined")
        params.target = target;
      if (typeof convertToPopover !== "undefined")
        params.convertToPopover = convertToPopover;
      if (typeof forceToPopover !== "undefined")
        params.forceToPopover = forceToPopover;
      if (typeof closeByBackdropClick !== "undefined")
        params.closeByBackdropClick = closeByBackdropClick;
      if (typeof closeByOutsideClick !== "undefined")
        params.closeByOutsideClick = closeByOutsideClick;
      if (typeof closeOnEscape !== "undefined")
        params.closeOnEscape = closeOnEscape;
      if (typeof backdrop !== "undefined")
        params.backdrop = backdrop;
      if (typeof backdropEl !== "undefined")
        params.backdropEl = backdropEl;
      if (typeof containerEl !== "undefined")
        params.containerEl = containerEl;
      f7ready(function() {
        f7Actions = f7.popup.create(params);
        if (props.opened) {
          f7Actions.open(false);
        }
      });
    });
    onBeforeUnmount(function() {
      if (f7Actions) {
        f7Actions.destroy();
      }
      f7Actions = null;
    });
    var classes = computed(function() {
      return classNames("actions-modal", {
        "actions-grid": props.grid
      }, modalStateClasses({
        isOpened,
        isClosing
      }), colorClasses(props));
    });
    return {
      elRef,
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/routable-modals.js
function _extends9() {
  _extends9 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends9.apply(this, arguments);
}
var routable_modals_default = {
  name: "f7-routable-modals",
  setup: function setup9() {
    var elRef = ref(null);
    var modals = ref([]);
    var routerData = ref(null);
    onMounted(function() {
      routerData.value = {
        modals,
        el: elRef.value,
        setModals: function setModals(newModals) {
          newModals.forEach(function(modal) {
            modal.component = toRaw(modal.component);
          });
          modals.value = [].concat(newModals);
        }
      };
      f7routers.modals = routerData.value;
    });
    onUpdated(function() {
      if (!routerData.value || !f7)
        return;
      f7events.emit("modalsRouterDidUpdate", routerData.value);
    });
    onBeforeUnmount(function() {
      if (!routerData.value)
        return;
      f7routers.modals = null;
      routerData.value = null;
    });
    var getComponent = function getComponent2(modal) {
      return toRaw(modal.component);
    };
    var getProps = function getProps2(modal) {
      var modalComponent = modal.component, modalProps = modal.props;
      var keys = [];
      var passProps = {};
      if (modalComponent && modalComponent.props)
        keys = Object.keys(modalComponent.props);
      keys.forEach(function(key) {
        if (key in modalProps)
          passProps[key] = modalProps[key];
      });
      return passProps;
    };
    return function() {
      return h("div", {
        ref: elRef,
        class: "framework7-modals"
      }, [].concat(modals.value.map(function(modal) {
        return h(getComponent(modal), _extends9({
          key: modal.id
        }, getProps(modal)));
      })));
    };
  }
};

// node_modules/framework7-vue/esm/components/app.js
function _extends10() {
  _extends10 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends10.apply(this, arguments);
}
function render9(_ctx, _cache) {
  var _component_routable_modals = resolveComponent("routable-modals");
  return openBlock(), createBlock("div", {
    id: "framework7-root",
    ref: "elRef",
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default"), createVNode(_component_routable_modals)], 2);
}
var app_default = {
  name: "f7-app",
  render: render9,
  components: {
    RoutableModals: routable_modals_default
  },
  inheritAttrs: false,
  props: _extends10({
    id: {
      type: String,
      default: void 0
    },
    name: {
      type: String,
      default: void 0
    },
    version: {
      type: String,
      default: void 0
    },
    theme: {
      type: String,
      default: void 0
    },
    language: {
      type: String,
      default: void 0
    },
    routes: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    store: Object,
    autoDarkTheme: {
      type: Boolean,
      default: void 0
    },
    lazyModulesPath: {
      type: String,
      default: void 0
    },
    initOnDeviceReady: {
      type: Boolean,
      default: void 0
    },
    iosTranslucentBars: {
      type: Boolean,
      default: void 0
    },
    iosTranslucentModals: {
      type: Boolean,
      default: void 0
    },
    userAgent: {
      type: String,
      default: void 0
    },
    url: {
      type: String,
      default: void 0
    },
    accordion: {
      type: Object,
      default: function _default2() {
        return void 0;
      }
    },
    actions: {
      type: Object,
      default: function _default3() {
        return void 0;
      }
    },
    areaChart: {
      type: Object,
      default: function _default4() {
        return void 0;
      }
    },
    autocomplete: {
      type: Object,
      default: function _default5() {
        return void 0;
      }
    },
    calendar: {
      type: Object,
      default: function _default6() {
        return void 0;
      }
    },
    card: {
      type: Object,
      default: function _default7() {
        return void 0;
      }
    },
    colorPicker: {
      type: Object,
      default: function _default8() {
        return void 0;
      }
    },
    dialog: {
      type: Object,
      default: function _default9() {
        return void 0;
      }
    },
    form: {
      type: Object,
      default: function _default10() {
        return void 0;
      }
    },
    gauge: {
      type: Object,
      default: function _default11() {
        return void 0;
      }
    },
    grid: {
      type: Object,
      default: function _default12() {
        return void 0;
      }
    },
    infiniteScroll: {
      type: Object,
      default: function _default13() {
        return void 0;
      }
    },
    input: {
      type: Object,
      default: function _default14() {
        return void 0;
      }
    },
    lazy: {
      type: Object,
      default: function _default15() {
        return void 0;
      }
    },
    listIndex: {
      type: Object,
      default: function _default16() {
        return void 0;
      }
    },
    loginScreen: {
      type: Object,
      default: function _default17() {
        return void 0;
      }
    },
    messagebar: {
      type: Object,
      default: function _default18() {
        return void 0;
      }
    },
    messages: {
      type: Object,
      default: function _default19() {
        return void 0;
      }
    },
    navbar: {
      type: Object,
      default: function _default20() {
        return void 0;
      }
    },
    notification: {
      type: Object,
      default: function _default21() {
        return void 0;
      }
    },
    panel: {
      type: Object,
      default: function _default22() {
        return void 0;
      }
    },
    photoBrowser: {
      type: Object,
      default: function _default23() {
        return void 0;
      }
    },
    picker: {
      type: Object,
      default: function _default24() {
        return void 0;
      }
    },
    pieChart: {
      type: Object,
      default: function _default25() {
        return void 0;
      }
    },
    popover: {
      type: Object,
      default: function _default26() {
        return void 0;
      }
    },
    popup: {
      type: Object,
      default: function _default27() {
        return void 0;
      }
    },
    range: {
      type: Object,
      default: function _default28() {
        return void 0;
      }
    },
    searchbar: {
      type: Object,
      default: function _default29() {
        return void 0;
      }
    },
    sheet: {
      type: Object,
      default: function _default30() {
        return void 0;
      }
    },
    smartSelect: {
      type: Object,
      default: function _default31() {
        return void 0;
      }
    },
    sortable: {
      type: Object,
      default: function _default32() {
        return void 0;
      }
    },
    statusbar: {
      type: Object,
      default: function _default33() {
        return void 0;
      }
    },
    stepper: {
      type: Object,
      default: function _default34() {
        return void 0;
      }
    },
    swipeout: {
      type: Object,
      default: function _default35() {
        return void 0;
      }
    },
    textEditor: {
      type: Object,
      default: function _default36() {
        return void 0;
      }
    },
    toast: {
      type: Object,
      default: function _default37() {
        return void 0;
      }
    },
    toolbar: {
      type: Object,
      default: function _default38() {
        return void 0;
      }
    },
    tooltip: {
      type: Object,
      default: function _default39() {
        return void 0;
      }
    },
    view: {
      type: Object,
      default: function _default40() {
        return void 0;
      }
    },
    virtualList: {
      type: Object,
      default: function _default41() {
        return void 0;
      }
    },
    clicks: {
      type: Object,
      default: function _default42() {
        return void 0;
      }
    },
    serviceWorker: {
      type: Object,
      default: function _default43() {
        return void 0;
      }
    },
    touch: {
      type: Object,
      default: function _default44() {
        return void 0;
      }
    }
  }, colorProps),
  setup: function setup10(props) {
    var elRef = ref(null);
    var routes = toRaw(props.routes);
    if (!f7 || typeof window === "undefined") {
      f7init(elRef.value, noUndefinedProps(_extends10({}, props, {
        routes
      })), false);
    }
    onMounted(function() {
      var parentEl = elRef.value && elRef.value.parentNode;
      if (typeof document !== "undefined" && parentEl && parentEl !== document.body && parentEl.parentNode === document.body) {
        parentEl.style.height = "100%";
      }
      if (f7) {
        f7.init(elRef.value);
        return;
      }
      f7init(elRef.value, noUndefinedProps(_extends10({}, props, {
        routes
      })), true);
    });
    var classes = computed(function() {
      return classNames("framework7-root", colorClasses(props));
    });
    return {
      classes,
      elRef
    };
  }
};

// node_modules/framework7-vue/esm/components/appbar.js
function _extends11() {
  _extends11 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends11.apply(this, arguments);
}
function render10(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "before-inner"), _ctx.inner ? (openBlock(), createBlock("div", {
    key: 0,
    class: _ctx.innerClasses
  }, [renderSlot(_ctx.$slots, "default")], 2)) : renderSlot(_ctx.$slots, "default", {
    key: 1
  }), renderSlot(_ctx.$slots, "after-inner")], 2);
}
var appbar_default = {
  name: "f7-appbar",
  render: render10,
  props: _extends11({
    noShadow: Boolean,
    noHairline: Boolean,
    inner: {
      type: Boolean,
      default: true
    },
    innerClass: String,
    innerClassName: String
  }, colorProps),
  setup: function setup11(props) {
    var classes = computed(function() {
      return classNames("appbar", {
        "no-shadow": props.noShadow,
        "no-hairline": props.noHairline
      }, colorClasses(props));
    });
    var innerClasses = computed(function() {
      return classNames("appbar-inner", props.innerClass, props.innerClassName);
    });
    return {
      classes,
      innerClasses
    };
  }
};

// node_modules/framework7-vue/esm/components/area-chart.js
var _hoisted_12 = {
  key: 0,
  class: "area-chart-axis"
};
var _hoisted_22 = {
  key: 0
};
var _hoisted_3 = {
  key: 1,
  class: "area-chart-legend"
};
function render11(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [(openBlock(), createBlock("svg", {
    ref: "svgElRef",
    xmlns: "http://www.w3.org/2000/svg",
    width: _ctx.width,
    height: _ctx.height,
    viewBox: "0 0 " + _ctx.width + " " + _ctx.height,
    preserveAspectRatio: "none"
  }, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.chartData, function(data, index) {
    return openBlock(), createBlock(resolveDynamicComponent(_ctx.ChartTag), {
      key: _ctx.ChartTag + "-" + index,
      fill: _ctx.lineChart ? void 0 : data.color,
      stroke: _ctx.lineChart ? data.color : void 0,
      "fill-rule": "evenodd",
      points: _ctx.lineChart ? void 0 : data.points,
      d: _ctx.lineChart ? data.points : void 0
    }, null, 8, ["fill", "stroke", "points", "d"]);
  }), 128)), (openBlock(true), createBlock(Fragment, null, renderList(_ctx.verticalLines, function(line, index) {
    return openBlock(), createBlock("line", {
      key: "line-" + index,
      "data-index": index,
      fill: "#000",
      x1: line,
      y1: 0,
      x2: line,
      y2: _ctx.height,
      class: _ctx.classNames({
        "area-chart-current-line": _ctx.currentIndex === index
      })
    }, null, 10, ["data-index", "x1", "x2", "y2"]);
  }), 128))], 8, ["width", "height", "viewBox"])), _ctx.axis ? (openBlock(), createBlock("div", _hoisted_12, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.axisLabels, function(label, index) {
    return openBlock(), createBlock("span", {
      key: index
    }, [_ctx.visibleLegends.includes(label) ? (openBlock(), createBlock("span", _hoisted_22, toDisplayString(_ctx.formatAxisLabelMethod(label)), 1)) : createCommentVNode("", true)]);
  }), 128))])) : createCommentVNode("", true), _ctx.legend ? (openBlock(), createBlock("div", _hoisted_3, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.datasets, function(dataset, index) {
    return openBlock(), createBlock(resolveDynamicComponent(_ctx.LegendItemTag), {
      key: index,
      class: _ctx.classNames("area-chart-legend-item", {
        "area-chart-legend-item-hidden": _ctx.hiddenDatasets.includes(index),
        "area-chart-legend-button": _ctx.toggleDatasets
      }),
      type: _ctx.toggleDatasets ? "button" : void 0,
      onClick: function onClick($event) {
        return _ctx.toggleDataset(index);
      }
    }, {
      default: withCtx(function() {
        return [createVNode("span", {
          style: {
            backgroundColor: dataset.color
          }
        }, null, 4), createTextVNode(" " + toDisplayString(_ctx.formatLegendLabelMethod(dataset.label)), 1)];
      }),
      _: 2
    }, 1032, ["class", "type", "onClick"]);
  }), 128))])) : createCommentVNode("", true), renderSlot(_ctx.$slots, "default")], 2);
}
var area_chart_default = {
  name: "f7-area-chart",
  render: render11,
  props: {
    lineChart: Boolean,
    datasets: {
      type: Array,
      default: function _default45() {
        return [];
      }
    },
    axis: Boolean,
    axisLabels: {
      type: Array,
      default: function _default46() {
        return [];
      }
    },
    tooltip: Boolean,
    legend: Boolean,
    toggleDatasets: Boolean,
    width: {
      type: Number,
      default: 640
    },
    height: {
      type: Number,
      default: 320
    },
    maxAxisLabels: {
      type: Number,
      default: 8
    },
    formatAxisLabel: Function,
    formatLegendLabel: Function,
    formatTooltip: Function,
    formatTooltipAxisLabel: Function,
    formatTooltipTotal: Function,
    formatTooltipDataset: Function
  },
  emits: ["select"],
  setup: function setup12(props, _ref) {
    var emit = _ref.emit;
    var f7Tooltip = null;
    var currentIndex = ref(null);
    var hiddenDatasets = ref([]);
    var elRef = ref(null);
    var svgElRef = ref(null);
    var linesOffsets = ref(null);
    var visibleLegends = computed(function() {
      if (!props.maxAxisLabels || props.axisLabels.length <= props.maxAxisLabels)
        return props.axisLabels;
      var skipStep = Math.ceil(props.axisLabels.length / props.maxAxisLabels);
      var filtered = props.axisLabels.filter(function(label, index) {
        return index % skipStep === 0;
      });
      return filtered;
    });
    var summValues = computed(function() {
      var summ = [];
      props.datasets.filter(function(dataset, index) {
        return !hiddenDatasets.value.includes(index);
      }).forEach(function(_ref2) {
        var values = _ref2.values;
        values.forEach(function(value, valueIndex) {
          if (!summ[valueIndex])
            summ[valueIndex] = 0;
          summ[valueIndex] += value;
        });
      });
      return summ;
    });
    var chartData = computed(function() {
      var datasets = props.datasets, lineChart = props.lineChart, width = props.width, height = props.height;
      var data = [];
      if (!datasets.length) {
        return data;
      }
      var lastValues = datasets[0].values.map(function() {
        return 0;
      });
      var maxValue = 0;
      if (lineChart) {
        datasets.forEach(function(_ref3) {
          var values = _ref3.values;
          var datasetMaxValue = Math.max.apply(Math, values);
          if (datasetMaxValue > maxValue)
            maxValue = datasetMaxValue;
        });
      } else {
        maxValue = Math.max.apply(Math, summValues.value);
      }
      datasets.filter(function(dataset, index) {
        return !hiddenDatasets.value.includes(index);
      }).forEach(function(_ref4) {
        var label = _ref4.label, values = _ref4.values, color = _ref4.color;
        var points = values.map(function(originalValue, valueIndex) {
          lastValues[valueIndex] += originalValue;
          var value = lineChart ? originalValue : lastValues[valueIndex];
          var x = valueIndex / (values.length - 1) * width;
          var y = height - value / maxValue * height;
          if (lineChart) {
            return "" + (valueIndex === 0 ? "M" : "L") + x + "," + y;
          }
          return x + " " + y;
        });
        if (!lineChart) {
          points.push(width + " " + height + " 0 " + height);
        }
        data.push({
          label,
          points: points.join(" "),
          color
        });
      });
      return data.reverse();
    });
    var verticalLines = computed(function() {
      var lines = [];
      if (!props.datasets.length) {
        return lines;
      }
      var values = props.datasets[0].values;
      values.forEach(function(value, valueIndex) {
        var x = valueIndex / (values.length - 1) * props.width;
        lines.push(x);
      });
      return lines;
    });
    var toggleDataset = function toggleDataset2(index) {
      if (!props.toggleDatasets)
        return;
      if (hiddenDatasets.value.includes(index)) {
        hiddenDatasets.value.splice(hiddenDatasets.value.indexOf(index), 1);
      } else {
        hiddenDatasets.value.push(index);
      }
      hiddenDatasets.value = [].concat(hiddenDatasets.value);
    };
    var formatAxisLabelMethod = function formatAxisLabelMethod2(label) {
      if (props.formatAxisLabel)
        return props.formatAxisLabel(label);
      return label;
    };
    var formatLegendLabelMethod = function formatLegendLabelMethod2(label) {
      if (props.formatLegendLabel)
        return props.formatLegendLabel(label);
      return label;
    };
    var calcLinesOffsets = function calcLinesOffsets2() {
      var lines = svgElRef.value.querySelectorAll("line");
      linesOffsets.value = [];
      for (var i = 0; i < lines.length; i += 1) {
        linesOffsets.value.push(lines[i].getBoundingClientRect().left);
      }
    };
    var formatTooltip = function formatTooltip2() {
      var index = currentIndex.value;
      if (index === null)
        return "";
      var total = 0;
      var currentValues = props.datasets.filter(function(dataset, i) {
        return !hiddenDatasets.value.includes(i);
      }).map(function(dataset) {
        return {
          color: dataset.color,
          label: dataset.label,
          value: dataset.values[index]
        };
      });
      currentValues.forEach(function(dataset) {
        total += dataset.value;
      });
      if (props.formatTooltip) {
        return props.formatTooltip({
          index,
          total,
          datasets: currentValues
        });
      }
      var labelText = props.formatTooltipAxisLabel ? props.formatTooltipAxisLabel(props.axisLabels[index]) : formatAxisLabelMethod(props.axisLabels[index]);
      if (!labelText)
        labelText = "";
      var totalText = props.formatTooltipTotal ? props.formatTooltipTotal(total) : total;
      var datasetsText = currentValues.length > 0 ? '\n      <ul class="area-chart-tooltip-list">\n        ' + currentValues.map(function(_ref5) {
        var label = _ref5.label, color = _ref5.color, value = _ref5.value;
        var valueText = props.formatTooltipDataset ? props.formatTooltipDataset(label, value, color) : label + ": " + value;
        return '\n              <li><span style="background-color: ' + color + ';"></span>' + valueText + "</li>\n            ";
      }).join("") + "\n      </ul>" : "";
      return '\n      <div class="area-chart-tooltip-label">' + labelText + '</div>\n      <div class="area-chart-tooltip-total">' + totalText + "</div>\n      " + datasetsText + "\n    ";
    };
    var setTooltip = function setTooltip2() {
      var tooltip = props.tooltip, datasets = props.datasets;
      var index = currentIndex.value;
      if (!tooltip)
        return;
      var hasVisibleDataSets = datasets.filter(function(dataset, i) {
        return !hiddenDatasets.value.includes(i);
      }).length > 0;
      if (!hasVisibleDataSets) {
        if (f7Tooltip && f7Tooltip.hide)
          f7Tooltip.hide();
        return;
      }
      if (index !== null && !f7Tooltip) {
        f7Tooltip = f7.tooltip.create({
          trigger: "manual",
          containerEl: elRef.value,
          targetEl: svgElRef.value.querySelector('line[data-index="' + index + '"]'),
          text: formatTooltip(),
          cssClass: "area-chart-tooltip"
        });
        if (f7Tooltip && f7Tooltip.show) {
          f7Tooltip.show();
        }
        return;
      }
      if (!f7Tooltip || !f7Tooltip.hide || !f7Tooltip.show) {
        return;
      }
      if (index !== null) {
        f7Tooltip.setText(formatTooltip());
        f7Tooltip.setTargetEl(svgElRef.value.querySelector('line[data-index="' + index + '"]'));
        f7Tooltip.show();
      } else {
        f7Tooltip.hide();
      }
    };
    var onMouseEnter = function onMouseEnter2() {
      calcLinesOffsets();
    };
    var onMouseMove = function onMouseMove2(e) {
      if (!linesOffsets.value) {
        calcLinesOffsets();
      }
      var currentLeft = e.pageX;
      if (typeof currentLeft === "undefined")
        currentLeft = 0;
      var distances = linesOffsets.value.map(function(left) {
        return Math.abs(currentLeft - left);
      });
      var minDistance = Math.min.apply(Math, distances);
      var closestIndex = distances.indexOf(minDistance);
      currentIndex.value = closestIndex;
    };
    var onMouseLeave = function onMouseLeave2() {
      currentIndex.value = null;
    };
    watch(function() {
      return currentIndex.value;
    }, function() {
      emit("select", currentIndex.value);
      setTooltip();
    });
    onMounted(function() {
      if (!svgElRef.value)
        return;
      svgElRef.value.addEventListener("mouseenter", onMouseEnter);
      svgElRef.value.addEventListener("mousemove", onMouseMove);
      svgElRef.value.addEventListener("mouseleave", onMouseLeave);
    });
    onBeforeUnmount(function() {
      if (f7Tooltip && f7Tooltip.destroy) {
        f7Tooltip.destroy();
      }
      f7Tooltip = null;
      if (!svgElRef.value)
        return;
      svgElRef.value.removeEventListener("mouseenter", onMouseEnter);
      svgElRef.value.removeEventListener("mousemove", onMouseMove);
      svgElRef.value.removeEventListener("mouseleave", onMouseLeave);
    });
    var classes = computed(function() {
      return classNames("area-chart");
    });
    var LegendItemTag = computed(function() {
      return props.toggleDatasets ? "button" : "span";
    });
    var ChartTag = computed(function() {
      return props.lineChart ? "path" : "polygon";
    });
    return {
      currentIndex,
      hiddenDatasets,
      visibleLegends,
      chartData,
      verticalLines,
      elRef,
      svgElRef,
      classes,
      toggleDataset,
      formatAxisLabelMethod,
      formatLegendLabelMethod,
      LegendItemTag,
      ChartTag,
      classNames
    };
  }
};

// node_modules/framework7-vue/esm/shared/use-tooltip.js
var useTooltip = function useTooltip2(elRef, props) {
  var f7Tooltip = null;
  var tooltip = props.tooltip, tooltipTrigger = props.tooltipTrigger;
  onMounted(function() {
    if (!elRef.value)
      return;
    if (!tooltip)
      return;
    f7ready(function() {
      f7Tooltip = f7.tooltip.create({
        targetEl: elRef.value,
        text: tooltip,
        trigger: tooltipTrigger
      });
    });
  });
  onBeforeUnmount(function() {
    if (f7Tooltip && f7Tooltip.destroy) {
      f7Tooltip.destroy();
      f7Tooltip = null;
    }
  });
  watch(function() {
    return props.tooltip;
  }, function(value) {
    if (!value && f7Tooltip) {
      f7Tooltip.destroy();
      f7Tooltip = null;
      return;
    }
    if (value && !f7Tooltip && f7) {
      f7Tooltip = f7.tooltip.create({
        targetEl: elRef.value,
        text: value,
        trigger: tooltipTrigger
      });
      return;
    }
    if (!value || !f7Tooltip)
      return;
    f7Tooltip.setText(value);
  });
};

// node_modules/framework7-vue/esm/components/badge.js
function _extends12() {
  _extends12 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends12.apply(this, arguments);
}
function render12(_ctx, _cache) {
  return openBlock(), createBlock("span", {
    ref: "elRef",
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var badge_default = {
  name: "f7-badge",
  render: render12,
  props: _extends12({
    tooltip: String,
    tooltipTrigger: String
  }, colorProps),
  setup: function setup13(props) {
    var elRef = ref(null);
    useTooltip(elRef, props);
    var classes = computed(function() {
      return classNames("badge", colorClasses(props));
    });
    return {
      elRef,
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/block-footer.js
function _extends13() {
  _extends13 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends13.apply(this, arguments);
}
function render13(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var block_footer_default = {
  name: "f7-block-footer",
  render: render13,
  props: _extends13({}, colorProps),
  setup: function setup14(props) {
    var classes = computed(function() {
      return classNames("block-footer", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/block-header.js
function _extends14() {
  _extends14 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends14.apply(this, arguments);
}
function render14(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var block_header_default = {
  name: "f7-block-header",
  render: render14,
  props: _extends14({}, colorProps),
  setup: function setup15(props) {
    var classes = computed(function() {
      return classNames("block-header", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/block-title.js
function _extends15() {
  _extends15 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends15.apply(this, arguments);
}
function render15(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes,
    medium: _ctx.medium
  }, [renderSlot(_ctx.$slots, "default")], 10, ["medium"]);
}
var block_title_default = {
  name: "f7-block-title",
  render: render15,
  props: _extends15({
    large: Boolean,
    medium: Boolean
  }, colorProps),
  setup: function setup16(props) {
    var classes = computed(function() {
      var large = props.large, medium = props.medium;
      return classNames("block-title", {
        "block-title-large": large,
        "block-title-medium": medium
      }, colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/shared/use-tab.js
var useTab = function useTab2(elRef, emit) {
  var onTabShow = function onTabShow2(el) {
    if (elRef.value !== el)
      return;
    emit("tab:show", el);
  };
  var onTabHide = function onTabHide2(el) {
    if (elRef.value !== el)
      return;
    emit("tab:hide", el);
  };
  onMounted(function() {
    if (!elRef.value)
      return;
    f7ready(function() {
      f7.on("tabShow", onTabShow);
      f7.on("tabHide", onTabHide);
    });
  });
  onBeforeUnmount(function() {
    if (!f7)
      return;
    f7.off("tabShow", onTabShow);
    f7.off("tabHide", onTabHide);
  });
};

// node_modules/framework7-vue/esm/components/block.js
function _extends16() {
  _extends16 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends16.apply(this, arguments);
}
function render16(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var block_default = {
  name: "f7-block",
  render: render16,
  props: _extends16({
    inset: Boolean,
    xsmallInset: Boolean,
    smallInset: Boolean,
    mediumInset: Boolean,
    largeInset: Boolean,
    xlargeInset: Boolean,
    strong: Boolean,
    tabs: Boolean,
    tab: Boolean,
    tabActive: Boolean,
    accordionList: Boolean,
    accordionOpposite: Boolean,
    noHairlines: Boolean,
    noHairlinesMd: Boolean,
    noHairlinesIos: Boolean,
    noHairlinesAurora: Boolean
  }, colorProps),
  emits: ["tab:hide", "tab:show"],
  setup: function setup17(props, _ref) {
    var emit = _ref.emit;
    var elRef = ref(null);
    useTab(elRef, emit);
    var classes = computed(function() {
      var inset = props.inset, xsmallInset = props.xsmallInset, smallInset = props.smallInset, mediumInset = props.mediumInset, largeInset = props.largeInset, xlargeInset = props.xlargeInset, strong = props.strong, accordionList = props.accordionList, accordionOpposite = props.accordionOpposite, tabs = props.tabs, tab = props.tab, tabActive = props.tabActive, noHairlines = props.noHairlines, noHairlinesMd = props.noHairlinesMd, noHairlinesIos = props.noHairlinesIos, noHairlinesAurora = props.noHairlinesAurora;
      return classNames("block", {
        inset,
        "xsmall-inset": xsmallInset,
        "small-inset": smallInset,
        "medium-inset": mediumInset,
        "large-inset": largeInset,
        "xlarge-inset": xlargeInset,
        "block-strong": strong,
        "accordion-list": accordionList,
        "accordion-opposite": accordionOpposite,
        tabs,
        tab,
        "tab-active": tabActive,
        "no-hairlines": noHairlines,
        "no-hairlines-md": noHairlinesMd,
        "no-hairlines-ios": noHairlinesIos,
        "no-hairlines-aurora": noHairlinesAurora
      }, colorClasses(props));
    });
    return {
      elRef,
      classes
    };
  }
};

// node_modules/framework7-vue/esm/shared/use-icon.js
var useIcon = function useIcon2(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, icon = _props.icon, iconMaterial = _props.iconMaterial, iconF7 = _props.iconF7, iconMd = _props.iconMd, iconIos = _props.iconIos, iconAurora = _props.iconAurora, iconColor = _props.iconColor, iconSize = _props.iconSize, iconBadge = _props.iconBadge, badgeColor = _props.badgeColor, iconBadgeColor = _props.iconBadgeColor;
  if (icon || iconMaterial || iconF7 || iconMd || iconIos || iconAurora) {
    return {
      props: {
        material: iconMaterial,
        f7: iconF7,
        icon,
        md: iconMd,
        ios: iconIos,
        aurora: iconAurora,
        color: iconColor,
        size: iconSize
      },
      badge: iconBadge || iconBadge === 0 ? {
        props: {
          color: badgeColor || iconBadgeColor
        },
        content: iconBadge
      } : null
    };
  }
  return null;
};

// node_modules/framework7-vue/esm/shared/use-route-props.js
var useRouteProps = function useRouteProps2(elRef, _temp) {
  var _ref = _temp === void 0 ? {} : _temp, routeProps = _ref.routeProps;
  onMounted(function() {
    if (elRef.value && routeProps) {
      elRef.value.f7RouteProps = routeProps;
    }
  });
  onUpdated(function() {
    if (elRef.value && routeProps) {
      elRef.value.f7RouteProps = routeProps;
    } else if (elRef.value && elRef.value.f7RouteProps) {
      delete elRef.value.f7RouteProps;
    }
  });
};

// node_modules/framework7-vue/esm/shared/use-theme.js
var useTheme = function useTheme2() {
  var t = ref(f7 ? theme : null);
  if (!f7) {
    f7ready(function() {
      t.value = theme;
    });
  }
  return t;
};

// node_modules/framework7-vue/esm/components/preloader.js
function _extends17() {
  _extends17 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends17.apply(this, arguments);
}
var _hoisted_13 = {
  key: 0,
  class: "preloader-inner"
};
var _hoisted_23 = createVNode("svg", {
  viewBox: "0 0 36 36"
}, [createVNode("circle", {
  cx: "18",
  cy: "18",
  r: "16"
})], -1);
var _hoisted_32 = {
  key: 1,
  class: "preloader-inner"
};
var _hoisted_4 = createStaticVNode('<span class="preloader-inner-line"></span><span class="preloader-inner-line"></span><span class="preloader-inner-line"></span><span class="preloader-inner-line"></span><span class="preloader-inner-line"></span><span class="preloader-inner-line"></span><span class="preloader-inner-line"></span><span class="preloader-inner-line"></span>', 8);
var _hoisted_122 = {
  key: 2,
  class: "preloader-inner"
};
var _hoisted_132 = createVNode("span", {
  class: "preloader-inner-circle"
}, null, -1);
var _hoisted_14 = {
  key: 3,
  class: "preloader-inner"
};
function render17(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [_ctx.theme && _ctx.theme.md ? (openBlock(), createBlock("span", _hoisted_13, [_hoisted_23])) : _ctx.theme && _ctx.theme.ios ? (openBlock(), createBlock("span", _hoisted_32, [_hoisted_4])) : _ctx.theme && _ctx.theme.aurora ? (openBlock(), createBlock("span", _hoisted_122, [_hoisted_132])) : !_ctx.theme ? (openBlock(), createBlock("span", _hoisted_14)) : createCommentVNode("", true)], 2);
}
var preloader_default = {
  name: "f7-preloader",
  render: render17,
  props: _extends17({
    size: [Number, String]
  }, colorProps),
  setup: function setup18(props) {
    var theme2 = useTheme();
    var classes = computed(function() {
      return classNames("preloader", colorClasses(props));
    });
    var style = computed(function() {
      var preloaderStyle = {};
      var sizeComputed = props.size;
      if (sizeComputed && typeof sizeComputed === "string" && sizeComputed.indexOf("px") >= 0) {
        sizeComputed = sizeComputed.replace("px", "");
      }
      if (sizeComputed) {
        preloaderStyle.width = sizeComputed + "px";
        preloaderStyle.height = sizeComputed + "px";
        preloaderStyle["--f7-preloader-size"] = sizeComputed + "px";
      }
      return preloaderStyle;
    });
    return {
      classes,
      style,
      theme: theme2
    };
  }
};

// node_modules/framework7-vue/esm/components/icon.js
function _extends18() {
  _extends18 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends18.apply(this, arguments);
}
function render18(_ctx, _cache) {
  return openBlock(), createBlock("i", {
    ref: "elRef",
    style: {
      fontSize: _ctx.sizeComputed,
      width: _ctx.sizeComputed,
      height: _ctx.sizeComputed
    },
    class: _ctx.classesComputed
  }, [createTextVNode(toDisplayString(_ctx.iconText) + " ", 1), renderSlot(_ctx.$slots, "default")], 6);
}
var icon_default = {
  name: "f7-icon",
  render: render18,
  props: _extends18({
    material: String,
    f7: String,
    icon: String,
    ios: String,
    aurora: String,
    md: String,
    tooltip: String,
    tooltipTrigger: String,
    size: [String, Number]
  }, colorProps),
  setup: function setup19(props) {
    var elRef = ref(null);
    var theme2 = useTheme();
    useTooltip(elRef, props);
    var classesComputed = computed(function() {
      var ios = props.ios, md = props.md, aurora = props.aurora, f72 = props.f7, material = props.material, icon = props.icon;
      var classes = {
        icon: true
      };
      var themeIcon;
      if (theme2.value && theme2.value.ios)
        themeIcon = ios;
      else if (theme2.value && theme2.value.md)
        themeIcon = md;
      else if (theme2.value && theme2.value.aurora)
        themeIcon = aurora;
      if (themeIcon) {
        var parts = themeIcon.split(":");
        var prop = parts[0];
        var value = parts[1];
        if (prop === "material" || prop === "f7") {
          classes["material-icons"] = prop === "material";
          classes["f7-icons"] = prop === "f7";
        }
        if (prop === "icon") {
          classes[value] = true;
        }
      } else {
        classes = {
          icon: true,
          "material-icons": material,
          "f7-icons": f72
        };
        if (icon)
          classes[icon] = true;
      }
      return classNames(classes, colorClasses(props));
    });
    var sizeComputed = computed(function() {
      var size = props.size;
      if (typeof props.size === "number" || parseFloat(props.size) === props.size * 1) {
        size = props.size + "px";
      }
      return size;
    });
    var iconText = computed(function() {
      var ios = props.ios, md = props.md, aurora = props.aurora, f72 = props.f7, material = props.material;
      var text = material || f72;
      if (md && theme2.value && theme2.value.md && (md.indexOf("material:") >= 0 || md.indexOf("f7:") >= 0)) {
        text = md.split(":")[1];
      } else if (ios && theme2.value && theme2.value.ios && (ios.indexOf("material:") >= 0 || ios.indexOf("f7:") >= 0)) {
        text = ios.split(":")[1];
      } else if (aurora && theme2.value && theme2.value.aurora && (aurora.indexOf("material:") >= 0 || aurora.indexOf("f7:") >= 0)) {
        text = aurora.split(":")[1];
      }
      return text;
    });
    return {
      elRef,
      sizeComputed,
      classesComputed,
      iconText
    };
  }
};

// node_modules/framework7-vue/esm/components/use-icon.js
function render19(_ctx, _cache) {
  var _component_f7_badge = resolveComponent("f7-badge");
  var _component_f7_icon = resolveComponent("f7-icon");
  return openBlock(), createBlock(_component_f7_icon, _ctx.icon.props, {
    default: withCtx(function() {
      return [_ctx.icon.badge ? (openBlock(), createBlock(_component_f7_badge, mergeProps({
        key: 0
      }, _ctx.icon.badge.props), {
        default: withCtx(function() {
          return [createTextVNode(toDisplayString(_ctx.icon.badge.content), 1)];
        }),
        _: 1
      }, 16)) : createCommentVNode("", true)];
    }),
    _: 1
  }, 16);
}
var use_icon_default = {
  name: "f7-use-icon",
  render: render19,
  components: {
    f7Icon: icon_default,
    f7Badge: badge_default
  },
  props: {
    icon: Object
  }
};

// node_modules/framework7-vue/esm/components/button.js
function _extends19() {
  _extends19 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends19.apply(this, arguments);
}
var _hoisted_15 = {
  key: 1
};
var _hoisted_24 = {
  key: 1
};
function render20(_ctx, _cache) {
  var _component_f7_preloader = resolveComponent("f7-preloader");
  var _component_f7_use_icon = resolveComponent("f7-use-icon");
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps({
    ref: "elRef",
    class: _ctx.classesComputed
  }, _ctx.attrs), {
    default: withCtx(function() {
      return [_ctx.preloader ? (openBlock(), createBlock(Fragment, {
        key: 0
      }, [createVNode(_component_f7_preloader, {
        size: _ctx.preloaderSize,
        color: _ctx.preloaderColor
      }, null, 8, ["size", "color"]), createVNode("span", null, [_ctx.icon ? (openBlock(), createBlock(_component_f7_use_icon, {
        key: 0,
        icon: _ctx.icon
      }, null, 8, ["icon"])) : createCommentVNode("", true), _ctx.text ? (openBlock(), createBlock("span", _hoisted_15, toDisplayString(_ctx.text), 1)) : createCommentVNode("", true), renderSlot(_ctx.$slots, "default")])], 64)) : (openBlock(), createBlock(Fragment, {
        key: 1
      }, [_ctx.icon ? (openBlock(), createBlock(_component_f7_use_icon, {
        key: 0,
        icon: _ctx.icon
      }, null, 8, ["icon"])) : createCommentVNode("", true), _ctx.text ? (openBlock(), createBlock("span", _hoisted_24, toDisplayString(_ctx.text), 1)) : createCommentVNode("", true), renderSlot(_ctx.$slots, "default")], 64))];
    }),
    _: 1
  }, 16, ["class"]);
}
var button_default = {
  name: "f7-button",
  render: render20,
  components: {
    f7Preloader: preloader_default,
    f7UseIcon: use_icon_default
  },
  props: _extends19({
    text: String,
    tabLink: [Boolean, String],
    tabLinkActive: Boolean,
    type: String,
    href: {
      type: [String, Boolean],
      default: "#"
    },
    target: String,
    round: Boolean,
    roundMd: Boolean,
    roundIos: Boolean,
    roundAurora: Boolean,
    fill: Boolean,
    fillMd: Boolean,
    fillIos: Boolean,
    fillAurora: Boolean,
    large: Boolean,
    largeMd: Boolean,
    largeIos: Boolean,
    largeAurora: Boolean,
    small: Boolean,
    smallMd: Boolean,
    smallIos: Boolean,
    smallAurora: Boolean,
    raised: Boolean,
    raisedMd: Boolean,
    raisedIos: Boolean,
    raisedAurora: Boolean,
    outline: Boolean,
    outlineMd: Boolean,
    outlineIos: Boolean,
    outlineAurora: Boolean,
    active: Boolean,
    disabled: Boolean,
    tooltip: String,
    tooltipTrigger: String,
    preloader: Boolean,
    preloaderSize: [Number, String],
    preloaderColor: String,
    loading: Boolean
  }, iconProps, colorProps, actionsProps, routerProps),
  setup: function setup20(props) {
    var elRef = ref(null);
    useTooltip(elRef, props);
    useRouteProps(elRef, props);
    var icon = computed(function() {
      return useIcon(props);
    });
    var tag = computed(function() {
      return props.type === "submit" || props.type === "reset" || props.type === "button" ? "button" : "a";
    });
    var attrs = computed(function() {
      var href = props.href, tabLink = props.tabLink, target = props.target, type = props.type;
      var hrefComputed = href;
      if (href === true)
        hrefComputed = "#";
      if (href === false || tag.value === "button")
        hrefComputed = void 0;
      return extend({
        href: hrefComputed,
        target,
        type,
        "data-tab": isStringProp(tabLink) && tabLink || void 0
      }, routerAttrs(props), actionsAttrs(props));
    });
    var classesComputed = computed(function() {
      var tabLink = props.tabLink, tabLinkActive = props.tabLinkActive, round = props.round, roundMd = props.roundMd, roundIos = props.roundIos, roundAurora = props.roundAurora, fill = props.fill, fillMd = props.fillMd, fillIos = props.fillIos, fillAurora = props.fillAurora, large = props.large, largeMd = props.largeMd, largeIos = props.largeIos, largeAurora = props.largeAurora, small = props.small, smallMd = props.smallMd, smallIos = props.smallIos, smallAurora = props.smallAurora, raised = props.raised, raisedMd = props.raisedMd, raisedIos = props.raisedIos, raisedAurora = props.raisedAurora, outline = props.outline, outlineMd = props.outlineMd, outlineIos = props.outlineIos, outlineAurora = props.outlineAurora, active = props.active, disabled = props.disabled, preloader = props.preloader, loading = props.loading;
      return classNames("button", {
        "tab-link": tabLink || tabLink === "",
        "tab-link-active": tabLinkActive,
        "button-round": round,
        "button-round-ios": roundIos,
        "button-round-aurora": roundAurora,
        "button-round-md": roundMd,
        "button-fill": fill,
        "button-fill-ios": fillIos,
        "button-fill-aurora": fillAurora,
        "button-fill-md": fillMd,
        "button-large": large,
        "button-large-ios": largeIos,
        "button-large-aurora": largeAurora,
        "button-large-md": largeMd,
        "button-small": small,
        "button-small-ios": smallIos,
        "button-small-aurora": smallAurora,
        "button-small-md": smallMd,
        "button-raised": raised,
        "button-raised-ios": raisedIos,
        "button-raised-aurora": raisedAurora,
        "button-raised-md": raisedMd,
        "button-active": active,
        "button-outline": outline,
        "button-outline-ios": outlineIos,
        "button-outline-aurora": outlineAurora,
        "button-outline-md": outlineMd,
        "button-preloader": preloader,
        "button-loading": loading,
        disabled
      }, colorClasses(props), routerClasses(props), actionsClasses(props));
    });
    return {
      tag,
      elRef,
      attrs,
      classesComputed,
      icon
    };
  }
};

// node_modules/framework7-vue/esm/components/card-content.js
function _extends20() {
  _extends20 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends20.apply(this, arguments);
}
function render21(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var card_content_default = {
  name: "f7-card-content",
  render: render21,
  props: _extends20({
    padding: {
      type: Boolean,
      default: true
    }
  }, colorProps),
  setup: function setup21(props) {
    var classes = computed(function() {
      return classNames("card-content", {
        "card-content-padding": props.padding
      }, colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/card-footer.js
function _extends21() {
  _extends21 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends21.apply(this, arguments);
}
function render22(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var card_footer_default = {
  name: "f7-card-footer",
  render: render22,
  props: _extends21({}, colorProps),
  setup: function setup22(props) {
    var classes = computed(function() {
      return classNames("card-footer", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/card-header.js
function _extends22() {
  _extends22 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends22.apply(this, arguments);
}
function render23(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var card_header_default = {
  name: "f7-card-header",
  render: render23,
  props: _extends22({}, colorProps),
  setup: function setup23(props) {
    var classes = computed(function() {
      return classNames("card-header", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/card.js
function _extends23() {
  _extends23 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends23.apply(this, arguments);
}
function render24(_ctx, _cache) {
  var _component_f7_card_header = resolveComponent("f7-card-header");
  var _component_f7_card_content = resolveComponent("f7-card-content");
  var _component_f7_card_footer = resolveComponent("f7-card-footer");
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes,
    "data-animate": typeof _ctx.animate === "undefined" ? _ctx.animate : _ctx.animate.toString(),
    "data-hide-navbar-on-open": typeof _ctx.hideNavbarOnOpen === "undefined" ? _ctx.hideNavbarOnOpen : _ctx.hideNavbarOnOpen.toString(),
    "data-hide-toolbar-on-open": typeof _ctx.hideToolbarOnOpen === "undefined" ? _ctx.hideToolbarOnOpen : _ctx.hideToolbarOnOpen.toString(),
    "data-hide-statusbar-on-open": typeof _ctx.hideStatusbarOnOpen === "undefined" ? _ctx.hideStatusbarOnOpen : _ctx.hideStatusbarOnOpen.toString(),
    "data-scrollable-el": _ctx.scrollableEl,
    "data-swipe-to-close": typeof _ctx.swipeToClose === "undefined" ? _ctx.swipeToClose : _ctx.swipeToClose.toString(),
    "data-close-by-backdrop-click": typeof _ctx.closeByBackdropClick === "undefined" ? _ctx.closeByBackdropClick : _ctx.closeByBackdropClick.toString(),
    "data-backdrop": typeof _ctx.backdrop === "undefined" ? _ctx.backdrop : _ctx.backdrop.toString(),
    "data-backdrop-el": _ctx.backdropEl
  }, [_ctx.hasHeader ? (openBlock(), createBlock(_component_f7_card_header, {
    key: 0
  }, {
    default: withCtx(function() {
      return [createTextVNode(toDisplayString(_ctx.title) + " ", 1), renderSlot(_ctx.$slots, "header")];
    }),
    _: 3
  })) : createCommentVNode("", true), _ctx.hasContent ? (openBlock(), createBlock(_component_f7_card_content, {
    key: 1,
    padding: _ctx.padding
  }, {
    default: withCtx(function() {
      return [createTextVNode(toDisplayString(_ctx.content) + " ", 1), renderSlot(_ctx.$slots, "content")];
    }),
    _: 3
  }, 8, ["padding"])) : createCommentVNode("", true), _ctx.hasFooter ? (openBlock(), createBlock(_component_f7_card_footer, {
    key: 2
  }, {
    default: withCtx(function() {
      return [createTextVNode(toDisplayString(_ctx.footer) + " ", 1), renderSlot(_ctx.$slots, "footer")];
    }),
    _: 3
  })) : createCommentVNode("", true), renderSlot(_ctx.$slots, "default")], 10, ["data-animate", "data-hide-navbar-on-open", "data-hide-toolbar-on-open", "data-hide-statusbar-on-open", "data-scrollable-el", "data-swipe-to-close", "data-close-by-backdrop-click", "data-backdrop", "data-backdrop-el"]);
}
var card_default = {
  name: "f7-card",
  render: render24,
  components: {
    f7CardHeader: card_header_default,
    f7CardContent: card_content_default,
    f7CardFooter: card_footer_default
  },
  props: _extends23({
    title: [String, Number],
    content: [String, Number],
    footer: [String, Number],
    outline: Boolean,
    expandable: Boolean,
    expandableAnimateWidth: Boolean,
    expandableOpened: Boolean,
    animate: {
      type: Boolean,
      default: void 0
    },
    hideNavbarOnOpen: {
      type: Boolean,
      default: void 0
    },
    hideToolbarOnOpen: {
      type: Boolean,
      default: void 0
    },
    hideStatusbarOnOpen: {
      type: Boolean,
      default: void 0
    },
    scrollableEl: {
      type: String,
      default: void 0
    },
    swipeToClose: {
      type: Boolean,
      default: void 0
    },
    closeByBackdropClick: {
      type: Boolean,
      default: void 0
    },
    backdrop: {
      type: Boolean,
      default: void 0
    },
    backdropEl: {
      type: String,
      default: void 0
    },
    noShadow: Boolean,
    noBorder: Boolean,
    padding: {
      type: Boolean,
      default: true
    }
  }, colorProps),
  emits: ["card:beforeopen", "card:open", "card:opened", "card:close", "card:closed", "update:expandableOpened"],
  setup: function setup24(props, _ref) {
    var emit = _ref.emit, slots = _ref.slots;
    var elRef = ref(null);
    var open = function open2() {
      if (!elRef.value)
        return;
      f7.card.open(elRef.value);
    };
    var close = function close2() {
      if (!elRef.value)
        return;
      f7.card.close(elRef.value);
    };
    var onBeforeOpen = function onBeforeOpen2(el, prevent) {
      if (elRef.value !== el)
        return;
      emit("card:beforeopen", el, prevent);
    };
    var onOpen = function onOpen2(el) {
      if (elRef.value !== el)
        return;
      emit("card:open", el);
      emit("update:expandableOpened", true);
    };
    var onOpened = function onOpened2(el, pageEl) {
      if (elRef.value !== el)
        return;
      emit("card:opened", el, pageEl);
    };
    var onClose = function onClose2(el) {
      if (elRef.value !== el)
        return;
      emit("card:close", el);
    };
    var onClosed = function onClosed2(el, pageEl) {
      if (elRef.value !== el)
        return;
      emit("card:closed", el, pageEl);
      emit("update:expandableOpened", false);
    };
    onMounted(function() {
      if (!props.expandable || !elRef.value)
        return;
      f7ready(function() {
        if (props.expandable && props.expandableOpened) {
          f7.card.open(elRef.value, false);
        }
        f7.on("cardBeforeOpen", onBeforeOpen);
        f7.on("cardOpen", onOpen);
        f7.on("cardOpened", onOpened);
        f7.on("cardClose", onClose);
        f7.on("cardClosed", onClosed);
      });
    });
    onBeforeUnmount(function() {
      f7.off("cardBeforeOpen", onBeforeOpen);
      f7.off("cardOpen", onOpen);
      f7.off("cardOpened", onOpened);
      f7.off("cardClose", onClose);
      f7.off("cardClosed", onClosed);
    });
    watch(function() {
      return props.expandableOpened;
    }, function(value) {
      if (value) {
        open();
      } else {
        close();
      }
    });
    var hasHeader = computed(function() {
      return props.title || slots.header;
    });
    var hasContent = computed(function() {
      return props.content || slots.content;
    });
    var hasFooter = computed(function() {
      return props.footer || slots.footer;
    });
    var classes = computed(function() {
      return classNames("card", {
        "card-outline": props.outline,
        "card-expandable": props.expandable,
        "card-expandable-animate-width": props.expandableAnimateWidth,
        "no-shadow": props.noShadow,
        "no-border": props.noBorder
      }, colorClasses(props));
    });
    return {
      elRef,
      classes,
      hasHeader,
      hasContent,
      hasFooter
    };
  }
};

// node_modules/framework7-vue/esm/components/checkbox.js
function _extends24() {
  _extends24 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends24.apply(this, arguments);
}
var _hoisted_16 = createVNode("i", {
  class: "icon-checkbox"
}, null, -1);
function render25(_ctx, _cache) {
  return openBlock(), createBlock("label", {
    class: _ctx.classes
  }, [createVNode("input", {
    ref: "inputElRef",
    type: "checkbox",
    name: _ctx.name,
    value: _ctx.value,
    disabled: _ctx.disabled,
    readonly: _ctx.readonly,
    checked: _ctx.checked,
    onChange: _cache[1] || (_cache[1] = function() {
      return _ctx.onChange && _ctx.onChange.apply(_ctx, arguments);
    })
  }, null, 40, ["name", "value", "disabled", "readonly", "checked"]), _hoisted_16, renderSlot(_ctx.$slots, "default")], 2);
}
var checkbox_default = {
  name: "f7-checkbox",
  render: render25,
  props: _extends24({
    checked: Boolean,
    indeterminate: Boolean,
    name: [Number, String],
    value: {
      type: [Number, String, Boolean],
      default: void 0
    },
    disabled: Boolean,
    readonly: Boolean
  }, colorProps),
  emits: ["update:checked", "change"],
  setup: function setup25(props, _ref) {
    var emit = _ref.emit;
    var inputElRef = ref(null);
    var onChange = function onChange2(event) {
      emit("update:checked", event.target.checked);
      emit("change", event);
    };
    onMounted(function() {
      if (inputElRef.value) {
        inputElRef.value.indeterminate = !!props.indeterminate;
      }
    });
    watch(function() {
      return props.indeterminate;
    }, function(newValue) {
      if (inputElRef.value) {
        inputElRef.value.indeterminate = !!newValue;
      }
    });
    var classes = computed(function() {
      return classNames({
        checkbox: true,
        disabled: props.disabled
      }, colorClasses(props));
    });
    return {
      inputElRef,
      classes,
      onChange
    };
  }
};

// node_modules/framework7-vue/esm/components/chip.js
function _extends25() {
  _extends25 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends25.apply(this, arguments);
}
var _hoisted_17 = {
  key: 1,
  class: "chip-label"
};
function render26(_ctx, _cache) {
  var _component_f7_use_icon = resolveComponent("f7-use-icon");
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [_ctx.hasMedia ? (openBlock(), createBlock("div", {
    key: 0,
    class: _ctx.mediaClasses
  }, [_ctx.icon ? (openBlock(), createBlock(_component_f7_use_icon, {
    key: 0,
    icon: _ctx.icon
  }, null, 8, ["icon"])) : createCommentVNode("", true), createTextVNode(" " + toDisplayString(_ctx.media) + " ", 1), renderSlot(_ctx.$slots, "media")], 2)) : createCommentVNode("", true), _ctx.hasLabel ? (openBlock(), createBlock("div", _hoisted_17, [createTextVNode(toDisplayString(_ctx.text) + " ", 1), renderSlot(_ctx.$slots, "text"), renderSlot(_ctx.$slots, "default")])) : createCommentVNode("", true), _ctx.deleteable ? (openBlock(), createBlock("a", {
    key: 2,
    class: "chip-delete",
    onClick: _cache[1] || (_cache[1] = function() {
      return _ctx.onDeleteClick && _ctx.onDeleteClick.apply(_ctx, arguments);
    })
  })) : createCommentVNode("", true)], 2);
}
var chip_default = {
  name: "f7-chip",
  render: render26,
  components: {
    f7UseIcon: use_icon_default
  },
  props: _extends25({
    media: String,
    text: [String, Number],
    deleteable: Boolean,
    mediaBgColor: String,
    mediaTextColor: String,
    outline: Boolean,
    tooltip: String,
    tooltipTrigger: String
  }, iconProps, colorProps),
  emits: ["delete"],
  setup: function setup26(props, _ref) {
    var slots = _ref.slots, emit = _ref.emit;
    var elRef = ref(null);
    var onDeleteClick = function onDeleteClick2(event) {
      emit("delete", event);
    };
    useTooltip(elRef, props);
    var icon = computed(function() {
      return useIcon(props);
    });
    var mediaClasses = computed(function() {
      return classNames("chip-media", props.mediaTextColor && "text-color-" + props.mediaTextColor, props.mediaBgColor && "bg-color-" + props.mediaBgColor);
    });
    var classes = computed(function() {
      return classNames("chip", {
        "chip-outline": props.outline
      }, colorClasses(props));
    });
    var hasLabel = computed(function() {
      return props.text || slots && (slots.text || slots.default);
    });
    var hasMedia = computed(function() {
      return props.media || icon.value || slots && slots.media;
    });
    return {
      classes,
      icon,
      mediaClasses,
      elRef,
      hasLabel,
      hasMedia,
      onDeleteClick
    };
  }
};

// node_modules/framework7-vue/esm/components/col.js
function _extends26() {
  _extends26 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends26.apply(this, arguments);
}
var _hoisted_18 = {
  key: 0,
  class: "resize-handler"
};
function render27(_ctx, _cache) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    ref: "elRef",
    class: _ctx.classes
  }, {
    default: withCtx(function() {
      return [renderSlot(_ctx.$slots, "default"), _ctx.resizable && _ctx.resizableHandler ? (openBlock(), createBlock("span", _hoisted_18)) : createCommentVNode("", true)];
    }),
    _: 3
  }, 8, ["class"]);
}
var col_default = {
  name: "f7-col",
  render: render27,
  props: _extends26({
    tag: {
      type: String,
      default: "div"
    },
    width: {
      type: [Number, String],
      default: "auto"
    },
    xsmall: {
      type: [Number, String]
    },
    small: {
      type: [Number, String]
    },
    medium: {
      type: [Number, String]
    },
    large: {
      type: [Number, String]
    },
    xlarge: {
      type: [Number, String]
    },
    resizable: Boolean,
    resizableFixed: Boolean,
    resizableAbsolute: Boolean,
    resizableHandler: {
      type: Boolean,
      default: true
    }
  }, colorProps),
  emits: ["grid:resize"],
  setup: function setup27(props, _ref) {
    var emit = _ref.emit;
    var elRef = ref(null);
    var onResize = function onResize2(el) {
      if (el === elRef.value) {
        emit("grid:resize");
      }
    };
    onMounted(function() {
      f7ready(function() {
        f7.on("gridResize", onResize);
      });
    });
    onBeforeUnmount(function() {
      f7.off("gridResize", onResize);
    });
    var classes = computed(function() {
      var _classNames;
      return classNames((_classNames = {
        col: props.width === "auto"
      }, _classNames["col-" + props.width] = props.width !== "auto", _classNames["xsmall-" + props.xsmall] = props.xsmall, _classNames["small-" + props.small] = props.small, _classNames["medium-" + props.medium] = props.medium, _classNames["large-" + props.large] = props.large, _classNames["xlarge-" + props.xlarge] = props.xlarge, _classNames.resizable = props.resizable, _classNames["resizable-fixed"] = props.resizableFixed, _classNames["resizable-absolute"] = props.resizableAbsolute, _classNames), colorClasses(props));
    });
    return {
      classes,
      elRef
    };
  }
};

// node_modules/framework7-vue/esm/components/fab-backdrop.js
function _extends27() {
  _extends27 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends27.apply(this, arguments);
}
function render28(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var fab_backdrop_default = {
  name: "f7-fab-backdrop",
  render: render28,
  props: _extends27({}, colorProps),
  setup: function setup28(props) {
    var classes = computed(function() {
      return classNames("fab-backdrop", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/fab-button.js
function _extends28() {
  _extends28 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends28.apply(this, arguments);
}
var _hoisted_19 = {
  key: 0,
  class: "fab-label"
};
function render29(_ctx, _cache) {
  return openBlock(), createBlock("a", {
    ref: "elRef",
    class: _ctx.classes,
    target: _ctx.target,
    onClick: _cache[1] || (_cache[1] = function() {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }, [renderSlot(_ctx.$slots, "default"), _ctx.label ? (openBlock(), createBlock("span", _hoisted_19, toDisplayString(_ctx.label), 1)) : createCommentVNode("", true)], 10, ["target"]);
}
var fab_button_default = {
  name: "f7-fab-button",
  render: render29,
  props: _extends28({
    fabClose: Boolean,
    label: String,
    target: String,
    tooltip: String,
    tooltipTrigger: String
  }, colorProps),
  emits: ["click"],
  setup: function setup29(props, _ref) {
    var emit = _ref.emit;
    var elRef = ref(null);
    var onClick = function onClick2(e) {
      emit("click", e);
    };
    useTooltip(elRef, props);
    var classes = computed(function() {
      return classNames({
        "fab-close": props.fabClose,
        "fab-label-button": props.label
      }, colorClasses(props));
    });
    return {
      classes,
      onClick,
      elRef
    };
  }
};

// node_modules/framework7-vue/esm/components/fab-buttons.js
function _extends29() {
  _extends29 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends29.apply(this, arguments);
}
function render30(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var fab_buttons_default = {
  name: "f7-fab-buttons",
  render: render30,
  props: _extends29({
    position: {
      type: String,
      default: "top"
    }
  }, colorProps),
  setup: function setup30(props) {
    var classes = computed(function() {
      return classNames("fab-buttons", "fab-buttons-" + props.position, colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/fab.js
function _extends30() {
  _extends30 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends30.apply(this, arguments);
}
var fab_default = {
  name: "f7-fab",
  props: _extends30({
    morphTo: String,
    href: [Boolean, String],
    target: String,
    text: String,
    position: {
      type: String,
      default: "right-bottom"
    },
    tooltip: String,
    tooltipTrigger: String
  }, colorProps),
  emits: ["click"],
  setup: function setup31(props, _ref) {
    var emit = _ref.emit, slots = _ref.slots;
    var elRef = ref(null);
    var onClick = function onClick2(e) {
      emit("click", e);
    };
    useTooltip(elRef, props);
    var hrefComputed = computed(function() {
      var href = props.href;
      if (href === true)
        href = "#";
      if (href === false)
        href = void 0;
      return href;
    });
    return function() {
      var linkChildren = [];
      var rootChildren = [];
      var textEl;
      var linkEl;
      var linkSlots = slots.link, defaultSlots = slots.default, rootSlots = slots.root, textSlots = slots.text;
      if (defaultSlots) {
        defaultSlots().forEach(function(vnode) {
          if (typeof vnode === "undefined")
            return;
          var tag = vnode.type && vnode.type.name ? vnode.type.name : vnode.type;
          if (tag === "FabButtons" || tag === "f7-fab-buttons")
            rootChildren.push(vnode);
          else
            linkChildren.push(vnode);
        });
      }
      if (props.text || textSlots) {
        textEl = h("div", {
          class: "fab-text"
        }, [props.text, textSlots && textSlots()]);
      }
      if (linkChildren.length || linkSlots || textEl) {
        linkEl = h("a", {
          target: props.target,
          href: hrefComputed.value,
          onClick
        }, [linkChildren, textEl, linkSlots && linkSlots()]);
      }
      var classes = classNames("fab", "fab-" + props.position, {
        "fab-morph": props.morphTo,
        "fab-extended": typeof textEl !== "undefined"
      }, colorClasses(props));
      return h("div", {
        class: classes,
        "data-morph-to": props.morphTo,
        ref: elRef
      }, [linkEl, rootChildren, rootSlots && rootSlots()]);
    };
  }
};

// node_modules/framework7-vue/esm/components/gauge.js
var _hoisted_110 = {
  class: "gauge"
};
function render31(_ctx, _cache) {
  return openBlock(), createBlock("div", _hoisted_110, [(openBlock(), createBlock("svg", {
    class: "gauge-svg",
    width: _ctx.size + "px",
    height: (_ctx.semiCircle ? _ctx.size / 2 : _ctx.size) + "px",
    viewBox: "0 0 " + _ctx.size + " " + (_ctx.semiCircle ? _ctx.size / 2 : _ctx.size)
  }, [_ctx.semiCircle ? (openBlock(), createBlock("path", {
    key: 0,
    class: "gauge-back-semi",
    d: "M" + (_ctx.size - _ctx.borderWidth / 2) + "," + _ctx.size / 2 + " a1,1 0 0,0 -" + (_ctx.size - _ctx.borderWidth) + ",0",
    stroke: _ctx.borderBgColor,
    "stroke-width": _ctx.borderWidth,
    fill: _ctx.bgColor || "none"
  }, null, 8, ["d", "stroke", "stroke-width", "fill"])) : createCommentVNode("", true), _ctx.semiCircle ? (openBlock(), createBlock("path", {
    key: 1,
    class: "gauge-front-semi",
    d: "M" + (_ctx.size - _ctx.borderWidth / 2) + "," + _ctx.size / 2 + " a1,1 0 0,0 -" + (_ctx.size - _ctx.borderWidth) + ",0",
    stroke: _ctx.borderColor,
    "stroke-width": _ctx.borderWidth,
    "stroke-dasharray": _ctx.length / 2,
    "stroke-dashoffset": _ctx.length / 2 * (1 + _ctx.progress),
    fill: _ctx.borderBgColor ? "none" : _ctx.bgColor || "none"
  }, null, 8, ["d", "stroke", "stroke-width", "stroke-dasharray", "stroke-dashoffset", "fill"])) : createCommentVNode("", true), !_ctx.semiCircle && _ctx.borderBgColor ? (openBlock(), createBlock("circle", {
    key: 2,
    class: "gauge-back-circle",
    stroke: _ctx.borderBgColor,
    "stroke-width": _ctx.borderWidth,
    fill: _ctx.bgColor || "none",
    cx: _ctx.size / 2,
    cy: _ctx.size / 2,
    r: _ctx.radius
  }, null, 8, ["stroke", "stroke-width", "fill", "cx", "cy", "r"])) : createCommentVNode("", true), !_ctx.semiCircle ? (openBlock(), createBlock("circle", {
    key: 3,
    class: "gauge-front-circle",
    transform: "rotate(-90 " + _ctx.size / 2 + " " + _ctx.size / 2 + ")",
    stroke: _ctx.borderColor,
    "stroke-width": _ctx.borderWidth,
    "stroke-dasharray": _ctx.length,
    "stroke-dashoffset": _ctx.length * (1 - _ctx.progress),
    fill: _ctx.borderBgColor ? "none" : _ctx.bgColor || "none",
    cx: _ctx.size / 2,
    cy: _ctx.size / 2,
    r: _ctx.radius
  }, null, 8, ["transform", "stroke", "stroke-width", "stroke-dasharray", "stroke-dashoffset", "fill", "cx", "cy", "r"])) : createCommentVNode("", true), _ctx.valueText ? (openBlock(), createBlock("text", {
    key: 4,
    class: "gauge-value-text",
    x: "50%",
    y: _ctx.semiCircle ? "100%" : "50%",
    "font-weight": _ctx.valueFontWeight,
    "font-size": _ctx.valueFontSize,
    fill: _ctx.valueTextColor,
    dy: _ctx.semiCircle ? _ctx.labelText ? -_ctx.labelFontSize - 15 : -5 : 0,
    "text-anchor": "middle",
    "dominant-baseline": !_ctx.semiCircle ? "middle" : null
  }, toDisplayString(_ctx.valueText), 9, ["y", "font-weight", "font-size", "fill", "dy", "dominant-baseline"])) : createCommentVNode("", true), _ctx.labelText ? (openBlock(), createBlock("text", {
    key: 5,
    class: "gauge-label-text",
    x: "50%",
    y: _ctx.semiCircle ? "100%" : "50%",
    "font-weight": _ctx.labelFontWeight,
    "font-size": _ctx.labelFontSize,
    fill: _ctx.labelTextColor,
    dy: _ctx.semiCircle ? -5 : _ctx.valueText ? _ctx.valueFontSize / 2 + 10 : 0,
    "text-anchor": "middle",
    "dominant-baseline": !_ctx.semiCircle ? "middle" : null
  }, toDisplayString(_ctx.labelText), 9, ["y", "font-weight", "font-size", "fill", "dy", "dominant-baseline"])) : createCommentVNode("", true)], 8, ["width", "height", "viewBox"]))]);
}
var gauge_default = {
  name: "f7-gauge",
  render: render31,
  props: {
    type: {
      type: String,
      default: "circle"
    },
    value: {
      type: [Number, String],
      default: 0
    },
    size: {
      type: [Number, String],
      default: 200
    },
    bgColor: {
      type: String,
      default: "transparent"
    },
    borderBgColor: {
      type: String,
      default: "#eeeeee"
    },
    borderColor: {
      type: String,
      default: "#000000"
    },
    borderWidth: {
      type: [Number, String],
      default: 10
    },
    valueText: [Number, String],
    valueTextColor: {
      type: String,
      default: "#000000"
    },
    valueFontSize: {
      type: [Number, String],
      default: 31
    },
    valueFontWeight: {
      type: [Number, String],
      default: 500
    },
    labelText: String,
    labelTextColor: {
      type: String,
      default: "#888888"
    },
    labelFontSize: {
      type: [Number, String],
      default: 14
    },
    labelFontWeight: {
      type: [Number, String],
      default: 400
    }
  },
  setup: function setup32(props) {
    var semiCircle = computed(function() {
      return props.type === "semicircle";
    });
    var radius = computed(function() {
      return props.size / 2 - props.borderWidth / 2;
    });
    var length = computed(function() {
      return 2 * Math.PI * radius.value;
    });
    var progress = computed(function() {
      return Math.max(Math.min(props.value, 1), 0);
    });
    return {
      semiCircle,
      radius,
      length,
      progress
    };
  }
};

// node_modules/framework7-vue/esm/components/toggle.js
function _extends31() {
  _extends31 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends31.apply(this, arguments);
}
var _hoisted_111 = createVNode("span", {
  class: "toggle-icon"
}, null, -1);
function render32(_ctx, _cache) {
  return openBlock(), createBlock("label", {
    ref: "elRef",
    class: _ctx.classes
  }, [createVNode("input", {
    type: "checkbox",
    name: _ctx.name,
    disabled: _ctx.disabled,
    readonly: _ctx.readonly,
    checked: _ctx.checked,
    value: _ctx.value,
    onChange: _cache[1] || (_cache[1] = function() {
      return _ctx.onChange && _ctx.onChange.apply(_ctx, arguments);
    })
  }, null, 40, ["name", "disabled", "readonly", "checked", "value"]), _hoisted_111], 2);
}
var toggle_default = {
  name: "f7-toggle",
  render: render32,
  props: _extends31({
    init: {
      type: Boolean,
      default: true
    },
    checked: Boolean,
    disabled: Boolean,
    readonly: Boolean,
    name: String,
    value: [String, Number, Array],
    tooltip: String,
    tooltipTrigger: String
  }, colorProps),
  emits: ["change", "toggle:change", "update:checked"],
  setup: function setup33(props, _ref) {
    var emit = _ref.emit;
    var f7Toggle = null;
    var elRef = ref(null);
    useTooltip(elRef, props);
    var onChange = function onChange2(event) {
      emit("change", event);
    };
    watch(function() {
      return props.checked;
    }, function(newValue) {
      if (!f7Toggle)
        return;
      f7Toggle.checked = newValue;
    });
    onMounted(function() {
      f7ready(function() {
        if (!props.init || !elRef.value)
          return;
        f7Toggle = f7.toggle.create({
          el: elRef.value,
          on: {
            change: function change(toggleInstance) {
              emit("toggle:change", toggleInstance.checked);
              emit("update:checked", toggleInstance.checked);
            }
          }
        });
      });
    });
    onBeforeUnmount(function() {
      if (f7Toggle && f7Toggle.destroy && f7Toggle.$el) {
        f7Toggle.destroy();
      }
      f7Toggle = null;
    });
    var classes = computed(function() {
      return classNames("toggle", {
        disabled: props.disabled
      }, colorClasses(props));
    });
    return {
      classes,
      elRef,
      f7Toggle,
      onChange
    };
  }
};

// node_modules/framework7-vue/esm/components/range.js
function _extends32() {
  _extends32 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends32.apply(this, arguments);
}
function render33(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [_ctx.input ? (openBlock(), createBlock("input", {
    key: 0,
    id: "inputId",
    type: "range",
    name: _ctx.name
  }, null, 8, ["name"])) : createCommentVNode("", true), renderSlot(_ctx.$slots, "default")], 2);
}
var range_default = {
  name: "f7-range",
  render: render33,
  props: _extends32({
    init: {
      type: Boolean,
      default: true
    },
    value: {
      type: [Number, Array, String],
      default: 0
    },
    min: {
      type: [Number, String],
      default: 0
    },
    max: {
      type: [Number, String],
      default: 100
    },
    step: {
      type: [Number, String],
      default: 1
    },
    label: {
      type: Boolean,
      default: false
    },
    dual: {
      type: Boolean,
      default: false
    },
    vertical: {
      type: Boolean,
      default: false
    },
    verticalReversed: {
      type: Boolean,
      default: false
    },
    draggableBar: {
      type: Boolean,
      default: true
    },
    formatLabel: Function,
    scale: {
      type: Boolean,
      default: false
    },
    scaleSteps: {
      type: Number,
      default: 5
    },
    scaleSubSteps: {
      type: Number,
      default: 0
    },
    formatScaleLabel: Function,
    limitKnobPosition: {
      type: Boolean,
      default: void 0
    },
    name: String,
    input: Boolean,
    inputId: String,
    disabled: Boolean
  }, colorProps),
  emits: ["range:change", "range:changed", "rangeChange", "rangeChanged", "update:value"],
  setup: function setup34(props, _ref) {
    var emit = _ref.emit;
    var f7Range = null;
    var elRef = ref(null);
    watch(function() {
      return props.value;
    }, function(newValue) {
      if (!f7Range)
        return;
      var rangeValue = f7Range.value;
      if (Array.isArray(newValue) && Array.isArray(rangeValue)) {
        if (rangeValue[0] !== newValue[0] || rangeValue[1] !== newValue[1]) {
          f7Range.setValue(newValue);
        }
      } else {
        f7Range.setValue(newValue);
      }
    });
    onMounted(function() {
      f7ready(function() {
        if (!props.init || !elRef.value)
          return;
        f7Range = f7.range.create(noUndefinedProps(_extends32({
          el: elRef.value
        }, props, {
          on: {
            change: function change(range, val) {
              emit("range:change", val);
              emit("rangeChange", val);
            },
            changed: function changed(range, val) {
              emit("range:changed", val);
              emit("rangeChanged", val);
              emit("update:value", val);
            }
          }
        })));
      });
    });
    onBeforeUnmount(function() {
      if (f7Range && f7Range.destroy)
        f7Range.destroy();
      f7Range = null;
    });
    var classes = computed(function() {
      return classNames("range-slider", {
        "range-slider-horizontal": !props.vertical,
        "range-slider-vertical": props.vertical,
        "range-slider-vertical-reversed": props.vertical && props.verticalReversed,
        disabled: props.disabled
      }, colorClasses(props));
    });
    return {
      elRef,
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/text-editor.js
function _extends33() {
  _extends33 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends33.apply(this, arguments);
}
var _hoisted_112 = {
  class: "text-editor-content",
  contenteditable: ""
};
function render34(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "root-start"), createVNode("div", _hoisted_112, [renderSlot(_ctx.$slots, "default")]), renderSlot(_ctx.$slots, "root-end"), renderSlot(_ctx.$slots, "root")], 2);
}
var text_editor_default = {
  name: "f7-text-editor",
  render: render34,
  props: _extends33({
    mode: {
      type: String,
      default: void 0
    },
    value: {
      type: String,
      default: void 0
    },
    buttons: Array,
    customButtons: Object,
    dividers: {
      type: Boolean,
      default: void 0
    },
    imageUrlText: {
      type: String,
      default: void 0
    },
    linkUrlText: {
      type: String,
      default: void 0
    },
    placeholder: {
      type: String,
      default: void 0
    },
    clearFormattingOnPaste: {
      type: Boolean,
      default: void 0
    },
    resizable: {
      type: Boolean,
      default: false
    }
  }, colorProps),
  emits: ["texteditor:change", "texteditor:input", "texteditor:focus", "texteditor:blur", "texteditor:buttonclick", "texteditor:keyboardopen", "texteditor:keyboardclose", "texteditor:popoveropen", "texteditor:popoverclose", "texteditorChange", "texteditorInput", "texteditorFocus", "texteditorBlur"],
  setup: function setup35(props, _ref) {
    var emit = _ref.emit;
    var f7TextEditor = null;
    var elRef = ref(null);
    var onChange = function onChange2(editor, editorValue) {
      emit("texteditor:change", editorValue);
      emit("texteditorChange", editorValue);
    };
    var onInput = function onInput2(editor, editorValue) {
      emit("texteditor:input", editorValue);
      emit("texteditorInput", editorValue);
    };
    var onFocus = function onFocus2() {
      emit("texteditor:focus");
      emit("texteditorFocus");
    };
    var onBlur = function onBlur2() {
      emit("texteditor:blur");
      emit("texteditorBlur");
    };
    var onButtonClick = function onButtonClick2(editor, button) {
      emit("texteditor:buttonclick", button);
    };
    var onKeyboardOpen = function onKeyboardOpen2() {
      emit("texteditor:keyboardopen");
    };
    var onKeyboardClose = function onKeyboardClose2() {
      emit("texteditor:keyboardclose");
    };
    var onPopoverOpen = function onPopoverOpen2() {
      emit("texteditor:popoveropen");
    };
    var onPopoverClose = function onPopoverClose2() {
      emit("texteditor:popoverclose");
    };
    watch(function() {
      return props.value;
    }, function(newValue) {
      if (f7TextEditor) {
        f7TextEditor.setValue(newValue);
      }
    });
    onMounted(function() {
      var params = noUndefinedProps({
        el: elRef.value,
        mode: props.mode,
        value: props.value,
        buttons: props.buttons,
        customButtons: props.customButtons,
        dividers: props.dividers,
        imageUrlText: props.imageUrlText,
        linkUrlText: props.linkUrlText,
        placeholder: props.placeholder,
        clearFormattingOnPaste: props.clearFormattingOnPaste,
        on: {
          change: onChange,
          input: onInput,
          focus: onFocus,
          blur: onBlur,
          buttonClick: onButtonClick,
          keyboardOpen: onKeyboardOpen,
          keyboardClose: onKeyboardClose,
          popoverOpen: onPopoverOpen,
          popoverClose: onPopoverClose
        }
      });
      f7ready(function() {
        f7TextEditor = f7.textEditor.create(params);
      });
    });
    onBeforeUnmount(function() {
      if (f7TextEditor && f7TextEditor.destroy) {
        f7TextEditor.destroy();
      }
      f7TextEditor = null;
    });
    var classes = computed(function() {
      return classNames("text-editor", props.resizable && "text-editor-resizable", colorClasses(props));
    });
    return {
      elRef,
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/input.js
function _extends34() {
  _extends34 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends34.apply(this, arguments);
}
var input_default = {
  name: "f7-input",
  props: _extends34({
    type: String,
    name: String,
    value: {
      type: [String, Number, Array, Date, Object],
      default: void 0
    },
    inputmode: String,
    placeholder: String,
    inputId: [String, Number],
    size: [String, Number],
    accept: [String, Number],
    autocomplete: [String],
    autocorrect: [String],
    autocapitalize: [String],
    spellcheck: [String],
    autofocus: Boolean,
    autosave: String,
    checked: Boolean,
    disabled: Boolean,
    max: [String, Number],
    min: [String, Number],
    step: [String, Number],
    maxlength: [String, Number],
    minlength: [String, Number],
    multiple: Boolean,
    readonly: Boolean,
    required: Boolean,
    inputStyle: [String, Object],
    pattern: String,
    validate: [Boolean, String],
    validateOnBlur: Boolean,
    onValidate: Function,
    tabindex: [String, Number],
    resizable: Boolean,
    clearButton: Boolean,
    noFormStoreData: Boolean,
    noStoreData: Boolean,
    ignoreStoreData: Boolean,
    errorMessage: String,
    errorMessageForce: Boolean,
    info: String,
    outline: Boolean,
    wrap: {
      type: Boolean,
      default: true
    },
    dropdown: {
      type: [String, Boolean],
      default: "auto"
    },
    calendarParams: Object,
    colorPickerParams: Object,
    textEditorParams: Object
  }, colorProps),
  emits: ["input", "focus", "blur", "change", "textarea:resize", "input:notempty", "input:empty", "input:clear", "texteditor:change", "calendar:change", "colorpicker:change", "update:value"],
  setup: function setup36(props, _ref) {
    var emit = _ref.emit, slots = _ref.slots;
    var f7Calendar = null;
    var f7ColorPicker = null;
    var inputInvalid = ref(false);
    var inputFocused = ref(false);
    var elRef = ref(null);
    var inputElRef = ref(null);
    var updateInputOnDidUpdate = false;
    var getDomValue = function getDomValue2() {
      if (!inputElRef.value)
        return void 0;
      return inputElRef.value.value;
    };
    var domValue = ref(getDomValue());
    var inputHasValue = computed(function() {
      if (props.type === "datepicker" && Array.isArray(props.value) && props.value.length === 0) {
        return false;
      }
      return typeof props.value === "undefined" ? domValue.value || domValue.value === 0 : props.value || props.value === 0;
    });
    var validateInput = function validateInput2() {
      if (!f7 || !inputElRef.value)
        return;
      var validity = inputElRef.value.validity;
      if (!validity)
        return;
      if (!validity.valid) {
        if (props.onValidate)
          props.onValidate(false);
        if (inputInvalid.value !== true) {
          inputInvalid.value = true;
        }
      } else {
        if (props.onValidate)
          props.onValidate(true);
        if (inputInvalid.value !== false) {
          inputInvalid.value = false;
        }
      }
    };
    var onTextareaResize = function onTextareaResize2(event) {
      emit("textarea:resize", event);
    };
    var onInputNotEmpty = function onInputNotEmpty2(event) {
      emit("input:notempty", event);
    };
    var onInputEmpty = function onInputEmpty2(event) {
      emit("input:empty", event);
    };
    var onInputClear = function onInputClear2(event) {
      emit("input:clear", event);
    };
    var onInput = function onInput2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      emit.apply(void 0, ["input"].concat(args));
      if (inputElRef.value) {
        domValue.value = inputElRef.value.value;
      }
      if (!(props.validateOnBlur || props.validateOnBlur === "") && (props.validate || props.validate === "") && inputElRef.value) {
        validateInput();
      }
      if (inputElRef.value && props.type !== "texteditor" && props.type !== "colorpicker" && props.type !== "datepicker") {
        emit("update:value", inputElRef.value.value);
      }
    };
    var onFocus = function onFocus2() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      emit.apply(void 0, ["focus"].concat(args));
      inputFocused.value = true;
    };
    var onBlur = function onBlur2() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      emit.apply(void 0, ["blur"].concat(args));
      if ((props.validate || props.validate === "" || props.validateOnBlur || props.validateOnBlur === "") && inputElRef.value) {
        validateInput();
      }
      inputFocused.value = false;
    };
    var onChange = function onChange2() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      emit.apply(void 0, ["change"].concat(args));
      if (props.type === "texteditor") {
        emit("texteditor:change", args[1]);
        emit("update:value", args[1]);
      }
    };
    onMounted(function() {
      var type = props.type, resizable = props.resizable, clearButton = props.clearButton, value = props.value, calendarParams = props.calendarParams, colorPickerParams = props.colorPickerParams, validate = props.validate, validateOnBlur = props.validateOnBlur;
      f7ready(function() {
        if (type === "range" || type === "toggle")
          return;
        if (!inputElRef.value)
          return;
        inputElRef.value.addEventListener("input:notempty", onInputNotEmpty, false);
        if (type === "textarea" && resizable) {
          inputElRef.value.addEventListener("textarea:resize", onTextareaResize, false);
        }
        if (clearButton) {
          inputElRef.value.addEventListener("input:empty", onInputEmpty, false);
          inputElRef.value.addEventListener("input:clear", onInputClear, false);
        }
        if (type === "datepicker") {
          f7Calendar = f7.calendar.create(_extends34({
            inputEl: inputElRef.value,
            value,
            on: {
              change: function change(calendar, calendarValue) {
                emit("calendar:change", calendarValue);
                emit("update:value", calendarValue);
              }
            }
          }, calendarParams || {}));
        }
        if (type === "colorpicker") {
          f7ColorPicker = f7.colorPicker.create(_extends34({
            inputEl: inputElRef.value,
            value,
            on: {
              change: function change(colorPicker, colorPickerValue) {
                emit("colorpicker:change", colorPickerValue);
                emit("update:value", colorPickerValue);
              }
            }
          }, colorPickerParams || {}));
        }
        f7.input.checkEmptyState(inputElRef.value);
        if (!(validateOnBlur || validateOnBlur === "") && (validate || validate === "") && typeof value !== "undefined" && value !== null && value !== "") {
          setTimeout(function() {
            validateInput();
          }, 0);
        }
        if (resizable) {
          f7.input.resizeTextarea(inputElRef.value);
        }
      });
    });
    onBeforeUnmount(function() {
      if (props.type === "range" || props.type === "toggle")
        return;
      if (!inputElRef.value)
        return;
      inputElRef.value.removeEventListener("input:notempty", onInputNotEmpty, false);
      if (props.type === "textarea" && props.resizable) {
        inputElRef.value.removeEventListener("textarea:resize", onTextareaResize, false);
      }
      if (props.clearButton) {
        inputElRef.value.removeEventListener("input:empty", onInputEmpty, false);
        inputElRef.value.removeEventListener("input:clear", onInputClear, false);
      }
      if (f7Calendar && f7Calendar.destroy) {
        f7Calendar.destroy();
        f7Calendar = null;
      }
      if (f7ColorPicker && f7ColorPicker.destroy) {
        f7ColorPicker.destroy();
        f7ColorPicker = null;
      }
    });
    onUpdated(function() {
      if (!f7)
        return;
      if (updateInputOnDidUpdate) {
        if (!inputElRef.value)
          return;
        updateInputOnDidUpdate = false;
        f7.input.checkEmptyState(inputElRef.value);
        if (props.validate && !props.validateOnBlur) {
          validateInput();
        }
        if (props.resizable) {
          f7.input.resizeTextarea(inputElRef.value);
        }
      }
    });
    watch(function() {
      return props.colorPickerParams;
    }, function(newValue) {
      if (!f7 || !f7ColorPicker)
        return;
      extend(f7ColorPicker.params, newValue || {});
    });
    watch(function() {
      return props.calendarParams;
    }, function(newValue) {
      if (!f7 || !f7Calendar)
        return;
      extend(f7Calendar.params, newValue || {});
    });
    watch(function() {
      return props.value;
    }, function(newValue) {
      if (props.type === "range" || props.type === "toggle" || !f7)
        return;
      updateInputOnDidUpdate = true;
      if (f7Calendar) {
        f7Calendar.setValue(newValue);
      }
      if (f7ColorPicker) {
        f7ColorPicker.setValue(newValue);
      }
    });
    var createInput = function createInput2(InputTag, children) {
      var needsValue = props.type !== "file" && props.type !== "datepicker" && props.type !== "colorpicker";
      var needsType = InputTag === "input";
      var inputType = props.type;
      if (inputType === "datepicker" || inputType === "colorpicker") {
        inputType = "text";
      }
      var inputClassName = classNames({
        resizable: inputType === "textarea" && props.resizable,
        "no-store-data": props.noFormStoreData || props.noStoreData || props.ignoreStoreData,
        "input-invalid": props.errorMessage && props.errorMessageForce || inputInvalid.value,
        "input-with-value": inputHasValue.value,
        "input-focused": inputFocused.value
      });
      var inputValue;
      if (needsValue) {
        if (typeof props.value !== "undefined")
          inputValue = props.value;
        else
          inputValue = domValue.value;
      }
      var valueProps = {};
      if (props.type !== "datepicker" && props.type !== "colorpicker") {
        if ("value" in props)
          valueProps.value = inputValue;
      }
      var inputProps = noUndefinedProps({
        name: props.name,
        type: needsType ? inputType : void 0,
        placeholder: props.placeholder,
        inputmode: props.inputmode,
        id: props.inputId,
        size: props.size,
        accept: props.accept,
        autocomplete: props.autocomplete,
        autoCorrect: props.autocorrect,
        autocapitalize: props.autocapitalize,
        spellcheck: props.spellcheck,
        autofocus: props.autofocus,
        autoSave: props.autosave,
        checked: props.checked,
        disabled: props.disabled,
        max: props.max,
        maxlength: props.maxlength,
        min: props.min,
        minlength: props.minlength,
        step: props.step,
        multiple: props.multiple,
        readonly: props.readonly,
        required: props.required,
        pattern: props.pattern,
        validate: typeof props.validate === "string" && props.validate.length ? props.validate : void 0,
        tabindex: props.tabindex
      });
      return h(InputTag, _extends34({
        ref: inputElRef,
        style: props.inputStyle
      }, inputProps, {
        "data-validate": props.validate === true || props.validate === "" || props.validateOnBlur === true || props.validateOnBlur === "" ? true : void 0,
        "data-validate-on-blur": props.validateOnBlur === true || props.validateOnBlur === "" ? true : void 0,
        "data-error-message": props.errorMessageForce ? void 0 : props.errorMessage,
        class: inputClassName,
        onFocus,
        onBlur,
        onInput,
        onChange
      }, valueProps), [children]);
    };
    var wrapClasses = computed(function() {
      return classNames("input", {
        "input-outline": props.outline,
        "input-dropdown": props.dropdown === "auto" ? props.type === "select" : props.dropdown
      }, colorClasses(props));
    });
    return function() {
      var inputEl;
      if (props.type === "select" || props.type === "textarea" || props.type === "file") {
        if (props.type === "select") {
          inputEl = createInput("select", slots.default && slots.default());
        } else if (props.type === "file") {
          inputEl = createInput("input");
        } else {
          inputEl = createInput("textarea");
        }
      } else if (slots.default || !props.type) {
        inputEl = slots.default();
      } else if (props.type === "toggle") {
        inputEl = h(toggle_default, {
          checked: props.checked,
          readonly: props.readonly,
          name: props.name,
          value: props.value,
          disabled: props.disabled,
          id: props.inputId,
          onChange
        });
      } else if (props.type === "range") {
        inputEl = h(range_default, {
          value: props.value,
          disabled: props.disabled,
          min: props.min,
          max: props.max,
          step: props.step,
          name: props.name,
          id: props.inputId,
          input: true,
          onRangeChange: onChange
        });
      } else if (props.type === "texteditor") {
        inputEl = h(text_editor_default, _extends34({
          value: props.value,
          resizable: props.resizable,
          placeholder: props.placeholder,
          onTextEditorFocus: onFocus,
          onTextEditorBlur: onBlur,
          onTextEditorInput: onInput,
          onTextEditorChange: onChange
        }, props.textEditorParams || {}));
      } else {
        inputEl = createInput("input");
      }
      if (!props.wrap)
        return inputEl;
      return h("div", {
        class: wrapClasses.value,
        ref: elRef
      }, [inputEl, (props.errorMessage || slots["error-message"]) && props.errorMessageForce && h("div", {
        class: "input-error-message"
      }, [props.errorMessage, slots["error-message"] && slots["error-message"]()]), props.clearButton && h("span", {
        class: "input-clear-button"
      }), (props.info || slots.info) && h("div", {
        class: "input-info"
      }, [props.info, slots.info && slots.info()])]);
    };
  }
};

// node_modules/framework7-vue/esm/shared/use-smart-select.js
var useSmartSelect = function useSmartSelect2(props, setInstance, getEl) {
  var f7SmartSelect;
  onMounted(function() {
    f7ready(function() {
      if (props.smartSelect) {
        var ssParams = extend({
          el: getEl()
        }, props.smartSelectParams || {});
        f7SmartSelect = f7.smartSelect.create(ssParams);
        setInstance(f7SmartSelect);
      }
    });
  });
  onBeforeUnmount(function() {
    if (f7SmartSelect && f7SmartSelect.destroy) {
      f7SmartSelect.destroy();
    }
    f7SmartSelect = null;
    setInstance(f7SmartSelect);
  });
};

// node_modules/framework7-vue/esm/components/link.js
function _extends35() {
  _extends35 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends35.apply(this, arguments);
}
function render35(_ctx, _cache) {
  var _component_f7_use_icon = resolveComponent("f7-use-icon");
  var _component_f7_badge = resolveComponent("f7-badge");
  return openBlock(), createBlock("a", mergeProps({
    ref: "elRef",
    class: _ctx.classes
  }, _ctx.attrs), [_ctx.icon ? (openBlock(), createBlock(_component_f7_use_icon, {
    key: 0,
    icon: _ctx.icon
  }, null, 8, ["icon"])) : createCommentVNode("", true), _ctx.text ? (openBlock(), createBlock("span", {
    key: 1,
    class: _ctx.isTabbarLabel ? "tabbar-label" : ""
  }, [createTextVNode(toDisplayString(_ctx.text) + " ", 1), _ctx.badge ? (openBlock(), createBlock(_component_f7_badge, {
    key: 0,
    color: _ctx.badgeColor
  }, {
    default: withCtx(function() {
      return [createTextVNode(toDisplayString(_ctx.badge), 1)];
    }),
    _: 1
  }, 8, ["color"])) : createCommentVNode("", true)], 2)) : createCommentVNode("", true), renderSlot(_ctx.$slots, "default")], 16);
}
var link_default = {
  name: "f7-link",
  render: render35,
  components: {
    f7Badge: badge_default,
    f7UseIcon: use_icon_default
  },
  props: _extends35({
    noLinkClass: Boolean,
    text: String,
    tabLink: [Boolean, String],
    tabLinkActive: Boolean,
    tabbarLabel: Boolean,
    iconOnly: Boolean,
    badge: [String, Number],
    badgeColor: [String],
    href: {
      type: [String, Boolean],
      default: "#"
    },
    target: String,
    tooltip: String,
    tooltipTrigger: String,
    smartSelect: Boolean,
    smartSelectParams: Object
  }, iconProps, colorProps, actionsProps, routerProps),
  setup: function setup37(props, _ref) {
    var slots = _ref.slots;
    var elRef = ref(null);
    var f7SmartSelect = null;
    useTooltip(elRef, props);
    useRouteProps(elRef, props);
    useSmartSelect(props, function(instance) {
      f7SmartSelect = instance;
    }, function() {
      return elRef.value;
    });
    var TabbarContext = inject("TabbarContext", {
      value: {}
    });
    var isTabbarLabel = computed(function() {
      return props.tabbarLabel || TabbarContext.value.tabbarHasLabels;
    });
    var attrs = computed(function() {
      var href = props.href, tabLink = props.tabLink, target = props.target;
      var hrefComputed = href;
      if (href === true)
        hrefComputed = "#";
      if (href === false)
        hrefComputed = void 0;
      return _extends35({
        href: hrefComputed,
        target,
        "data-tab": isStringProp(tabLink) && tabLink || void 0
      }, routerAttrs(props), actionsAttrs(props));
    });
    var classes = computed(function() {
      var iconOnly = props.iconOnly, text = props.text, noLinkClass = props.noLinkClass, tabLink = props.tabLink, tabLinkActive = props.tabLinkActive, smartSelect = props.smartSelect;
      var iconOnlyComputed;
      var hasChildren = slots && slots.default;
      if (iconOnly || !text && !hasChildren) {
        iconOnlyComputed = true;
      } else {
        iconOnlyComputed = false;
      }
      return classNames({
        link: !(noLinkClass || isTabbarLabel.value),
        "icon-only": iconOnlyComputed,
        "tab-link": tabLink || tabLink === "",
        "tab-link-active": tabLinkActive,
        "smart-select": smartSelect
      }, colorClasses(props), routerClasses(props), actionsClasses(props));
    });
    var icon = computed(function() {
      return useIcon(props);
    });
    return {
      elRef,
      icon,
      isTabbarLabel,
      attrs,
      classes,
      f7SmartSelect
    };
  }
};

// node_modules/framework7-vue/esm/components/list-button.js
function _extends36() {
  _extends36 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends36.apply(this, arguments);
}
function render36(_ctx, _cache) {
  return openBlock(), createBlock("li", null, [createVNode("a", mergeProps({
    ref: "linkElRef",
    class: _ctx.linkClasses
  }, _ctx.linkAttrs, {
    onClick: _cache[1] || (_cache[1] = function() {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }), [createTextVNode(toDisplayString(_ctx.title) + " " + toDisplayString(_ctx.text) + " ", 1), renderSlot(_ctx.$slots, "default")], 16)]);
}
var list_button_default = {
  name: "f7-list-button",
  render: render36,
  props: _extends36({
    title: [String, Number],
    text: [String, Number],
    tabLink: [Boolean, String],
    tabLinkActive: Boolean,
    link: [Boolean, String],
    href: [Boolean, String],
    target: String,
    tooltip: String,
    tooltipTrigger: String
  }, colorProps, actionsProps, routerProps),
  emits: ["click"],
  setup: function setup38(props, _ref) {
    var emit = _ref.emit;
    var linkElRef = ref(null);
    var onClick = function onClick2(e) {
      emit("click", e);
    };
    useTooltip(linkElRef, props);
    useRouteProps(linkElRef, props);
    var linkAttrs = computed(function() {
      return _extends36({
        href: typeof props.link === "boolean" && typeof props.href === "boolean" ? "#" : props.link || props.href,
        target: props.target,
        "data-tab": isStringProp(props.tabLink) && props.tabLink
      }, routerAttrs(props), actionsAttrs(props));
    });
    var linkClasses = computed(function() {
      return classNames(_extends36({
        "list-button": true,
        "tab-link": props.tabLink || props.tabLink === "",
        "tab-link-active": props.tabLinkActive
      }, colorClasses(props), routerClasses(props), actionsClasses(props)));
    });
    return {
      linkAttrs,
      linkClasses,
      onClick,
      linkElRef
    };
  }
};

// node_modules/framework7-vue/esm/components/list-group.js
function _extends37() {
  _extends37 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends37.apply(this, arguments);
}
function render37(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes,
    "data-sortable-move-elements": typeof _ctx.sortableMoveElements !== "undefined" ? _ctx.sortableMoveElements.toString() : void 0
  }, [createVNode("ul", null, [renderSlot(_ctx.$slots, "default")])], 10, ["data-sortable-move-elements"]);
}
var list_group_default = {
  name: "f7-list-group",
  render: render37,
  props: _extends37({
    mediaList: Boolean,
    simpleList: Boolean,
    sortable: Boolean,
    sortableOpposite: Boolean,
    sortableTapHold: Boolean,
    sortableMoveElements: {
      type: Boolean,
      default: void 0
    }
  }, colorProps),
  setup: function setup39(props) {
    var ListContextParent = inject("ListContext", {
      value: {
        listIsMedia: props.mediaList,
        listIsSimple: props.simpleList,
        listIsSortable: props.sortable,
        listIsSortableOpposite: props.sortableOpposite
      }
    });
    var ListContext = computed(function() {
      return {
        listIsMedia: props.mediaList || ListContextParent.value.listIsMedia,
        listIsSimple: props.simpleList || ListContextParent.value.listIsSimple,
        listIsSortable: props.sortable || ListContextParent.value.listIsSortable,
        listIsSortableOpposite: props.sortableOpposite || ListContextParent.value.listIsSortableOpposite
      };
    });
    provide("ListContext", ListContext);
    var classes = computed(function() {
      return classNames("list-group", {
        "media-list": props.mediaList,
        sortable: props.sortable,
        "sortable-tap-hold": props.sortableTapHold,
        "sortable-opposite": props.sortableOpposite
      }, colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/list-index.js
function _extends38() {
  _extends38 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends38.apply(this, arguments);
}
function render38(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var list_index_default = {
  name: "f7-list-index",
  render: render38,
  props: _extends38({
    init: {
      type: Boolean,
      default: true
    },
    listEl: [String, Object],
    indexes: {
      type: [String, Array],
      default: "auto"
    },
    scrollList: {
      type: Boolean,
      default: true
    },
    label: {
      type: Boolean,
      default: false
    },
    iosItemHeight: {
      type: Number,
      default: 14
    },
    mdItemHeight: {
      type: Number,
      default: 14
    },
    auroraItemHeight: {
      type: Number,
      default: 14
    }
  }, colorProps),
  emits: ["listindex:select"],
  setup: function setup40(props, _ref) {
    var emit = _ref.emit;
    var f7ListIndex = null;
    var elRef = ref(null);
    var update = function update2() {
      if (!f7ListIndex)
        return;
      f7ListIndex.update();
    };
    var scrollListToIndex = function scrollListToIndex2(indexContent) {
      if (!f7ListIndex)
        return;
      f7ListIndex.scrollListToIndex(indexContent);
    };
    watch(function() {
      return props.indexes;
    }, function(newValue) {
      if (!f7ListIndex)
        return;
      f7ListIndex.params.indexes = newValue;
      update();
    });
    onMounted(function() {
      if (!props.init)
        return;
      f7ready(function() {
        f7ListIndex = f7.listIndex.create({
          el: elRef.value,
          listEl: props.listEl,
          indexes: props.indexes,
          iosItemHeight: props.iosItemHeight,
          mdItemHeight: props.mdItemHeight,
          auroraItemHeight: props.auroraItemHeight,
          scrollList: props.scrollList,
          label: props.label,
          on: {
            select: function select(index, itemContent, itemIndex) {
              emit("listindex:select", itemContent, itemIndex);
            }
          }
        });
      });
    });
    onBeforeUnmount(function() {
      if (f7ListIndex && f7ListIndex.destroy) {
        f7ListIndex.destroy();
      }
      f7ListIndex = null;
    });
    var classes = computed(function() {
      return classNames("list-index", colorClasses(props));
    });
    return {
      elRef,
      classes,
      update,
      scrollListToIndex
    };
  }
};

// node_modules/framework7-vue/esm/components/list-input.js
function _extends39() {
  _extends39 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends39.apply(this, arguments);
}
var list_input_default = {
  name: "f7-list-input",
  props: _extends39({
    sortable: {
      type: Boolean,
      default: void 0
    },
    media: String,
    dropdown: {
      type: [String, Boolean],
      default: "auto"
    },
    wrap: {
      type: Boolean,
      default: true
    },
    input: {
      type: Boolean,
      default: true
    },
    type: {
      type: String,
      default: "text"
    },
    name: String,
    value: {
      type: [String, Number, Array, Date, Object],
      default: void 0
    },
    inputmode: String,
    readonly: Boolean,
    required: Boolean,
    disabled: Boolean,
    placeholder: String,
    inputId: [String, Number],
    size: [String, Number],
    accept: [String, Number],
    autocomplete: [String],
    autocorrect: [String],
    autocapitalize: [String],
    spellcheck: [String],
    autofocus: Boolean,
    autosave: String,
    max: [String, Number],
    min: [String, Number],
    step: [String, Number],
    maxlength: [String, Number],
    minlength: [String, Number],
    multiple: Boolean,
    inputStyle: [String, Object],
    pattern: String,
    validate: [Boolean, String],
    validateOnBlur: Boolean,
    onValidate: Function,
    tabindex: [String, Number],
    resizable: Boolean,
    clearButton: Boolean,
    noFormStoreData: Boolean,
    noStoreData: Boolean,
    ignoreStoreData: Boolean,
    errorMessage: String,
    errorMessageForce: Boolean,
    info: String,
    outline: Boolean,
    label: [String, Number],
    inlineLabel: Boolean,
    floatingLabel: Boolean,
    calendarParams: Object,
    colorPickerParams: Object,
    textEditorParams: Object
  }, colorProps),
  emits: ["textarea:resize", "input:notempty", "input:empty", "input:clear", "texteditor:change", "calendar:change", "colorpicker:change", "change", "focus", "blur", "input", "update:value"],
  setup: function setup41(props, _ref) {
    var emit = _ref.emit, slots = _ref.slots;
    var inputInvalid = ref(false);
    var inputFocused = ref(false);
    var ListContext = inject("ListContext", {
      value: {
        listIsMedia: false,
        listIsSortable: false,
        listIsSortableOpposite: false,
        listIsSimple: false
      }
    });
    var f7Calendar = null;
    var f7ColorPicker = null;
    var elRef = ref(null);
    var inputElRef = ref(null);
    var itemContentElRef = ref(null);
    var updateInputOnDidUpdate = false;
    var getDomValue = function getDomValue2() {
      if (!inputElRef.value)
        return void 0;
      return inputElRef.value.value;
    };
    var domValue = ref(getDomValue());
    var inputHasValue = computed(function() {
      if (props.type === "datepicker" && Array.isArray(props.value) && props.value.length === 0) {
        return false;
      }
      return typeof props.value === "undefined" ? domValue.value || domValue.value === 0 : props.value || props.value === 0;
    });
    var validateInput = function validateInput2() {
      if (!f7 || !inputElRef.value)
        return;
      var validity = inputElRef.value.validity;
      if (!validity)
        return;
      if (!validity.valid) {
        if (props.onValidate)
          props.onValidate(false);
        if (inputInvalid.value !== true) {
          inputInvalid.value = true;
        }
      } else {
        if (props.onValidate)
          props.onValidate(true);
        if (inputInvalid.value !== false) {
          inputInvalid.value = false;
        }
      }
    };
    var onTextareaResize = function onTextareaResize2(event) {
      emit("textarea:resize", event);
    };
    var onInputNotEmpty = function onInputNotEmpty2(event) {
      emit("input:notempty", event);
    };
    var onInputEmpty = function onInputEmpty2(event) {
      emit("input:empty", event);
    };
    var onInputClear = function onInputClear2(event) {
      emit("input:clear", event);
    };
    var onInput = function onInput2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      emit.apply(void 0, ["input"].concat(args));
      if (inputElRef.value) {
        domValue.value = inputElRef.value.value;
      }
      if (!(props.validateOnBlur || props.validateOnBlur === "") && (props.validate || props.validate === "") && inputElRef.value) {
        validateInput(inputElRef.value);
      }
      if (inputElRef.value && props.type !== "texteditor" && props.type !== "colorpicker" && props.type !== "datepicker") {
        emit("update:value", inputElRef.value.value);
      }
    };
    var onFocus = function onFocus2() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      emit.apply(void 0, ["focus"].concat(args));
      inputFocused.value = true;
    };
    var onBlur = function onBlur2() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      emit.apply(void 0, ["blur"].concat(args));
      if ((props.validate || props.validate === "" || props.validateOnBlur || props.validateOnBlur === "") && inputElRef.value) {
        validateInput(inputElRef.value);
      }
      inputFocused.value = false;
    };
    var onChange = function onChange2() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      emit.apply(void 0, ["change"].concat(args));
      if (props.type === "texteditor") {
        emit("texteditor:change", args[0]);
        emit("update:value", args[0]);
      }
    };
    onMounted(function() {
      if (!elRef.value && !itemContentElRef.value)
        return;
      f7ready(function() {
        if (!inputElRef.value)
          return;
        inputElRef.value.addEventListener("input:notempty", onInputNotEmpty, false);
        inputElRef.value.addEventListener("textarea:resize", onTextareaResize, false);
        inputElRef.value.addEventListener("input:empty", onInputEmpty, false);
        inputElRef.value.addEventListener("input:clear", onInputClear, false);
        if (props.type === "datepicker") {
          f7Calendar = f7.calendar.create(_extends39({
            inputEl: inputElRef.value,
            value: props.value,
            on: {
              change: function change(calendar, calendarValue) {
                emit("update:value", calendarValue);
                emit("calendar:change", calendarValue);
              }
            }
          }, props.calendarParams || {}));
        }
        if (props.type === "colorpicker") {
          f7ColorPicker = f7.colorPicker.create(_extends39({
            inputEl: inputElRef.value,
            value: props.value,
            on: {
              change: function change(colorPicker, colorPickerValue) {
                emit("update:value", colorPickerValue);
                emit("colorpicker:change", colorPickerValue);
              }
            }
          }, props.colorPickerParams || {}));
        }
        if (!(props.validateOnBlur || props.validateOnBlur === "") && (props.validate || props.validate === "") && typeof props.value !== "undefined" && props.value !== null && props.value !== "") {
          setTimeout(function() {
            validateInput();
          }, 0);
        }
        if (props.type === "textarea" && props.resizable) {
          f7.input.resizeTextarea(inputElRef.value);
        }
      });
    });
    onBeforeUnmount(function() {
      if (inputElRef.value) {
        inputElRef.value.removeEventListener("input:notempty", onInputNotEmpty, false);
        inputElRef.value.removeEventListener("textarea:resize", onTextareaResize, false);
        inputElRef.value.removeEventListener("input:empty", onInputEmpty, false);
        inputElRef.value.removeEventListener("input:clear", onInputClear, false);
      }
      if (f7Calendar && f7Calendar.destroy) {
        f7Calendar.destroy();
        f7Calendar = null;
      }
      if (f7ColorPicker && f7ColorPicker.destroy) {
        f7ColorPicker.destroy();
        f7ColorPicker = null;
      }
    });
    onUpdated(function() {
      if (!f7)
        return;
      if (updateInputOnDidUpdate) {
        if (!inputElRef.value)
          return;
        updateInputOnDidUpdate = false;
        if (props.validate && !props.validateOnBlur) {
          validateInput();
        }
        if (props.type === "textarea" && props.resizable) {
          f7.input.resizeTextarea(inputElRef.value);
        }
      }
    });
    watch(function() {
      return props.colorPickerParams;
    }, function(newValue) {
      if (!f7 || !f7ColorPicker)
        return;
      extend(f7ColorPicker.params, newValue || {});
    });
    watch(function() {
      return props.calendarParams;
    }, function(newValue) {
      if (!f7 || !f7Calendar)
        return;
      extend(f7Calendar.params, newValue || {});
    });
    watch(function() {
      return props.value;
    }, function(newValue) {
      if (!f7)
        return;
      updateInputOnDidUpdate = true;
      if (f7Calendar) {
        f7Calendar.setValue(newValue);
      }
      if (f7ColorPicker) {
        f7ColorPicker.setValue(newValue);
      }
    });
    var isSortableComputed = computed(function() {
      return props.sortable || ListContext.value.listIsSortable || false;
    });
    var createInput = function createInput2(InputTag, children) {
      var needsValue = props.type !== "file" && props.type !== "datepicker" && props.type !== "colorpicker";
      var needsType = InputTag === "input";
      var inputType = props.type;
      if (inputType === "datepicker" || inputType === "colorpicker") {
        inputType = "text";
      }
      var inputClassName = classNames({
        resizable: inputType === "textarea" && props.resizable,
        "no-store-data": props.noFormStoreData || props.noStoreData || props.ignoreStoreData,
        "input-invalid": props.errorMessage && props.errorMessageForce || inputInvalid.value,
        "input-with-value": inputHasValue.value,
        "input-focused": inputFocused.value
      });
      var inputValue;
      if (needsValue) {
        if (typeof props.value !== "undefined")
          inputValue = props.value;
        else
          inputValue = domValue.value;
      }
      var valueProps = {};
      if (props.type !== "datepicker" && props.type !== "colorpicker") {
        if ("value" in props)
          valueProps.value = inputValue;
      }
      var inputProps = noUndefinedProps({
        name: props.name,
        type: needsType ? inputType : void 0,
        placeholder: props.placeholder,
        inputmode: props.inputmode,
        id: props.inputId,
        size: props.size,
        accept: props.accept,
        autocomplete: props.autocomplete,
        autocorrect: props.autocorrect,
        autocapitalize: props.autocapitalize,
        spellcheck: props.spellcheck,
        autofocus: props.autofocus,
        autosave: props.autosave,
        disabled: props.disabled,
        max: props.max,
        maxlength: props.maxlength,
        min: props.min,
        minlength: props.minlength,
        step: props.step,
        multiple: props.multiple,
        readonly: props.readonly,
        required: props.required,
        pattern: props.pattern,
        validate: typeof props.validate === "string" && props.validate.length ? props.validate : void 0,
        tabindex: props.tabindex
      });
      return h(InputTag, _extends39({
        ref: inputElRef,
        style: props.inputStyle
      }, inputProps, {
        "data-validate": props.validate === true || props.validate === "" || props.validateOnBlur === true || props.validateOnBlur === "" ? true : void 0,
        "data-validate-on-blur": props.validateOnBlur === true || props.validateOnBlur === "" ? true : void 0,
        "data-error-message": props.errorMessageForce ? void 0 : props.errorMessage,
        class: inputClassName,
        onFocus,
        onBlur,
        onInput,
        onChange
      }, valueProps), [children]);
    };
    return function() {
      var inputEl;
      if (props.input) {
        if (props.type === "select" || props.type === "textarea" || props.type === "file") {
          if (props.type === "select") {
            inputEl = createInput("select", slots.default && slots.default());
          } else if (props.type === "file") {
            inputEl = createInput("input");
          } else {
            inputEl = createInput("textarea");
          }
        } else if (props.type === "texteditor") {
          inputEl = h(text_editor_default, _extends39({
            value: props.value,
            resizable: props.resizable,
            placeholder: props.placeholder,
            onTextEditorFocus: onFocus,
            onTextEditorBlur: onBlur,
            onTextEditorInput: onInput,
            onTextEditorChange: onChange
          }, props.textEditorParams || {}));
        } else {
          inputEl = createInput("input");
        }
      }
      var hasErrorMessage = !!props.errorMessage || slots["error-message"];
      var ItemContent = h("div", {
        ref: itemContentElRef,
        class: classNames("item-content item-input", !props.wrap && {
          disabled: props.disabled
        }, !props.wrap && colorClasses(props), {
          "inline-label": props.inlineLabel,
          "item-input-outline": props.outline,
          "item-input-focused": inputFocused.value,
          "item-input-with-info": !!props.info || slots.info,
          "item-input-with-value": inputHasValue.value,
          "item-input-with-error-message": hasErrorMessage && props.errorMessageForce || inputInvalid.value,
          "item-input-invalid": hasErrorMessage && props.errorMessageForce || inputInvalid.value
        })
      }, [slots["content-start"] && slots["content-start"](), (props.media || slots.media) && h("div", {
        class: "item-media"
      }, [props.media && h("img", {
        src: props.media
      }), slots.media && slots.media()]), h("div", {
        class: "item-inner"
      }, [slots["inner-start"] && slots["inner-start"](), (props.label || slots.label) && h("div", {
        class: classNames("item-title item-label", {
          "item-floating-label": props.floatingLabel
        })
      }, [props.label, slots.label && slots.label()]), h("div", {
        class: classNames("item-input-wrap", {
          "input-dropdown": props.dropdown === "auto" ? props.type === "select" : props.dropdown
        })
      }, [inputEl, slots.input && slots.input(), hasErrorMessage && props.errorMessageForce && h("div", {
        class: "item-input-error-message"
      }, [props.errorMessage, slots["error-message"] && slots["error-message"]()]), props.clearButton && h("span", {
        class: "input-clear-button"
      }), (props.info || slots.info) && h("div", {
        class: "item-input-info"
      }, [props.info, slots.info && slots.info()])]), slots.inner && slots.inner(), slots["inner-end"] && slots["inner-end"]()]), slots.content && slots.content(), slots["content-end"] && slots["content-end"]()]);
      if (!props.wrap)
        return ItemContent;
      return h("li", {
        ref: elRef,
        class: classNames({
          disabled: props.disabled
        }, colorClasses(props))
      }, [slots["root-start"] && slots["root-start"](), ItemContent, isSortableComputed.value && h("div", {
        class: "sortable-handler"
      }), slots.root && slots.root(), slots["root-end"] && slots["root-end"]()]);
    };
  }
};

// node_modules/framework7-vue/esm/components/list-item-cell.js
function _extends40() {
  _extends40 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends40.apply(this, arguments);
}
function render39(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var list_item_cell_default = {
  name: "f7-list-item-cell",
  render: render39,
  props: _extends40({}, colorProps),
  setup: function setup42(props) {
    var classes = computed(function() {
      return classNames("item-cell", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/list-item-row.js
function _extends41() {
  _extends41 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends41.apply(this, arguments);
}
function render40(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var list_item_row_default = {
  name: "f7-list-item-row",
  render: render40,
  props: _extends41({}, colorProps),
  setup: function setup43(props) {
    var classes = computed(function() {
      return classNames("item-row", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/list-item.js
function _extends42() {
  _extends42 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends42.apply(this, arguments);
}
var ListItemContent = function ListItemContent2(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, props = _ref.props, slots = _ref.slots, inputElRef = _ref.inputElRef, onChange = _ref.onChange, onClick = _ref.onClick, isMediaComputed = _ref.isMediaComputed, isSortableComputed = _ref.isSortableComputed, isSortableOppositeComputed = _ref.isSortableOppositeComputed, itemContentClasses = _ref.itemContentClasses;
  var radio = props.radio, checkbox = props.checkbox, value = props.value, name = props.name, readonly = props.readonly, disabled = props.disabled, checked = props.checked, required = props.required, media = props.media, header = props.header, footer = props.footer, title = props.title, subtitle = props.subtitle, text = props.text, after = props.after, badge = props.badge, badgeColor = props.badgeColor, swipeout = props.swipeout, sortable = props.sortable, accordionItem = props.accordionItem;
  var titleEl;
  var afterWrapEl;
  var afterEl;
  var badgeEl;
  var innerEl;
  var titleRowEl;
  var subtitleEl;
  var textEl;
  var mediaEl;
  var inputEl;
  var inputIconEl;
  var headerEl;
  var footerEl;
  if (radio || checkbox) {
    inputEl = h("input", {
      ref: inputElRef,
      value,
      name,
      checked,
      readonly,
      disabled,
      required,
      type: radio ? "radio" : "checkbox",
      onChange
    });
    inputIconEl = h("i", {
      class: "icon icon-" + (radio ? "radio" : "checkbox")
    });
  }
  if (media || slots.media) {
    var mediaImgEl;
    if (media) {
      mediaImgEl = h("img", {
        src: media
      });
    }
    mediaEl = h("div", {
      class: "item-media"
    }, [mediaImgEl, slots.media && slots.media()]);
  }
  if (header || slots.header) {
    headerEl = h("div", {
      class: "item-header"
    }, [header, slots.header && slots.header()]);
  }
  if (footer || slots.footer) {
    footerEl = h("div", {
      class: "item-footer"
    }, [footer, slots.footer && slots.footer()]);
  }
  if (title || slots.title || !isMediaComputed.value && headerEl || !isMediaComputed.value && footerEl) {
    titleEl = h("div", {
      class: "item-title"
    }, [!isMediaComputed.value && headerEl, title, slots.title && slots.title(), !isMediaComputed.value && footerEl]);
  }
  if (subtitle || slots.subtitle) {
    subtitleEl = h("div", {
      class: "item-subtitle"
    }, [subtitle, slots.subtitle && slots.subtitle()]);
  }
  if (text || slots.text) {
    textEl = h("div", {
      class: "item-text"
    }, [text, slots.text && slots.text()]);
  }
  if (after || badge || slots.after) {
    if (after) {
      afterEl = h("span", [after]);
    }
    if (badge) {
      badgeEl = h(badge_default, {
        color: badgeColor
      }, function() {
        return badge;
      });
    }
    afterWrapEl = h("div", {
      class: "item-after"
    }, [slots["after-start"] && slots["after-start"](), afterEl, badgeEl, slots.after && slots.after(), slots["after-end"] && slots["after-end"]()]);
  }
  if (isMediaComputed.value) {
    titleRowEl = h("div", {
      class: "item-title-row"
    }, [slots["before-title"] && slots["before-title"](), titleEl, slots["after-title"] && slots["after-title"](), afterWrapEl]);
    innerEl = h("div", {
      class: "item-inner"
    }, [slots["inner-start"] && slots["inner-start"], headerEl, titleRowEl, subtitleEl, textEl, swipeout || accordionItem ? null : slots.default && slots.default(), slots.inner && slots.inner(), footerEl, slots["inner-end"] && slots["inner-end"]]);
  } else {
    innerEl = h("div", {
      class: "item-inner"
    }, [slots["inner-start"] && slots["inner-start"](), slots["before-title"] && slots["before-title"](), titleEl, slots["after-title"] && slots["after-title"](), afterWrapEl, swipeout || accordionItem ? null : slots.default && slots.default(), slots.inner && slots.inner(), slots["inner-end"] && slots["inner-end"]()]);
  }
  var ItemContentTag = checkbox || radio ? "label" : "div";
  return h(ItemContentTag, {
    class: itemContentClasses.value,
    onClick
  }, [isSortableComputed.value && sortable !== false && isSortableOppositeComputed.value && h("div", {
    class: "sortable-handler"
  }), slots["content-start"] && slots["content-start"](), inputEl, inputIconEl, mediaEl, innerEl, slots.content && slots.content(), slots["content-end"] && slots["content-end"]()]);
};
var list_item_default = {
  name: "f7-list-item",
  props: _extends42({
    title: [String, Number],
    text: [String, Number],
    media: String,
    subtitle: [String, Number],
    header: [String, Number],
    footer: [String, Number],
    tooltip: String,
    tooltipTrigger: String,
    link: [Boolean, String],
    target: String,
    tabLink: [Boolean, String],
    tabLinkActive: Boolean,
    selected: Boolean,
    after: [String, Number],
    badge: [String, Number],
    badgeColor: String,
    mediaItem: Boolean,
    mediaList: Boolean,
    divider: Boolean,
    groupTitle: Boolean,
    swipeout: Boolean,
    swipeoutOpened: Boolean,
    sortable: {
      type: Boolean,
      default: void 0
    },
    sortableOpposite: {
      type: Boolean,
      default: void 0
    },
    accordionItem: Boolean,
    accordionItemOpened: Boolean,
    smartSelect: Boolean,
    smartSelectParams: Object,
    noChevron: Boolean,
    chevronCenter: Boolean,
    checkbox: Boolean,
    radio: Boolean,
    radioIcon: String,
    checked: Boolean,
    indeterminate: Boolean,
    name: String,
    value: {
      type: [String, Number, Array],
      default: void 0
    },
    readonly: Boolean,
    required: Boolean,
    disabled: Boolean,
    virtualListIndex: Number
  }, colorProps, actionsProps, routerProps),
  emits: ["click", "swipeout", "swipeout:overswipeenter", "swipeout:overswipeexit", "swipeout:deleted", "swipeout:delete", "swipeout:close", "swipeout:closed", "swipeout:open", "swipeout:opened", "accordion:beforeclose", "accordion:close", "accordion:closed", "accordion:beforeopen", "accordion:open", "accordion:opened", "change", "update:checked"],
  setup: function setup44(props, _ref2) {
    var slots = _ref2.slots, emit = _ref2.emit;
    var ListContext = inject("ListContext", {
      value: {
        listIsMedia: false,
        listIsSortable: false,
        listIsSortableOpposite: false,
        listIsSimple: false
      }
    });
    var listIsMedia = computed(function() {
      return ListContext.value.listIsMedia || false;
    });
    var listIsSortable = computed(function() {
      return ListContext.value.listIsSortable || false;
    });
    var listIsSortableOpposite = computed(function() {
      return ListContext.value.listIsSortableOpposite || false;
    });
    var listIsSimple = computed(function() {
      return ListContext.value.listIsSimple || false;
    });
    var elRef = ref(null);
    var linkElRef = ref(null);
    var inputElRef = ref(null);
    var onClick = function onClick2(event) {
      if (event.target.tagName.toLowerCase() !== "input") {
        emit("click", event);
      }
    };
    var onSwipeoutOverswipeEnter = function onSwipeoutOverswipeEnter2(el) {
      if (elRef.value !== el)
        return;
      emit("swipeout:overswipeenter");
    };
    var onSwipeoutOverswipeExit = function onSwipeoutOverswipeExit2(el) {
      if (elRef.value !== el)
        return;
      emit("swipeout:overswipeexit");
    };
    var onSwipeoutDeleted = function onSwipeoutDeleted2(el) {
      if (elRef.value !== el)
        return;
      emit("swipeout:deleted");
    };
    var onSwipeoutDelete = function onSwipeoutDelete2(el) {
      if (elRef.value !== el)
        return;
      emit("swipeout:delete");
    };
    var onSwipeoutClose = function onSwipeoutClose2(el) {
      if (elRef.value !== el)
        return;
      emit("swipeout:close");
    };
    var onSwipeoutClosed = function onSwipeoutClosed2(el) {
      if (elRef.value !== el)
        return;
      emit("swipeout:closed");
    };
    var onSwipeoutOpen = function onSwipeoutOpen2(el) {
      if (elRef.value !== el)
        return;
      emit("swipeout:open");
    };
    var onSwipeoutOpened = function onSwipeoutOpened2(el) {
      if (elRef.value !== el)
        return;
      emit("swipeout:opened");
    };
    var onSwipeout = function onSwipeout2(el, progress) {
      if (elRef.value !== el)
        return;
      emit("swipeout", progress);
    };
    var onAccBeforeClose = function onAccBeforeClose2(el, prevent) {
      if (elRef.value !== el)
        return;
      emit("accordion:beforeclose", prevent);
    };
    var onAccClose = function onAccClose2(el) {
      if (elRef.value !== el)
        return;
      emit("accordion:close");
    };
    var onAccClosed = function onAccClosed2(el) {
      if (elRef.value !== el)
        return;
      emit("accordion:closed");
    };
    var onAccBeforeOpen = function onAccBeforeOpen2(el, prevent) {
      if (elRef.value !== el)
        return;
      emit("accordion:beforeopen", prevent);
    };
    var onAccOpen = function onAccOpen2(el) {
      if (elRef.value !== el)
        return;
      emit("accordion:open");
    };
    var onAccOpened = function onAccOpened2(el) {
      if (elRef.value !== el)
        return;
      emit("accordion:opened");
    };
    var onChange = function onChange2(event) {
      emit("change", event);
      emit("update:checked", event.target.checked);
    };
    useTooltip(elRef, props);
    useRouteProps(linkElRef, props);
    useSmartSelect(props, function() {
    }, function() {
      return elRef.value.querySelector("a.smart-select");
    });
    watch(function() {
      return props.swipeoutOpened;
    }, function(newValue) {
      if (!props.swipeout || !elRef.value || !f7)
        return;
      if (newValue) {
        f7.swipeout.open(elRef.value);
      } else {
        f7.swipeout.close(elRef.value);
      }
    });
    onMounted(function() {
      f7ready(function() {
        if (props.swipeout) {
          f7.on("swipeoutOpen", onSwipeoutOpen);
          f7.on("swipeoutOpened", onSwipeoutOpened);
          f7.on("swipeoutClose", onSwipeoutClose);
          f7.on("swipeoutClosed", onSwipeoutClosed);
          f7.on("swipeoutDelete", onSwipeoutDelete);
          f7.on("swipeoutDeleted", onSwipeoutDeleted);
          f7.on("swipeoutOverswipeEnter", onSwipeoutOverswipeEnter);
          f7.on("swipeoutOverswipeExit", onSwipeoutOverswipeExit);
          f7.on("swipeout", onSwipeout);
        }
        if (props.accordionItem) {
          f7.on("accordionBeforeOpen", onAccBeforeOpen);
          f7.on("accordionOpen", onAccOpen);
          f7.on("accordionOpened", onAccOpened);
          f7.on("accordionBeforeClose", onAccBeforeClose);
          f7.on("accordionClose", onAccClose);
          f7.on("accordionClosed", onAccClosed);
        }
        if (props.swipeout && props.swipeoutOpened) {
          f7.swipeout.open(elRef.value);
        }
      });
      if (props.checkbox && inputElRef.value) {
        inputElRef.value.indeterminate = !!props.indeterminate;
      }
    });
    onBeforeUnmount(function() {
      if (!f7)
        return;
      f7.off("swipeoutOpen", onSwipeoutOpen);
      f7.off("swipeoutOpened", onSwipeoutOpened);
      f7.off("swipeoutClose", onSwipeoutClose);
      f7.off("swipeoutClosed", onSwipeoutClosed);
      f7.off("swipeoutDelete", onSwipeoutDelete);
      f7.off("swipeoutDeleted", onSwipeoutDeleted);
      f7.off("swipeoutOverswipeEnter", onSwipeoutOverswipeEnter);
      f7.off("swipeoutOverswipeExit", onSwipeoutOverswipeExit);
      f7.off("swipeout", onSwipeout);
      f7.off("accordionBeforeOpen", onAccBeforeOpen);
      f7.off("accordionOpen", onAccOpen);
      f7.off("accordionOpened", onAccOpened);
      f7.off("accordionBeforeClose", onAccBeforeClose);
      f7.off("accordionClose", onAccClose);
      f7.off("accordionClosed", onAccClosed);
    });
    watch(function() {
      return props.indeterminate;
    }, function(newValue) {
      if (inputElRef.value) {
        inputElRef.value.indeterminate = !!newValue;
      }
    });
    var isMediaComputed = computed(function() {
      return props.mediaItem || props.mediaList || listIsMedia.value;
    });
    var isSortableComputed = computed(function() {
      return props.sortable || listIsSortable.value;
    });
    var isSortableOppositeComputed = computed(function() {
      return isSortableComputed.value && (props.sortableOpposite || listIsSortableOpposite.value);
    });
    var linkAttrs = computed(function() {
      return _extends42({
        href: props.link === true ? "" : props.link || props.href,
        target: props.target,
        "data-tab": isStringProp(props.tabLink) && props.tabLink || void 0
      }, routerAttrs(props), actionsAttrs(props));
    });
    var linkClasses = computed(function() {
      return classNames({
        "item-link": true,
        "smart-select": props.smartSelect,
        "tab-link": props.tabLink || props.tabLink === "",
        "tab-link-active": props.tabLinkActive,
        "item-selected": props.selected
      }, routerClasses(props), actionsClasses(props));
    });
    var itemContentClasses = computed(function() {
      return classNames("item-content", {
        "item-checkbox": props.checkbox,
        "item-radio": props.radio,
        "item-radio-icon-start": props.radio && props.radioIcon === "start",
        "item-radio-icon-end": props.radio && props.radioIcon === "end"
      }, colorClasses(props));
    });
    var liClasses = computed(function() {
      return classNames({
        "item-divider": props.divider,
        "list-group-title": props.groupTitle,
        "media-item": isMediaComputed.value,
        swipeout: props.swipeout,
        "accordion-item": props.accordionItem,
        "accordion-item-opened": props.accordionItemOpened,
        disabled: props.disabled && !(props.radio || props.checkbox),
        "no-chevron": props.noChevron,
        "chevron-center": props.chevronCenter,
        "disallow-sorting": props.sortable === false
      }, colorClasses(props));
    });
    return function() {
      var linkEl;
      var itemContentEl;
      if (!listIsSimple.value) {
        itemContentEl = ListItemContent({
          props,
          slots,
          inputElRef,
          onChange,
          onClick: props.link || props.href || props.accordionItem || props.smartSelect ? void 0 : onClick,
          isMediaComputed,
          isSortableComputed,
          isSortableOppositeComputed,
          itemContentClasses
        });
        if (props.link || props.href || props.accordionItem || props.smartSelect) {
          linkEl = h("a", _extends42({
            ref: linkElRef,
            class: linkClasses.value
          }, linkAttrs.value, {
            onClick
          }), [itemContentEl]);
        }
      }
      if (props.divider || props.groupTitle) {
        return h("li", {
          ref: elRef,
          class: liClasses.value,
          "data-virtual-list-index": props.virtualListIndex,
          onClick
        }, [props.title, slots.default && slots.default()]);
      }
      if (listIsSimple.value) {
        return h("li", {
          ref: elRef,
          class: liClasses.value,
          onClick,
          "data-virtual-list-index": props.virtualListIndex
        }, [props.title, slots.default && slots.default()]);
      }
      var linkItemEl = props.link || props.href || props.smartSelect || props.accordionItem ? linkEl : itemContentEl;
      return h("li", {
        ref: elRef,
        class: liClasses.value,
        "data-virtual-list-index": props.virtualListIndex
      }, [slots["root-start"] && slots["root-start"](), props.swipeout ? h("div", {
        class: "swipeout-content"
      }, [linkItemEl]) : linkItemEl, isSortableComputed.value && props.sortable !== false && !isSortableOppositeComputed.value && h("div", {
        class: "sortable-handler"
      }), (props.swipeout || props.accordionItem) && slots.default(), slots.root && slots.root(), slots["root-end"] && slots["root-end"]()]);
    };
  }
};

// node_modules/framework7-vue/esm/components/list.js
function _extends43() {
  _extends43 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends43.apply(this, arguments);
}
var list_default = {
  name: "f7-list",
  props: _extends43({
    inset: Boolean,
    xsmallInset: Boolean,
    smallInset: Boolean,
    mediumInset: Boolean,
    largeInset: Boolean,
    xlargeInset: Boolean,
    mediaList: Boolean,
    sortable: Boolean,
    sortableTapHold: Boolean,
    sortableEnabled: Boolean,
    sortableMoveElements: {
      type: Boolean,
      default: void 0
    },
    sortableOpposite: Boolean,
    accordionList: Boolean,
    accordionOpposite: Boolean,
    contactsList: Boolean,
    simpleList: Boolean,
    linksList: Boolean,
    menuList: Boolean,
    noHairlines: Boolean,
    noHairlinesBetween: Boolean,
    noHairlinesMd: Boolean,
    noHairlinesBetweenMd: Boolean,
    noHairlinesIos: Boolean,
    noHairlinesBetweenIos: Boolean,
    noHairlinesAurora: Boolean,
    noHairlinesBetweenAurora: Boolean,
    noChevron: Boolean,
    chevronCenter: Boolean,
    tab: Boolean,
    tabActive: Boolean,
    form: Boolean,
    formStoreData: Boolean,
    inlineLabels: Boolean,
    virtualList: Boolean,
    virtualListParams: Object
  }, colorProps),
  emits: ["submit", "sortable:enable", "sortable:disable", "sortable:sort", "virtual:itembeforeinsert", "virtual:beforeclear", "virtual:itemsbeforeinsert", "virtual:itemsafterinsert", "tab:hide", "tab:show"],
  setup: function setup45(props, _ref) {
    var emit = _ref.emit, slots = _ref.slots;
    var f7VirtualList = null;
    var elRef = ref(null);
    var onSubmit = function onSubmit2(event) {
      emit("submit", event);
    };
    var onSortableEnable = function onSortableEnable2(el) {
      if (elRef.value !== el)
        return;
      emit("sortable:enable");
    };
    var onSortableDisable = function onSortableDisable2(el) {
      if (elRef.value !== el)
        return;
      emit("sortable:disable");
    };
    var onSortableSort = function onSortableSort2(el, sortData, listEl) {
      if (elRef.value !== listEl)
        return;
      emit("sortable:sort", sortData);
    };
    useTab(elRef, emit);
    onMounted(function() {
      f7ready(function() {
        f7.on("sortableEnable", onSortableEnable);
        f7.on("sortableDisable", onSortableDisable);
        f7.on("sortableSort", onSortableSort);
        if (!props.virtualList)
          return;
        var vlParams = props.virtualListParams || {};
        if (!vlParams.renderItem && !vlParams.renderExternal)
          return;
        if (vlParams.items)
          vlParams.items = toRaw(vlParams.items);
        f7VirtualList = f7.virtualList.create(extend({
          el: elRef.value,
          on: {
            itemBeforeInsert: function itemBeforeInsert(itemEl, item) {
              var vl = this;
              emit("virtual:itembeforeinsert", vl, itemEl, item);
            },
            beforeClear: function beforeClear(fragment) {
              var vl = this;
              emit("virtual:beforeclear", vl, fragment);
            },
            itemsBeforeInsert: function itemsBeforeInsert(fragment) {
              var vl = this;
              emit("virtual:itemsbeforeinsert", vl, fragment);
            },
            itemsAfterInsert: function itemsAfterInsert(fragment) {
              var vl = this;
              emit("virtual:itemsafterinsert", vl, fragment);
            }
          }
        }, vlParams));
      });
    });
    onBeforeUnmount(function() {
      if (!f7)
        return;
      f7.off("sortableEnable", onSortableEnable);
      f7.off("sortableDisable", onSortableDisable);
      f7.off("sortableSort", onSortableSort);
      if (!(props.virtualList && f7VirtualList))
        return;
      if (f7VirtualList.destroy)
        f7VirtualList.destroy();
      f7VirtualList = null;
    });
    var classes = computed(function() {
      return classNames("list", {
        inset: props.inset,
        "xsmall-inset": props.xsmallInset,
        "small-inset": props.smallInset,
        "medium-inset": props.mediumInset,
        "large-inset": props.largeInset,
        "xlarge-inset": props.xlargeInset,
        "media-list": props.mediaList,
        "simple-list": props.simpleList,
        "links-list": props.linksList,
        "menu-list": props.menuList,
        sortable: props.sortable,
        "sortable-tap-hold": props.sortableTapHold,
        "sortable-enabled": props.sortableEnabled,
        "sortable-opposite": props.sortableOpposite,
        "accordion-list": props.accordionList,
        "accordion-opposite": props.accordionOpposite,
        "contacts-list": props.contactsList,
        "virtual-list": props.virtualList,
        tab: props.tab,
        "tab-active": props.tabActive,
        "no-hairlines": props.noHairlines,
        "no-hairlines-md": props.noHairlinesMd,
        "no-hairlines-ios": props.noHairlinesIos,
        "no-hairlines-aurora": props.noHairlinesAurora,
        "no-hairlines-between": props.noHairlinesBetween,
        "no-hairlines-between-md": props.noHairlinesBetweenMd,
        "no-hairlines-between-ios": props.noHairlinesBetweenIos,
        "no-hairlines-between-aurora": props.noHairlinesBetweenAurora,
        "form-store-data": props.formStoreData,
        "inline-labels": props.inlineLabels,
        "no-chevron": props.noChevron,
        "chevron-center": props.chevronCenter
      }, colorClasses(props));
    });
    var ListTag = computed(function() {
      return props.form ? "form" : "div";
    });
    var ListContext = computed(function() {
      return {
        listIsMedia: props.mediaList,
        listIsSimple: props.simpleList,
        listIsSortable: props.sortable,
        listIsSortableOpposite: props.sortableOpposite
      };
    });
    provide("ListContext", ListContext);
    return function() {
      var slotsList = slots.list, slotsDefault = slots.default;
      var rootChildrenBeforeList = [];
      var rootChildrenAfterList = [];
      var ulChildren = slotsList || [];
      var wasUlChild = false;
      if (slotsDefault) {
        slotsDefault().forEach(function(vnode) {
          if (typeof vnode === "undefined")
            return;
          var tag = vnode.type && vnode.type.name ? vnode.type.name : vnode.type;
          if (tag && typeof tag === "symbol") {
            wasUlChild = true;
            ulChildren.push(vnode);
          } else if (!tag || tag && !(tag === "li" || tag.indexOf("f7-list-item") >= 0 || tag.indexOf("f7-list-button") >= 0 || tag.indexOf("f7-list-input") >= 0)) {
            if (wasUlChild)
              rootChildrenAfterList.push(vnode);
            else
              rootChildrenBeforeList.push(vnode);
          } else if (tag) {
            wasUlChild = true;
            ulChildren.push(vnode);
          }
        });
      }
      return h(ListTag.value, {
        ref: elRef,
        class: classes.value,
        "data-sortable-move-elements": typeof props.sortableMoveElements !== "undefined" ? props.sortableMoveElements.toString() : void 0,
        onSubmit
      }, [slots["before-list"] && slots["before-list"](), rootChildrenBeforeList, ulChildren.length > 0 && h("ul", ulChildren), slots["after-list"] && slots["after-list"](), rootChildrenAfterList]);
    };
  }
};

// node_modules/framework7-vue/esm/components/login-screen-title.js
function _extends44() {
  _extends44 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends44.apply(this, arguments);
}
function render41(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var login_screen_title_default = {
  name: "f7-login-screen-title",
  render: render41,
  props: _extends44({}, colorProps),
  setup: function setup46(props) {
    var classes = computed(function() {
      return classNames("login-screen-title", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/login-screen.js
function _extends45() {
  _extends45 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends45.apply(this, arguments);
}
function render42(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var login_screen_default = {
  name: "f7-login-screen",
  render: render42,
  props: _extends45({
    opened: Boolean,
    animate: {
      type: Boolean,
      default: void 0
    },
    containerEl: {
      type: [String, Object],
      default: void 0
    }
  }, colorProps),
  emits: ["loginscreen:open", "loginscreen:opened", "loginscreen:close", "loginscreen:closed", "update:opened"],
  setup: function setup47(props, _ref) {
    var emit = _ref.emit;
    var f7LoginScreen = ref(null);
    var isOpened = props.opened;
    var isClosing = false;
    var elRef = ref(null);
    var onOpen = function onOpen2(instance) {
      isOpened = true;
      isClosing = false;
      emit("loginscreen:open", instance);
      emit("update:opened", true);
    };
    var onOpened = function onOpened2(instance) {
      emit("loginscreen:opened", instance);
    };
    var onClose = function onClose2(instance) {
      isOpened = false;
      isClosing = true;
      emit("loginscreen:close", instance);
    };
    var onClosed = function onClosed2(instance) {
      isClosing = false;
      emit("loginscreen:closed", instance);
      emit("update:opened", false);
    };
    watch(function() {
      return props.opened;
    }, function(value) {
      if (!f7LoginScreen.value)
        return;
      if (value) {
        f7LoginScreen.value.open();
      } else {
        f7LoginScreen.value.close();
      }
    });
    onMounted(function() {
      if (!elRef.value)
        return;
      f7ready(function() {
        var loginScreenParams = {
          el: elRef.value,
          on: {
            open: onOpen,
            opened: onOpened,
            close: onClose,
            closed: onClosed
          }
        };
        if (typeof props.animate !== "undefined") {
          loginScreenParams.animate = props.animate;
        }
        if (typeof props.containerEl !== "undefined") {
          loginScreenParams.containerEl = props.containerEl;
        }
        f7LoginScreen.value = f7.loginScreen.create(loginScreenParams);
        if (props.opened) {
          f7LoginScreen.value.open(false);
        }
      });
    });
    onBeforeUnmount(function() {
      if (f7LoginScreen.value) {
        f7LoginScreen.value.destroy();
      }
      f7LoginScreen.value = null;
    });
    var classes = computed(function() {
      return classNames("login-screen", modalStateClasses({
        isOpened,
        isClosing
      }), colorClasses(props));
    });
    return {
      elRef,
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/menu-dropdown-item.js
function _extends46() {
  _extends46 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends46.apply(this, arguments);
}
function render43(_ctx, _cache) {
  return openBlock(), createBlock("div", mergeProps({
    ref: "elRef",
    class: _ctx.classes
  }, _ctx.attrs, {
    onClick: _cache[1] || (_cache[1] = function() {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }), [createTextVNode(toDisplayString(_ctx.text) + " ", 1), renderSlot(_ctx.$slots, "default")], 16);
}
var menu_dropdown_item_default = {
  name: "f7-menu-dropdown-item",
  render: render43,
  props: _extends46({
    text: String,
    link: Boolean,
    href: String,
    target: String,
    divider: Boolean
  }, colorProps, routerProps, actionsProps),
  emits: ["click"],
  setup: function setup48(props, _ref) {
    var emit = _ref.emit;
    var elRef = ref(null);
    var onClick = function onClick2(e) {
      emit("click", e);
    };
    useRouteProps(elRef, props);
    var isLink = computed(function() {
      return props.link || props.href || props.href === "";
    });
    var tag = computed(function() {
      return isLink.value ? "a" : "div";
    });
    var classes = computed(function() {
      return classNames({
        "menu-dropdown-link": isLink.value && !props.divider,
        "menu-dropdown-item": !isLink.value && !props.divider,
        "menu-dropdown-divider": props.divider
      }, colorClasses(props), routerClasses(props), actionsClasses(props), {
        "menu-close": typeof props.menuClose === "undefined"
      });
    });
    var attrs = computed(function() {
      var hrefComputed = props.href;
      if (typeof hrefComputed === "undefined" && props.link)
        hrefComputed = "#";
      return _extends46({
        href: hrefComputed,
        target: props.target
      }, routerAttrs(props), actionsAttrs(props));
    });
    return {
      classes,
      attrs,
      tag,
      onClick,
      elRef
    };
  }
};

// node_modules/framework7-vue/esm/components/menu-dropdown.js
function _extends47() {
  _extends47 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends47.apply(this, arguments);
}
function render44(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [createVNode("div", {
    class: "menu-dropdown-content",
    style: {
      height: _ctx.contentHeight
    }
  }, [renderSlot(_ctx.$slots, "default")], 4)], 2);
}
var menu_dropdown_default = {
  name: "f7-menu-dropdown",
  render: render44,
  props: _extends47({
    contentHeight: String,
    position: String,
    left: Boolean,
    center: Boolean,
    right: Boolean
  }, colorProps),
  setup: function setup49(props) {
    var classes = computed(function() {
      var positionComputed = props.position || "left";
      if (props.left)
        positionComputed = "left";
      if (props.center)
        positionComputed = "center";
      if (props.right)
        positionComputed = "right";
      return classNames("menu-dropdown", "menu-dropdown-" + positionComputed, colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/menu-item.js
function _extends48() {
  _extends48 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends48.apply(this, arguments);
}
var _hoisted_113 = {
  key: 0,
  class: "menu-item-content"
};
function render45(_ctx, _cache) {
  var _component_f7_use_icon = resolveComponent("f7-use-icon");
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps({
    ref: "elRef",
    class: _ctx.classes
  }, _ctx.attrs, {
    onClick: _ctx.onClick
  }), {
    default: withCtx(function() {
      return [_ctx.text || _ctx.$slots.text || _ctx.icon ? (openBlock(), createBlock("div", _hoisted_113, [createTextVNode(toDisplayString(_ctx.text) + " ", 1), _ctx.icon ? (openBlock(), createBlock(_component_f7_use_icon, {
        key: 0,
        icon: _ctx.icon
      }, null, 8, ["icon"])) : createCommentVNode("", true), renderSlot(_ctx.$slots, "text")])) : createCommentVNode("", true), renderSlot(_ctx.$slots, "default")];
    }),
    _: 3
  }, 16, ["class", "onClick"]);
}
var menu_item_default = {
  name: "f7-menu-item",
  render: render45,
  components: {
    f7UseIcon: use_icon_default
  },
  props: _extends48({
    text: String,
    iconOnly: Boolean,
    href: String,
    link: Boolean,
    target: String,
    dropdown: Boolean,
    tooltip: String,
    tooltipTrigger: String
  }, colorProps, routerProps, actionsProps, iconProps),
  emits: ["click", "menu:opened", "menu:closed"],
  setup: function setup50(props, _ref) {
    var slots = _ref.slots, emit = _ref.emit;
    var elRef = ref(null);
    useTooltip(elRef, props);
    var onClick = function onClick2(e) {
      emit("click", e);
    };
    var onOpened = function onOpened2(el) {
      if (elRef.value !== el)
        return;
      emit("menu:opened", el);
    };
    var onClosed = function onClosed2(el) {
      if (elRef.value !== el)
        return;
      emit("menu:closed", el);
    };
    useRouteProps(elRef, props);
    var attachEvents = function attachEvents2() {
      f7ready(function() {
        f7.on("menuOpened", onOpened);
        f7.on("menuClosed", onClosed);
      });
    };
    var detachEvents = function detachEvents2() {
      f7.off("menuOpened", onOpened);
      f7.off("menuClosed", onOpened);
    };
    onMounted(function() {
      return attachEvents();
    });
    onBeforeUnmount(function() {
      return detachEvents();
    });
    var icon = computed(function() {
      return useIcon(props);
    });
    var tag = computed(function() {
      var isLink = props.link || props.href || props.href === "";
      return isLink ? "a" : "div";
    });
    var classes = computed(function() {
      var iconOnlyComputed;
      if (props.iconOnly || !props.text && !slots.text) {
        iconOnlyComputed = true;
      } else {
        iconOnlyComputed = false;
      }
      var isDropdown = props.dropdown || props.dropdown === "";
      return classNames({
        "menu-item": true,
        "menu-item-dropdown": isDropdown,
        "icon-only": iconOnlyComputed
      }, colorClasses(props), routerClasses(props), actionsClasses(props));
    });
    var attrs = computed(function() {
      var hrefComputed = props.href;
      if (typeof hrefComputed === "undefined" && props.link)
        hrefComputed = "#";
      return _extends48({
        href: hrefComputed,
        target: props.target
      }, routerAttrs(props), actionsAttrs(props));
    });
    return {
      tag,
      classes,
      attrs,
      icon,
      onClick,
      elRef
    };
  }
};

// node_modules/framework7-vue/esm/components/menu.js
function _extends49() {
  _extends49 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends49.apply(this, arguments);
}
var _hoisted_114 = {
  class: "menu-inner"
};
function render46(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [createVNode("div", _hoisted_114, [renderSlot(_ctx.$slots, "default")])], 2);
}
var menu_default = {
  name: "f7-menu",
  render: render46,
  props: _extends49({}, colorProps),
  setup: function setup51(props) {
    var classes = computed(function() {
      return classNames("menu", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/message.js
function _extends50() {
  _extends50 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends50.apply(this, arguments);
}
var _hoisted_115 = {
  class: "message-content"
};
var _hoisted_25 = {
  key: 0,
  class: "message-image"
};
var _hoisted_33 = {
  key: 1,
  class: "message-text-header"
};
var _hoisted_42 = {
  key: 0,
  class: "message-typing-indicator"
};
var _hoisted_5 = createVNode("div", null, null, -1);
var _hoisted_6 = createVNode("div", null, null, -1);
var _hoisted_7 = createVNode("div", null, null, -1);
var _hoisted_8 = {
  key: 3,
  class: "message-text-footer"
};
function render47(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes,
    onClick: _cache[7] || (_cache[7] = function() {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }, [renderSlot(_ctx.$slots, "start"), _ctx.hasAvatar ? (openBlock(), createBlock("div", {
    key: 0,
    class: "message-avatar",
    style: {
      backgroundImage: _ctx.avatar && "url(" + _ctx.avatar + ")"
    },
    onClick: _cache[1] || (_cache[1] = function() {
      return _ctx.onAvatarClick && _ctx.onAvatarClick.apply(_ctx, arguments);
    })
  }, [renderSlot(_ctx.$slots, "avatar")], 4)) : createCommentVNode("", true), createVNode("div", _hoisted_115, [renderSlot(_ctx.$slots, "content-start"), _ctx.hasName ? (openBlock(), createBlock("div", {
    key: 0,
    class: "message-name",
    onClick: _cache[2] || (_cache[2] = function() {
      return _ctx.onNameClick && _ctx.onNameClick.apply(_ctx, arguments);
    })
  }, [createTextVNode(toDisplayString(_ctx.name) + " ", 1), renderSlot(_ctx.$slots, "name")])) : createCommentVNode("", true), _ctx.hasHeader ? (openBlock(), createBlock("div", {
    key: 1,
    class: "message-header",
    onClick: _cache[3] || (_cache[3] = function() {
      return _ctx.onHeaderClick && _ctx.onHeaderClick.apply(_ctx, arguments);
    })
  }, [createTextVNode(toDisplayString(_ctx.header) + " ", 1), renderSlot(_ctx.$slots, "header")])) : createCommentVNode("", true), createVNode("div", {
    class: "message-bubble",
    onClick: _cache[5] || (_cache[5] = function() {
      return _ctx.onBubbleClick && _ctx.onBubbleClick.apply(_ctx, arguments);
    })
  }, [renderSlot(_ctx.$slots, "bubble-start"), _ctx.hasImage ? (openBlock(), createBlock("div", _hoisted_25, [renderSlot(_ctx.$slots, "image", {}, function() {
    return [createVNode("img", {
      src: _ctx.image
    }, null, 8, ["src"])];
  })])) : createCommentVNode("", true), _ctx.hasTextHeader ? (openBlock(), createBlock("div", _hoisted_33, [createTextVNode(toDisplayString(_ctx.textHeader) + " ", 1), renderSlot(_ctx.$slots, "text-header")])) : createCommentVNode("", true), _ctx.hasText ? (openBlock(), createBlock("div", {
    key: 2,
    class: "message-text",
    onClick: _cache[4] || (_cache[4] = function() {
      return _ctx.onTextClick && _ctx.onTextClick.apply(_ctx, arguments);
    })
  }, [createTextVNode(toDisplayString(_ctx.text) + " ", 1), renderSlot(_ctx.$slots, "text"), _ctx.typing ? (openBlock(), createBlock("div", _hoisted_42, [_hoisted_5, _hoisted_6, _hoisted_7])) : createCommentVNode("", true)])) : createCommentVNode("", true), _ctx.hasTextFooter ? (openBlock(), createBlock("div", _hoisted_8, [createTextVNode(toDisplayString(_ctx.textFooter) + " ", 1), renderSlot(_ctx.$slots, "text-footer")])) : createCommentVNode("", true), renderSlot(_ctx.$slots, "bubble-end"), renderSlot(_ctx.$slots, "default")]), _ctx.hasFooter ? (openBlock(), createBlock("div", {
    key: 2,
    class: "message-footer",
    onClick: _cache[6] || (_cache[6] = function() {
      return _ctx.onFooterClick && _ctx.onFooterClick.apply(_ctx, arguments);
    })
  }, [createTextVNode(toDisplayString(_ctx.footer) + " ", 1), renderSlot(_ctx.$slots, "footer")])) : createCommentVNode("", true), renderSlot(_ctx.$slots, "content-end")]), renderSlot(_ctx.$slots, "end")], 2);
}
var message_default = {
  name: "f7-message",
  render: render47,
  props: _extends50({
    text: String,
    name: String,
    avatar: String,
    type: {
      type: String,
      default: "sent"
    },
    image: String,
    header: String,
    footer: String,
    textHeader: String,
    textFooter: String,
    first: Boolean,
    last: Boolean,
    tail: Boolean,
    sameName: Boolean,
    sameHeader: Boolean,
    sameFooter: Boolean,
    sameAvatar: Boolean,
    typing: Boolean
  }, colorProps),
  emits: ["click", "click:name", "click:text", "click:avatar", "click:header", "click:footer", "click:bubble"],
  setup: function setup52(props, _ref) {
    var emit = _ref.emit, slots = _ref.slots;
    var onClick = function onClick2(event) {
      emit("click", event);
    };
    var onNameClick = function onNameClick2(event) {
      emit("click:name", event);
    };
    var onTextClick = function onTextClick2(event) {
      emit("click:text", event);
    };
    var onAvatarClick = function onAvatarClick2(event) {
      emit("click:avatar", event);
    };
    var onHeaderClick = function onHeaderClick2(event) {
      emit("click:header", event);
    };
    var onFooterClick = function onFooterClick2(event) {
      emit("click:footer", event);
    };
    var onBubbleClick = function onBubbleClick2(event) {
      emit("click:bubble", event);
    };
    var classes = computed(function() {
      return classNames("message", {
        "message-sent": props.type === "sent",
        "message-received": props.type === "received",
        "message-typing": props.typing,
        "message-first": props.first,
        "message-last": props.last,
        "message-tail": props.tail,
        "message-same-name": props.sameName,
        "message-same-header": props.sameHeader,
        "message-same-footer": props.sameFooter,
        "message-same-avatar": props.sameAvatar
      }, colorClasses(props));
    });
    var hasAvatar = computed(function() {
      return slots.avatar || props.avatar;
    });
    var hasName = computed(function() {
      return slots.name || props.name;
    });
    var hasHeader = computed(function() {
      return slots.header || props.header;
    });
    var hasImage = computed(function() {
      return slots.image || props.image;
    });
    var hasTextHeader = computed(function() {
      return slots["text-header"] || props.textHeader;
    });
    var hasText = computed(function() {
      return slots.text || props.text || props.typing;
    });
    var hasTextFooter = computed(function() {
      return slots["text-footer"] || props.textFooter;
    });
    var hasFooter = computed(function() {
      return slots.footer || props.footer;
    });
    return {
      classes,
      onClick,
      onNameClick,
      onTextClick,
      onAvatarClick,
      onHeaderClick,
      onFooterClick,
      onBubbleClick,
      hasAvatar,
      hasName,
      hasHeader,
      hasImage,
      hasTextHeader,
      hasText,
      hasTextFooter,
      hasFooter
    };
  }
};

// node_modules/framework7-vue/esm/components/messagebar-attachment.js
function _extends51() {
  _extends51 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends51.apply(this, arguments);
}
function render48(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes,
    onClick: _cache[2] || (_cache[2] = function() {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }, [_ctx.image ? (openBlock(), createBlock("img", {
    key: 0,
    src: _ctx.image
  }, null, 8, ["src"])) : createCommentVNode("", true), _ctx.deletable ? (openBlock(), createBlock("span", {
    key: 1,
    class: "messagebar-attachment-delete",
    onClick: _cache[1] || (_cache[1] = function() {
      return _ctx.onDeleteClick && _ctx.onDeleteClick.apply(_ctx, arguments);
    })
  })) : createCommentVNode("", true), renderSlot(_ctx.$slots, "default")], 2);
}
var messagebar_attachment_default = {
  name: "f7-messagebar-attachment",
  render: render48,
  props: _extends51({
    image: String,
    deletable: {
      type: Boolean,
      default: true
    }
  }, colorProps),
  emits: ["attachment:click", "attachment:delete"],
  setup: function setup53(props, _ref) {
    var emit = _ref.emit;
    var onClick = function onClick2(event) {
      emit("attachment:click", event);
    };
    var onDeleteClick = function onDeleteClick2(event) {
      emit("attachment:delete", event);
    };
    var classes = computed(function() {
      return classNames("messagebar-attachment", colorClasses(props));
    });
    return {
      classes,
      onClick,
      onDeleteClick
    };
  }
};

// node_modules/framework7-vue/esm/components/messagebar-attachments.js
function _extends52() {
  _extends52 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends52.apply(this, arguments);
}
function render49(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var messagebar_attachments_default = {
  name: "f7-messagebar-attachments",
  render: render49,
  props: _extends52({}, colorProps),
  setup: function setup54(props) {
    var classes = computed(function() {
      return classNames("messagebar-attachments", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/messagebar-sheet-image.js
function _extends53() {
  _extends53 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends53.apply(this, arguments);
}
var _hoisted_116 = createVNode("i", {
  class: "icon icon-checkbox"
}, null, -1);
function render50(_ctx, _cache) {
  return openBlock(), createBlock("label", {
    class: _ctx.classes,
    style: _ctx.styles
  }, [createVNode("input", {
    type: "checkbox",
    checked: _ctx.checked,
    onChange: _cache[1] || (_cache[1] = function() {
      return _ctx.onChange && _ctx.onChange.apply(_ctx, arguments);
    })
  }, null, 40, ["checked"]), _hoisted_116, renderSlot(_ctx.$slots, "default")], 6);
}
var messagebar_sheet_image_default = {
  name: "f7-messagebar-sheet-image",
  render: render50,
  props: _extends53({
    image: String,
    checked: Boolean
  }, colorProps),
  emits: ["checked", "unchecked", "change", "update:checked"],
  setup: function setup55(props, _ref) {
    var emit = _ref.emit;
    var onChange = function onChange2(event) {
      if (event.target.checked)
        emit("checked", event);
      else
        emit("unchecked", event);
      emit("update:checked", event.target.checked);
      emit("change", event);
    };
    var classes = computed(function() {
      return classNames("messagebar-sheet-image", "checkbox", colorClasses(props));
    });
    var styles = computed(function() {
      return {
        backgroundImage: props.image && "url(" + props.image + ")"
      };
    });
    return {
      classes,
      styles,
      onChange
    };
  }
};

// node_modules/framework7-vue/esm/components/messagebar-sheet-item.js
function _extends54() {
  _extends54 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends54.apply(this, arguments);
}
function render51(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var messagebar_sheet_item_default = {
  name: "f7-messagebar-sheet-item",
  render: render51,
  props: _extends54({}, colorProps),
  setup: function setup56(props) {
    var classes = computed(function() {
      return classNames("messagebar-sheet-item", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/messagebar-sheet.js
function _extends55() {
  _extends55 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends55.apply(this, arguments);
}
function render52(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var messagebar_sheet_default = {
  name: "f7-messagebar-sheet",
  render: render52,
  props: _extends55({}, colorProps),
  setup: function setup57(props) {
    var classes = computed(function() {
      return classNames("messagebar-sheet", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/messagebar.js
function _extends56() {
  _extends56 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends56.apply(this, arguments);
}
var messagebar_default = {
  name: "f7-messagebar",
  props: _extends56({
    sheetVisible: Boolean,
    attachmentsVisible: Boolean,
    top: Boolean,
    resizable: {
      type: Boolean,
      default: true
    },
    bottomOffset: {
      type: Number,
      default: 0
    },
    topOffset: {
      type: Number,
      default: 0
    },
    maxHeight: Number,
    resizePage: {
      type: Boolean,
      default: true
    },
    sendLink: String,
    value: [String, Number, Array],
    disabled: Boolean,
    readonly: Boolean,
    textareaId: [Number, String],
    name: String,
    placeholder: {
      type: String,
      default: "Message"
    },
    init: {
      type: Boolean,
      default: true
    }
  }, colorProps),
  emits: ["change", "input", "focus", "blur", "submit", "send", "click", "messagebar:attachmentdelete", "messagebar:attachmentclick", "messagebar:resizepage", "update:value"],
  setup: function setup58(props, _ref) {
    var emit = _ref.emit, slots = _ref.slots;
    var elRef = ref(null);
    var areaElRef = ref(null);
    var f7Messagebar = null;
    var updateSheetVisible = false;
    var updateAttachmentsVisible = false;
    var onChange = function onChange2(event) {
      emit("change", event);
    };
    var onInput = function onInput2(event) {
      emit("input", event);
      emit("update:value", event.target.value);
    };
    var onFocus = function onFocus2(event) {
      emit("focus", event);
    };
    var onBlur = function onBlur2(event) {
      emit("blur", event);
    };
    var onClick = function onClick2(event) {
      var inputValue = areaElRef.value.$el;
      var clear = f7Messagebar ? function() {
        f7Messagebar.clear();
      } : function() {
      };
      emit("submit", inputValue, clear);
      emit("send", inputValue, clear);
      emit("click", event);
    };
    var onAttachmentDelete = function onAttachmentDelete2(instance, attachmentEl, attachmentElIndex) {
      emit("messagebar:attachmentdelete", instance, attachmentEl, attachmentElIndex);
    };
    var onAttachmentClick = function onAttachmentClick2(instance, attachmentEl, attachmentElIndex) {
      emit("messagebar:attachmentclick", instance, attachmentEl, attachmentElIndex);
    };
    var onResizePage = function onResizePage2(instance) {
      emit("messagebar:resizepage", instance);
    };
    watch(function() {
      return props.sheetVisible;
    }, function() {
      if (!props.resizable || !f7Messagebar)
        return;
      updateSheetVisible = true;
    });
    watch(function() {
      return props.attachmentsVisible;
    }, function() {
      if (!props.resizable || !f7Messagebar)
        return;
      updateAttachmentsVisible = true;
    });
    onMounted(function() {
      if (!props.init)
        return;
      if (!elRef.value)
        return;
      var params = noUndefinedProps({
        el: elRef.value,
        top: props.top,
        resizePage: props.resizePage,
        bottomOffset: props.bottomOffset,
        topOffset: props.topOffset,
        maxHeight: props.maxHeight,
        on: {
          attachmentDelete: onAttachmentDelete,
          attachmentClick: onAttachmentClick,
          resizePage: onResizePage
        }
      });
      f7ready(function() {
        f7Messagebar = f7.messagebar.create(params);
      });
    });
    onUpdated(function() {
      if (!f7Messagebar)
        return;
      if (updateSheetVisible) {
        updateSheetVisible = false;
        f7Messagebar.sheetVisible = props.sheetVisible;
        f7Messagebar.resizePage();
      }
      if (updateAttachmentsVisible) {
        updateAttachmentsVisible = false;
        f7Messagebar.attachmentsVisible = props.attachmentsVisible;
        f7Messagebar.resizePage();
      }
    });
    onBeforeUnmount(function() {
      if (f7Messagebar && f7Messagebar.destroy)
        f7Messagebar.destroy();
      f7Messagebar = null;
    });
    var classes = computed(function() {
      return classNames("toolbar", "messagebar", {
        "messagebar-attachments-visible": props.attachmentsVisible,
        "messagebar-sheet-visible": props.sheetVisible
      }, colorClasses(props));
    });
    return function() {
      var valueProps = {};
      if ("value" in props)
        valueProps.value = props.value;
      var slotsDefault = slots.default, slotsBeforeInner = slots["before-inner"], slotsAfterInner = slots["after-inner"], slotsSendLink = slots["send-link"], slotsInnerStart = slots["inner-start"], slotsInnerEnd = slots["inner-end"], slotsBeforeArea = slots["before-area"], slotsAfterArea = slots["after-area"];
      var innerEndEls = [];
      var messagebarAttachmentsEl;
      var messagebarSheetEl;
      if (slotsDefault) {
        slotsDefault().forEach(function(vnode) {
          if (typeof vnode === "undefined")
            return;
          var tag = vnode.type && vnode.type.name ? vnode.type.name : vnode.type;
          if (tag && (tag.indexOf("messagebar-attachments") >= 0 || tag === "F7MessagebarAttachments" || tag === "f7-messagebar-attachments")) {
            messagebarAttachmentsEl = vnode;
          } else if (tag && (tag.indexOf("messagebar-sheet") >= 0 || tag === "F7MessagebarSheet" || tag === "f7-messagebar-sheet")) {
            messagebarSheetEl = vnode;
          } else {
            innerEndEls.push(vnode);
          }
        });
      }
      return h("div", {
        class: classes.value,
        ref: elRef
      }, [slotsBeforeInner && slotsBeforeInner(), h("div", {
        class: "toolbar-inner"
      }, [slotsInnerStart && slotsInnerStart(), h("div", {
        class: "messagebar-area"
      }, [slotsBeforeArea && slotsBeforeArea(), messagebarAttachmentsEl, h(input_default, _extends56({
        id: props.textareaId,
        ref: areaElRef,
        type: "textarea",
        wrap: false,
        placeholder: props.placeholder,
        disabled: props.disabled,
        name: props.name,
        readonly: props.readonly,
        resizable: props.resizable,
        onInput,
        onChange,
        onFocus,
        onBlur
      }, valueProps)), slotsAfterArea && slotsAfterArea()]), (props.sendLink && props.sendLink.length > 0 || slotsSendLink) && h(link_default, {
        onClick
      }, [slotsSendLink ? slotsSendLink() : props.sendLink]), slotsInnerEnd && slotsInnerEnd(), innerEndEls]), slotsAfterInner && slotsAfterInner(), messagebarSheetEl]);
    };
  }
};

// node_modules/framework7-vue/esm/components/messages-title.js
function _extends57() {
  _extends57 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends57.apply(this, arguments);
}
function render53(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var messages_title_default = {
  name: "f7-messages-title",
  render: render53,
  props: _extends57({}, colorProps),
  setup: function setup59(props) {
    var classes = computed(function() {
      return classNames("messages-title", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/messages.js
function _extends58() {
  _extends58 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends58.apply(this, arguments);
}
function render54(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var messages_default = {
  name: "f7-messages",
  render: render54,
  props: _extends58({
    autoLayout: {
      type: Boolean,
      default: false
    },
    messages: {
      type: Array,
      default: function _default47() {
        return [];
      }
    },
    newMessagesFirst: {
      type: Boolean,
      default: false
    },
    scrollMessages: {
      type: Boolean,
      default: true
    },
    scrollMessagesOnEdge: {
      type: Boolean,
      default: true
    },
    typing: {
      type: Boolean,
      default: false
    },
    firstMessageRule: Function,
    lastMessageRule: Function,
    tailMessageRule: Function,
    sameNameMessageRule: Function,
    sameHeaderMessageRule: Function,
    sameFooterMessageRule: Function,
    sameAvatarMessageRule: Function,
    customClassMessageRule: Function,
    renderMessage: Function,
    init: {
      type: Boolean,
      default: true
    }
  }, colorProps),
  setup: function setup60(props) {
    var f7Messages = null;
    var childrenBeforeUpdated = null;
    var elRef = ref(null);
    onMounted(function() {
      if (!props.init)
        return;
      f7ready(function() {
        f7Messages = f7.messages.create(noUndefinedProps({
          el: elRef.value,
          autoLayout: props.autoLayout,
          messages: props.messages,
          newMessagesFirst: props.newMessagesFirst,
          scrollMessages: props.scrollMessages,
          scrollMessagesOnEdge: props.scrollMessagesOnEdge,
          firstMessageRule: props.firstMessageRule,
          lastMessageRule: props.lastMessageRule,
          tailMessageRule: props.tailMessageRule,
          sameNameMessageRule: props.sameNameMessageRule,
          sameHeaderMessageRule: props.sameHeaderMessageRule,
          sameFooterMessageRule: props.sameFooterMessageRule,
          sameAvatarMessageRule: props.sameAvatarMessageRule,
          customClassMessageRule: props.customClassMessageRule,
          renderMessage: props.renderMessage
        }));
        if (f7Messages && props.typing) {
          f7Messages.showTyping();
        }
      });
    });
    onBeforeUpdate(function() {
      if (!props.init || !elRef.value)
        return;
      var children = elRef.value.children;
      if (!children)
        return;
      childrenBeforeUpdated = children.length;
      for (var i = 0; i < children.length; i += 1) {
        children[i].classList.add("message-appeared");
      }
    });
    onUpdated(function() {
      if (!props.init)
        return;
      if (!elRef.value)
        return;
      var children = elRef.value.children;
      if (!children)
        return;
      var childerAftterUpdated = children.length;
      for (var i = 0; i < children.length; i += 1) {
        if (!children[i].classList.contains("message-appeared")) {
          children[i].classList.add("message-appear-from-bottom");
        }
      }
      if (f7Messages && f7Messages.layout && props.autoLayout) {
        f7Messages.layout();
      }
      if (childerAftterUpdated !== childrenBeforeUpdated && f7Messages && f7Messages.scroll && props.scrollMessages) {
        f7Messages.scroll();
      }
    });
    onBeforeUnmount(function() {
      if (f7Messages && f7Messages.destroy)
        f7Messages.destroy();
      f7Messages = null;
    });
    watch(function() {
      return props.typing;
    }, function(newValue) {
      if (!f7Messages)
        return;
      if (newValue)
        f7Messages.showTyping();
      else
        f7Messages.hideTyping();
    });
    var classes = computed(function() {
      return classNames("messages", colorClasses(props));
    });
    return {
      elRef,
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/nav-left.js
function _extends59() {
  _extends59 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends59.apply(this, arguments);
}
function render55(_ctx, _cache) {
  var _component_f7_link = resolveComponent("f7-link");
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [_ctx.backLink ? (openBlock(), createBlock(_component_f7_link, {
    key: 0,
    href: _ctx.backLinkUrl || "#",
    back: "",
    icon: "icon-back",
    force: _ctx.backLinkForce || void 0,
    class: !_ctx.text ? "icon-only" : void 0,
    text: _ctx.text,
    onClick: _ctx.onBackClick
  }, null, 8, ["href", "force", "class", "text", "onClick"])) : createCommentVNode("", true), renderSlot(_ctx.$slots, "default")], 2);
}
var nav_left_default = {
  name: "f7-nav-left",
  render: render55,
  components: {
    f7Link: link_default
  },
  props: _extends59({
    backLink: [Boolean, String],
    backLinkUrl: String,
    backLinkForce: Boolean,
    backLinkShowText: {
      type: Boolean,
      default: void 0
    },
    sliding: Boolean
  }, colorProps),
  emits: ["back:click", "click:back"],
  setup: function setup61(props, _ref) {
    var emit = _ref.emit;
    var onBackClick = function onBackClick2(event) {
      emit("back:click", event);
      emit("click:back", event);
    };
    var theme2 = useTheme();
    var text = computed(function() {
      var needBackLinkText = props.backLinkShowText;
      if (typeof needBackLinkText === "undefined")
        needBackLinkText = !theme2.value.md;
      if (props.backLink) {
        return props.backLink !== true && needBackLinkText ? props.backLink : void 0;
      }
      return void 0;
    });
    var classes = computed(function() {
      return classNames("left", {
        sliding: props.sliding
      }, colorClasses(props));
    });
    return {
      classes,
      onBackClick,
      text
    };
  }
};

// node_modules/framework7-vue/esm/components/nav-right.js
function _extends60() {
  _extends60 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends60.apply(this, arguments);
}
function render56(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var nav_right_default = {
  name: "f7-nav-right",
  render: render56,
  props: _extends60({
    sliding: Boolean
  }, colorProps),
  setup: function setup62(props) {
    var classes = computed(function() {
      return classNames("right", {
        sliding: props.sliding
      }, colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/nav-title-large.js
function _extends61() {
  _extends61 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends61.apply(this, arguments);
}
var _hoisted_117 = {
  class: "title-large-text"
};
function render57(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [createVNode("div", _hoisted_117, [renderSlot(_ctx.$slots, "default")])], 2);
}
var nav_title_large_default = {
  name: "f7-nav-title-large",
  render: render57,
  props: _extends61({}, colorProps),
  setup: function setup63(props) {
    var classes = computed(function() {
      return classNames("title-large", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/nav-title.js
function _extends62() {
  _extends62 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends62.apply(this, arguments);
}
var _hoisted_118 = {
  key: 0,
  class: "subtitle"
};
function render58(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default"), createTextVNode(" " + toDisplayString(_ctx.title) + " ", 1), _ctx.subtitle ? (openBlock(), createBlock("span", _hoisted_118, toDisplayString(_ctx.subtitle), 1)) : createCommentVNode("", true)], 2);
}
var nav_title_default = {
  name: "f7-nav-title",
  render: render58,
  props: _extends62({
    title: String,
    subtitle: String,
    sliding: Boolean
  }, colorProps),
  setup: function setup64(props) {
    var classes = computed(function() {
      return classNames("title", {
        sliding: props.sliding
      }, colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/navbar.js
function _extends63() {
  _extends63 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends63.apply(this, arguments);
}
var _hoisted_119 = createVNode("div", {
  class: "navbar-bg"
}, null, -1);
var _hoisted_26 = {
  key: 3,
  className: "title-large"
};
var _hoisted_34 = {
  className: "title-large-text"
};
function render59(_ctx, _cache) {
  var _component_f7_nav_left = resolveComponent("f7-nav-left");
  var _component_f7_nav_title = resolveComponent("f7-nav-title");
  var _component_f7_nav_right = resolveComponent("f7-nav-right");
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [_hoisted_119, renderSlot(_ctx.$slots, "before-inner"), createVNode("div", {
    class: _ctx.innerClasses
  }, [_ctx.hasLeft ? (openBlock(), createBlock(_component_f7_nav_left, {
    key: 0,
    "back-link": _ctx.backLink,
    "back-link-url": _ctx.backLinkUrl,
    "back-link-force": _ctx.backLinkForce,
    "back-link-show-text": _ctx.backLinkShowText,
    "onBack:click": _ctx.onBackClick
  }, {
    default: withCtx(function() {
      return [renderSlot(_ctx.$slots, "nav-left"), renderSlot(_ctx.$slots, "left")];
    }),
    _: 3
  }, 8, ["back-link", "back-link-url", "back-link-force", "back-link-show-text", "onBack:click"])) : createCommentVNode("", true), _ctx.hasTitle ? (openBlock(), createBlock(_component_f7_nav_title, {
    key: 1,
    title: _ctx.title,
    subtitle: _ctx.subtitle
  }, {
    default: withCtx(function() {
      return [renderSlot(_ctx.$slots, "title")];
    }),
    _: 3
  }, 8, ["title", "subtitle"])) : createCommentVNode("", true), _ctx.hasRight ? (openBlock(), createBlock(_component_f7_nav_right, {
    key: 2
  }, {
    default: withCtx(function() {
      return [renderSlot(_ctx.$slots, "nav-right"), renderSlot(_ctx.$slots, "right")];
    }),
    _: 3
  })) : createCommentVNode("", true), _ctx.hasLargeTitle ? (openBlock(), createBlock("div", _hoisted_26, [createVNode("div", _hoisted_34, [createTextVNode(toDisplayString(_ctx.largeTitle) + " ", 1), renderSlot(_ctx.$slots, "title-large")])])) : createCommentVNode("", true), renderSlot(_ctx.$slots, "default")], 2), renderSlot(_ctx.$slots, "after-inner")], 2);
}
var navbar_default2 = {
  name: "f7-navbar",
  render: render59,
  components: {
    f7NavLeft: nav_left_default,
    f7NavTitle: nav_title_default,
    f7NavRight: nav_right_default
  },
  props: _extends63({
    backLink: [Boolean, String],
    backLinkUrl: String,
    backLinkForce: Boolean,
    backLinkShowText: {
      type: Boolean,
      default: void 0
    },
    sliding: {
      type: Boolean,
      default: true
    },
    title: String,
    subtitle: String,
    hidden: Boolean,
    noShadow: Boolean,
    noHairline: Boolean,
    innerClass: String,
    innerClassName: String,
    large: Boolean,
    largeTransparent: Boolean,
    transparent: Boolean,
    titleLarge: String
  }, colorProps),
  emits: ["navbar:hide", "navbar:show", "navbar:expand", "navbar:collapse", "navbar:transparentshow", "navbar:transparenthide", "click:back", "back:click"],
  setup: function setup65(props, _ref) {
    var emit = _ref.emit, slots = _ref.slots;
    var routerPositionClass = "";
    var largeCollapsed = false;
    var routerNavbarRole = null;
    var routerNavbarRoleDetailRoot = false;
    var routerNavbarMasterStack = false;
    var transparentVisible = false;
    var elRef = ref(null);
    var theme2 = useTheme();
    var onHide = function onHide2(navbarEl) {
      if (elRef.value !== navbarEl)
        return;
      emit("navbar:hide");
    };
    var onShow = function onShow2(navbarEl) {
      if (elRef.value !== navbarEl)
        return;
      emit("navbar:show");
    };
    var onExpand = function onExpand2(navbarEl) {
      if (elRef.value !== navbarEl)
        return;
      largeCollapsed = false;
      emit("navbar:expand");
    };
    var onCollapse = function onCollapse2(navbarEl) {
      if (elRef.value !== navbarEl)
        return;
      largeCollapsed = true;
      emit("navbar:collapse");
    };
    var onNavbarTransparentShow = function onNavbarTransparentShow2(navbarEl) {
      if (elRef.value !== navbarEl)
        return;
      transparentVisible = true;
      emit("navbar:transparentshow");
    };
    var onNavbarTransparentHide = function onNavbarTransparentHide2(navbarEl) {
      if (elRef.value !== navbarEl)
        return;
      transparentVisible = false;
      emit("navbar:transparenthide");
    };
    var onNavbarPosition = function onNavbarPosition2(navbarEl, position) {
      if (elRef.value !== navbarEl)
        return;
      routerPositionClass = position ? "navbar-" + position : "";
    };
    var onNavbarRole = function onNavbarRole2(navbarEl, rolesData) {
      if (elRef.value !== navbarEl)
        return;
      routerNavbarRole = rolesData.role;
      routerNavbarRoleDetailRoot = rolesData.detailRoot;
    };
    var onNavbarMasterStack = function onNavbarMasterStack2(navbarEl) {
      if (elRef.value !== navbarEl)
        return;
      routerNavbarMasterStack = true;
    };
    var onNavbarMasterUnstack = function onNavbarMasterUnstack2(navbarEl) {
      if (elRef.value !== navbarEl)
        return;
      routerNavbarMasterStack = false;
    };
    var hide = function hide2(animate) {
      if (!f7)
        return;
      f7.navbar.hide(elRef.value, animate);
    };
    var show = function show2(animate) {
      if (!f7)
        return;
      f7.navbar.show(elRef.value, animate);
    };
    var size = function size2() {
      if (!f7)
        return;
      f7.navbar.size(elRef.value);
    };
    var onBackClick = function onBackClick2(event) {
      emit("back:click", event);
      emit("click:back", event);
    };
    onMounted(function() {
      if (!elRef.value)
        return;
      f7ready(function() {
        f7.navbar.size(elRef.value);
        f7.on("navbarShow", onShow);
        f7.on("navbarHide", onHide);
        f7.on("navbarCollapse", onCollapse);
        f7.on("navbarExpand", onExpand);
        f7.on("navbarPosition", onNavbarPosition);
        f7.on("navbarRole", onNavbarRole);
        f7.on("navbarMasterStack", onNavbarMasterStack);
        f7.on("navbarMasterUnstack", onNavbarMasterUnstack);
        f7.on("navbarTransparentShow", onNavbarTransparentShow);
        f7.on("navbarTransparentHide", onNavbarTransparentHide);
      });
    });
    onBeforeUnmount(function() {
      if (!f7)
        return;
      f7.off("navbarShow", onShow);
      f7.off("navbarHide", onHide);
      f7.off("navbarCollapse", onCollapse);
      f7.off("navbarExpand", onExpand);
      f7.off("navbarPosition", onNavbarPosition);
      f7.off("navbarRole", onNavbarRole);
      f7.off("navbarMasterStack", onNavbarMasterStack);
      f7.off("navbarMasterUnstack", onNavbarMasterUnstack);
      f7.off("navbarTransparentShow", onNavbarTransparentShow);
      f7.off("navbarTransparentHide", onNavbarTransparentHide);
    });
    var addLeftTitleClass = computed(function() {
      return theme2.value && theme2.value.ios && f7 && !f7.params.navbar.iosCenterTitle;
    });
    var addCenterTitleClass = computed(function() {
      return theme2.value && theme2.value.md && f7 && f7.params.navbar.mdCenterTitle || theme2.value && theme2.value.aurora && f7 && f7.params.navbar.auroraCenterTitle;
    });
    var isLarge = computed(function() {
      return props.large || props.largeTransparent;
    });
    var isTransparent = computed(function() {
      return props.transparent || isLarge.value && props.largeTransparent;
    });
    var isTransparentVisible = computed(function() {
      return isTransparent.value && transparentVisible;
    });
    var classes = computed(function() {
      return classNames("navbar", routerPositionClass, {
        "navbar-hidden": props.hidden,
        "navbar-large": isLarge.value,
        "navbar-large-collapsed": isLarge.value && largeCollapsed,
        "navbar-transparent": isTransparent.value,
        "navbar-transparent-visible": isTransparentVisible.value,
        "navbar-master": routerNavbarRole === "master",
        "navbar-master-detail": routerNavbarRole === "detail",
        "navbar-master-detail-root": routerNavbarRoleDetailRoot === true,
        "navbar-master-stacked": routerNavbarMasterStack === true,
        "no-shadow": props.noShadow,
        "no-hairline": props.noHairline
      }, colorClasses(props));
    });
    var largeTitle = computed(function() {
      var largeTitleText = props.titleLarge;
      if (!largeTitleText && props.large && props.title)
        largeTitleText = props.title;
      return largeTitleText;
    });
    var hasLeft = computed(function() {
      return props.backLink || slots["nav-left"] || slots.left;
    });
    var hasTitle = computed(function() {
      return props.title || props.subtitle || slots.title;
    });
    var hasRight = computed(function() {
      return slots["nav-right"] || slots.right;
    });
    var hasLargeTitle = computed(function() {
      return largeTitle.value || slots["title-large"];
    });
    var innerClasses = computed(function() {
      return classNames("navbar-inner", props.innerClass, props.innerClassName, {
        sliding: props.sliding,
        "navbar-inner-left-title": addLeftTitleClass.value,
        "navbar-inner-centered-title": addCenterTitleClass.value
      });
    });
    return {
      elRef,
      classes,
      innerClasses,
      hide,
      show,
      size,
      largeTitle,
      hasLeft,
      hasTitle,
      hasRight,
      hasLargeTitle,
      onBackClick
    };
  }
};

// node_modules/framework7-vue/esm/components/page-content.js
function _extends64() {
  _extends64 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends64.apply(this, arguments);
}
var _hoisted_120 = {
  key: 0,
  class: "ptr-preloader"
};
var _hoisted_27 = createVNode("div", {
  class: "ptr-arrow"
}, null, -1);
var _hoisted_35 = {
  key: 3,
  class: "ptr-preloader"
};
var _hoisted_43 = createVNode("div", {
  class: "ptr-arrow"
}, null, -1);
function render60(_ctx, _cache) {
  var _component_f7_preloader = resolveComponent("f7-preloader");
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes,
    "data-ptr-distance": _ctx.ptrDistance || void 0,
    "data-ptr-mousewheel": _ctx.ptrMousewheel || void 0,
    "data-infinite-distance": _ctx.infiniteDistance || void 0
  }, [_ctx.ptr && _ctx.ptrPreloader && !_ctx.ptrBottom ? (openBlock(), createBlock("div", _hoisted_120, [createVNode(_component_f7_preloader), _hoisted_27])) : createCommentVNode("", true), _ctx.infinite && _ctx.infinitePreloader && _ctx.infiniteTop ? (openBlock(), createBlock(_component_f7_preloader, {
    key: 1,
    class: "infinite-scroll-preloader"
  })) : createCommentVNode("", true), renderSlot(_ctx.$slots, "default"), _ctx.infinite && _ctx.infinitePreloader && !_ctx.infiniteTop ? (openBlock(), createBlock(_component_f7_preloader, {
    key: 2,
    class: "infinite-scroll-preloader"
  })) : createCommentVNode("", true), _ctx.ptr && _ctx.ptrPreloader && _ctx.ptrBottom ? (openBlock(), createBlock("div", _hoisted_35, [createVNode(_component_f7_preloader), _hoisted_43])) : createCommentVNode("", true)], 10, ["data-ptr-distance", "data-ptr-mousewheel", "data-infinite-distance"]);
}
var page_content_default = {
  name: "f7-page-content",
  render: render60,
  components: {
    f7Preloader: preloader_default
  },
  props: _extends64({
    tab: Boolean,
    tabActive: Boolean,
    ptr: Boolean,
    ptrDistance: Number,
    ptrPreloader: {
      type: Boolean,
      default: true
    },
    ptrBottom: Boolean,
    ptrMousewheel: Boolean,
    infinite: Boolean,
    infiniteTop: Boolean,
    infiniteDistance: Number,
    infinitePreloader: {
      type: Boolean,
      default: true
    },
    hideBarsOnScroll: Boolean,
    hideNavbarOnScroll: Boolean,
    hideToolbarOnScroll: Boolean,
    messagesContent: Boolean,
    loginScreen: Boolean
  }, colorProps),
  emits: ["ptr:pullstart", "ptr:pullmove", "ptr:pullend", "ptr:refresh", "ptr:done", "infinite", "ptrPullStart", "ptrPullMove", "ptrPullEnd", "ptrRefresh", "ptrDone", "tab:hide", "tab:show"],
  setup: function setup66(props, _ref) {
    var emit = _ref.emit;
    var elRef = ref(null);
    var onPtrPullStart = function onPtrPullStart2(el) {
      if (elRef.value !== el)
        return;
      emit("ptr:pullstart");
      emit("ptrPullStart");
    };
    var onPtrPullMove = function onPtrPullMove2(el) {
      if (elRef.value !== el)
        return;
      emit("ptr:pullmove");
      emit("ptrPullMove");
    };
    var onPtrPullEnd = function onPtrPullEnd2(el) {
      if (elRef.value !== el)
        return;
      emit("ptr:pullend");
      emit("ptrPullEnd");
    };
    var onPtrRefresh = function onPtrRefresh2(el, done) {
      if (elRef.value !== el)
        return;
      emit("ptr:refresh", done);
      emit("ptrRefresh", done);
    };
    var onPtrDone = function onPtrDone2(el) {
      if (elRef.value !== el)
        return;
      emit("ptr:done");
      emit("ptrDone");
    };
    var onInfinite = function onInfinite2(el) {
      if (elRef.value !== el)
        return;
      emit("infinite");
    };
    useTab(elRef, emit);
    onMounted(function() {
      f7ready(function() {
        if (props.ptr) {
          f7.on("ptrPullStart", onPtrPullStart);
          f7.on("ptrPullMove", onPtrPullMove);
          f7.on("ptrPullEnd", onPtrPullEnd);
          f7.on("ptrRefresh", onPtrRefresh);
          f7.on("ptrDone", onPtrDone);
        }
        if (props.infinite) {
          f7.on("infinite", onInfinite);
        }
      });
    });
    onBeforeUnmount(function() {
      if (!f7)
        return;
      f7.off("ptrPullStart", onPtrPullStart);
      f7.off("ptrPullMove", onPtrPullMove);
      f7.off("ptrPullEnd", onPtrPullEnd);
      f7.off("ptrRefresh", onPtrRefresh);
      f7.off("ptrDone", onPtrDone);
      f7.off("infinite", onInfinite);
    });
    var classes = computed(function() {
      return classNames("page-content", {
        tab: props.tab,
        "tab-active": props.tabActive,
        "ptr-content": props.ptr,
        "ptr-bottom": props.ptrBottom,
        "infinite-scroll-content": props.infinite,
        "infinite-scroll-top": props.infiniteTop,
        "hide-bars-on-scroll": props.hideBarsOnScroll,
        "hide-navbar-on-scroll": props.hideNavbarOnScroll,
        "hide-toolbar-on-scroll": props.hideToolbarOnScroll,
        "messages-content": props.messagesContent,
        "login-screen-content": props.loginScreen
      }, colorClasses(props));
    });
    return {
      elRef,
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/page.js
function _extends65() {
  _extends65 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends65.apply(this, arguments);
}
var page_default = {
  name: "f7-page",
  props: _extends65({
    name: String,
    stacked: Boolean,
    withSubnavbar: {
      type: Boolean,
      default: void 0
    },
    subnavbar: {
      type: Boolean,
      default: void 0
    },
    withNavbarLarge: {
      type: Boolean,
      default: void 0
    },
    navbarLarge: {
      type: Boolean,
      default: void 0
    },
    noNavbar: Boolean,
    noToolbar: Boolean,
    tabs: Boolean,
    pageContent: {
      type: Boolean,
      default: true
    },
    noSwipeback: Boolean,
    ptr: Boolean,
    ptrDistance: Number,
    ptrPreloader: {
      type: Boolean,
      default: true
    },
    ptrBottom: Boolean,
    ptrMousewheel: Boolean,
    infinite: Boolean,
    infiniteTop: Boolean,
    infiniteDistance: Number,
    infinitePreloader: {
      type: Boolean,
      default: true
    },
    hideBarsOnScroll: Boolean,
    hideNavbarOnScroll: Boolean,
    hideToolbarOnScroll: Boolean,
    messagesContent: Boolean,
    loginScreen: Boolean
  }, colorProps),
  emits: ["page:mounted", "page:init", "page:reinit", "page:beforein", "page:beforeout", "page:afterout", "page:afterin", "page:beforeremove", "page:beforeunmount", "page:tabshow", "page:tabhide", "ptr:pullstart", "ptr:pullmove", "ptr:pullend", "ptr:refresh", "ptr:done", "infinite"],
  setup: function setup67(props, _ref) {
    var emit = _ref.emit, slots = _ref.slots;
    var hasSubnavbar = false;
    var hasNavbarLarge = false;
    var hasNavbarLargeCollapsed = false;
    var hasCardExpandableOpened = false;
    var routerPositionClass = "";
    var routerForceUnstack = false;
    var routerPageRole = null;
    var routerPageRoleDetailRoot = false;
    var routerPageMasterStack = false;
    var elRef = ref(null);
    var onPageMounted = function onPageMounted2(page) {
      if (elRef.value !== page.el)
        return;
      emit("page:mounted", page);
    };
    var onPageInit = function onPageInit2(page) {
      if (elRef.value !== page.el)
        return;
      if (typeof props.withSubnavbar === "undefined" && typeof props.subnavbar === "undefined") {
        if (page.$navbarEl && page.$navbarEl.length && page.$navbarEl.find(".subnavbar").length || page.$el.children(".navbar").find(".subnavbar").length) {
          hasSubnavbar = true;
        }
      }
      if (typeof props.withNavbarLarge === "undefined" && typeof props.navbarLarge === "undefined") {
        if (page.$navbarEl && page.$navbarEl.hasClass("navbar-large")) {
          hasNavbarLarge = true;
        }
      }
      emit("page:init", page);
    };
    var onPageReinit = function onPageReinit2(page) {
      if (elRef.value !== page.el)
        return;
      emit("page:reinit", page);
    };
    var onPageBeforeIn = function onPageBeforeIn2(page) {
      if (elRef.value !== page.el)
        return;
      if (!page.swipeBack) {
        if (page.from === "next") {
          routerPositionClass = "page-next";
        }
        if (page.from === "previous") {
          routerPositionClass = "page-previous";
        }
      }
      emit("page:beforein", page);
    };
    var onPageBeforeOut = function onPageBeforeOut2(page) {
      if (elRef.value !== page.el)
        return;
      emit("page:beforeout", page);
    };
    var onPageAfterOut = function onPageAfterOut2(page) {
      if (elRef.value !== page.el)
        return;
      if (page.to === "next") {
        routerPositionClass = "page-next";
      }
      if (page.to === "previous") {
        routerPositionClass = "page-previous";
      }
      emit("page:afterout", page);
    };
    var onPageAfterIn = function onPageAfterIn2(page) {
      if (elRef.value !== page.el)
        return;
      routerPositionClass = "page-current";
      emit("page:afterin", page);
    };
    var onPageBeforeRemove = function onPageBeforeRemove2(page) {
      if (elRef.value !== page.el)
        return;
      emit("page:beforeremove", page);
    };
    var onPageBeforeUnmount = function onPageBeforeUnmount2(page) {
      if (elRef.value !== page.el)
        return;
      emit("page:beforeunmount", page);
    };
    var onPageStack = function onPageStack2(pageEl) {
      if (elRef.value !== pageEl)
        return;
      routerForceUnstack = false;
    };
    var onPageUnstack = function onPageUnstack2(pageEl) {
      if (elRef.value !== pageEl)
        return;
      routerForceUnstack = true;
    };
    var onPagePosition = function onPagePosition2(pageEl, position) {
      if (elRef.value !== pageEl)
        return;
      routerPositionClass = "page-" + position;
    };
    var onPageRole = function onPageRole2(pageEl, rolesData) {
      if (elRef.value !== pageEl)
        return;
      routerPageRole = rolesData.role;
      routerPageRoleDetailRoot = rolesData.detailRoot;
    };
    var onPageMasterStack = function onPageMasterStack2(pageEl) {
      if (elRef.value !== pageEl)
        return;
      routerPageMasterStack = true;
    };
    var onPageMasterUnstack = function onPageMasterUnstack2(pageEl) {
      if (elRef.value !== pageEl)
        return;
      routerPageMasterStack = false;
    };
    var onPageNavbarLargeCollapsed = function onPageNavbarLargeCollapsed2(pageEl) {
      if (elRef.value !== pageEl)
        return;
      hasNavbarLargeCollapsed = true;
    };
    var onPageNavbarLargeExpanded = function onPageNavbarLargeExpanded2(pageEl) {
      if (elRef.value !== pageEl)
        return;
      hasNavbarLargeCollapsed = false;
    };
    var onCardOpened = function onCardOpened2(cardEl, pageEl) {
      if (elRef.value !== pageEl)
        return;
      hasCardExpandableOpened = true;
    };
    var onCardClose = function onCardClose2(cardEl, pageEl) {
      if (elRef.value !== pageEl)
        return;
      hasCardExpandableOpened = false;
    };
    var onPageTabShow = function onPageTabShow2(pageEl) {
      if (elRef.value !== pageEl)
        return;
      emit("page:tabshow");
    };
    var onPageTabHide = function onPageTabHide2(pageEl) {
      if (elRef.value !== pageEl)
        return;
      emit("page:tabhide");
    };
    var onPtrPullStart = function onPtrPullStart2() {
      emit("ptr:pullstart");
    };
    var onPtrPullMove = function onPtrPullMove2() {
      emit("ptr:pullmove");
    };
    var onPtrPullEnd = function onPtrPullEnd2() {
      emit("ptr:pullend");
    };
    var onPtrRefresh = function onPtrRefresh2(done) {
      emit("ptr:refresh", done);
    };
    var onPtrDone = function onPtrDone2() {
      emit("ptr:done");
    };
    var onInfinite = function onInfinite2() {
      emit("infinite");
    };
    onMounted(function() {
      f7ready(function() {
        f7.on("pageMounted", onPageMounted);
        f7.on("pageInit", onPageInit);
        f7.on("pageReinit", onPageReinit);
        f7.on("pageBeforeIn", onPageBeforeIn);
        f7.on("pageBeforeOut", onPageBeforeOut);
        f7.on("pageAfterOut", onPageAfterOut);
        f7.on("pageAfterIn", onPageAfterIn);
        f7.on("pageBeforeRemove", onPageBeforeRemove);
        f7.on("pageBeforeUnmount", onPageBeforeUnmount);
        f7.on("pageStack", onPageStack);
        f7.on("pageUnstack", onPageUnstack);
        f7.on("pagePosition", onPagePosition);
        f7.on("pageRole", onPageRole);
        f7.on("pageMasterStack", onPageMasterStack);
        f7.on("pageMasterUnstack", onPageMasterUnstack);
        f7.on("pageNavbarLargeCollapsed", onPageNavbarLargeCollapsed);
        f7.on("pageNavbarLargeExpanded", onPageNavbarLargeExpanded);
        f7.on("cardOpened", onCardOpened);
        f7.on("cardClose", onCardClose);
        f7.on("pageTabShow", onPageTabShow);
        f7.on("pageTabHide", onPageTabHide);
      });
    });
    onBeforeUnmount(function() {
      if (!f7)
        return;
      f7.off("pageMounted", onPageMounted);
      f7.off("pageInit", onPageInit);
      f7.off("pageReinit", onPageReinit);
      f7.off("pageBeforeIn", onPageBeforeIn);
      f7.off("pageBeforeOut", onPageBeforeOut);
      f7.off("pageAfterOut", onPageAfterOut);
      f7.off("pageAfterIn", onPageAfterIn);
      f7.off("pageBeforeRemove", onPageBeforeRemove);
      f7.off("pageBeforeUnmount", onPageBeforeUnmount);
      f7.off("pageStack", onPageStack);
      f7.off("pageUnstack", onPageUnstack);
      f7.off("pagePosition", onPagePosition);
      f7.off("pageRole", onPageRole);
      f7.off("pageMasterStack", onPageMasterStack);
      f7.off("pageMasterUnstack", onPageMasterUnstack);
      f7.off("pageNavbarLargeCollapsed", onPageNavbarLargeCollapsed);
      f7.off("pageNavbarLargeExpanded", onPageNavbarLargeExpanded);
      f7.off("cardOpened", onCardOpened);
      f7.off("cardClose", onCardClose);
      f7.off("pageTabShow", onPageTabShow);
      f7.off("pageTabHide", onPageTabHide);
    });
    var classes = computed(function() {
      return classNames("page", routerPositionClass, {
        stacked: props.stacked && !routerForceUnstack,
        tabs: props.tabs,
        "page-with-subnavbar": props.subnavbar || props.withSubnavbar,
        "page-with-navbar-large": props.navbarLarge || props.withNavbarLarge,
        "no-navbar": props.noNavbar,
        "no-toolbar": props.noToolbar,
        "no-swipeback": props.noSwipeback,
        "page-master": routerPageRole === "master",
        "page-master-detail": routerPageRole === "detail",
        "page-master-detail-root": routerPageRoleDetailRoot === true,
        "page-master-stacked": routerPageMasterStack === true,
        "page-with-navbar-large-collapsed": hasNavbarLargeCollapsed === true,
        "page-with-card-opened": hasCardExpandableOpened === true,
        "login-screen-page": props.loginScreen
      }, colorClasses(props));
    });
    var fixedTags = "navbar toolbar tabbar subnavbar searchbar messagebar fab list-index panel".split(" ").map(function(tagName) {
      return "f7-" + tagName;
    });
    return function() {
      var fixedList = [];
      var staticList = [];
      var slotsStatic = slots.static, slotsFixed = slots.fixed, slotsDefault = slots.default;
      var hasSubnavbarComputed = false;
      var hasNavbarLargeComputed = false;
      var hasMessages = props.messagesContent;
      var slotsDefaultRendered = slotsDefault && slotsDefault();
      if (slotsDefaultRendered) {
        slotsDefaultRendered.forEach(function(vnode) {
          if (typeof vnode === "undefined")
            return;
          var tag = vnode.type && vnode.type.name ? vnode.type.name : vnode.type;
          var isFixedTag = false;
          if (!tag) {
            if (props.pageContent || props.pageContent === "")
              staticList.push(vnode);
            return;
          }
          if (tag === "f7-subnavbar")
            hasSubnavbarComputed = true;
          if (tag === "f7-navbar") {
            if (vnode.props && (vnode.props.large || vnode.props.large === ""))
              hasNavbarLargeComputed = true;
          }
          if (typeof hasMessages === "undefined" && tag === "f7-messages")
            hasMessages = true;
          if (fixedTags.indexOf(tag) >= 0) {
            isFixedTag = true;
          }
          if (props.pageContent) {
            if (isFixedTag)
              fixedList.push(vnode);
            else
              staticList.push(vnode);
          }
        });
      }
      var classesValue = classes.value;
      if ((hasSubnavbarComputed || hasSubnavbar) && typeof props.subnavbar === "undefined" && typeof props.withSubnavbar === "undefined" && classesValue.indexOf("page-with-subnavbar") < 0) {
        classesValue += " page-with-subnavbar";
      }
      if ((hasNavbarLargeComputed || hasNavbarLarge) && typeof props.navbarLarge === "undefined" && typeof props.withNavbarLarge === "undefined" && classesValue.indexOf("page-with-navbar-large") < 0) {
        classesValue += " page-with-navbar-large";
      }
      if (!props.pageContent) {
        return h("div", {
          class: classesValue,
          ref: elRef,
          "data-name": props.name
        }, [slotsFixed && slotsFixed(), slotsStatic && slotsStatic(), slotsDefault && slotsDefaultRendered]);
      }
      return h("div", {
        class: classesValue,
        ref: elRef,
        "data-name": props.name
      }, [fixedList, slotsFixed && slotsFixed(), h(page_content_default, {
        ptr: props.ptr,
        ptrDistance: props.ptrDistance,
        ptrPreloader: props.ptrPreloader,
        ptrBottom: props.ptrBottom,
        ptrMousewheel: props.ptrMousewheel,
        infinite: props.infinite,
        infiniteTop: props.infiniteTop,
        infiniteDistance: props.infiniteDistance,
        infinitePreloader: props.infinitePreloader,
        hideBarsOnScroll: props.hideBarsOnScroll,
        hideNavbarOnScroll: props.hideNavbarOnScroll,
        hideToolbarOnScroll: props.hideToolbarOnScroll,
        messagesContent: props.messagesContent || hasMessages,
        loginScreen: props.loginScreen,
        onPtrPullStart,
        onPtrPullMove,
        onPtrPullEnd,
        onPtrRefresh,
        onPtrDone,
        onInfinite
      }, function() {
        return [slotsStatic && slotsStatic(), staticList];
      })]);
    };
  }
};

// node_modules/framework7-vue/esm/components/panel.js
function _extends66() {
  _extends66 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends66.apply(this, arguments);
}
var _hoisted_121 = {
  key: 0,
  class: "panel-resize-handler"
};
function render61(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default"), _ctx.resizable ? (openBlock(), createBlock("div", _hoisted_121)) : createCommentVNode("", true)], 2);
}
var panel_default = {
  name: "f7-panel",
  render: render61,
  props: _extends66({
    side: String,
    effect: String,
    cover: Boolean,
    reveal: Boolean,
    left: Boolean,
    right: Boolean,
    opened: Boolean,
    resizable: Boolean,
    backdrop: {
      type: Boolean,
      default: true
    },
    backdropEl: {
      type: String,
      default: void 0
    },
    containerEl: {
      type: String,
      default: void 0
    },
    visibleBreakpoint: {
      type: Number,
      default: void 0
    },
    collapsedBreakpoint: {
      type: Number,
      default: void 0
    },
    swipe: Boolean,
    swipeNoFollow: Boolean,
    swipeOnlyClose: Boolean,
    swipeActiveArea: {
      type: Number,
      default: 0
    },
    swipeThreshold: {
      type: Number,
      default: 0
    }
  }, colorProps),
  emits: ["panel:open", "panel:opened", "panel:close", "panel:closed", "click", "panel:backdropclick", "panel:swipe", "panel:swipeopen", "panel:breakpoint", "panel:collapsedbreakpoint", "panel:resize", "update:opened"],
  setup: function setup68(props, _ref) {
    var emit = _ref.emit;
    var f7Panel = null;
    var elRef = ref(null);
    var isOpened = false;
    var isClosing = false;
    var isCollapsed = false;
    var isBreakpoint = false;
    var onOpen = function onOpen2(event) {
      isOpened = true;
      isClosing = false;
      emit("panel:open", event);
      emit("update:opened", true);
    };
    var onOpened = function onOpened2(event) {
      emit("panel:opened", event);
    };
    var onClose = function onClose2(event) {
      isOpened = false;
      isClosing = true;
      emit("panel:close", event);
    };
    var onClosed = function onClosed2(event) {
      isClosing = false;
      emit("panel:closed", event);
      emit("update:opened", false);
    };
    var onBackdropClick = function onBackdropClick2(event) {
      emit("click", event);
      emit("panel:backdropclick", event);
    };
    var onSwipe = function onSwipe2(event) {
      emit("panel:swipe", event);
    };
    var onSwipeOpen = function onSwipeOpen2(event) {
      emit("panel:swipeopen", event);
    };
    var onBreakpoint = function onBreakpoint2(event) {
      isBreakpoint = true;
      isCollapsed = false;
      emit("panel:breakpoint", event);
    };
    var onCollapsedBreakpoint = function onCollapsedBreakpoint2(event) {
      isBreakpoint = false;
      isCollapsed = true;
      emit("panel:collapsedbreakpoint", event);
    };
    var onResize = function onResize2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      emit.apply(void 0, ["panel:resize"].concat(args));
    };
    watch(function() {
      return props.resizable;
    }, function(newValue) {
      if (!f7Panel)
        return;
      if (newValue)
        f7Panel.enableResizable();
      else
        f7Panel.disableResizable();
    });
    watch(function() {
      return props.opened;
    }, function(newValue) {
      if (!f7Panel)
        return;
      if (newValue) {
        f7Panel.open();
      } else {
        f7Panel.close();
      }
    });
    onMounted(function() {
      f7ready(function() {
        var $ = f7.$;
        if (!$)
          return;
        if ($(".panel-backdrop").length === 0) {
          $('<div class="panel-backdrop"></div>').insertBefore(elRef.value);
        }
        var params = noUndefinedProps({
          el: elRef.value,
          resizable: props.resizable,
          backdrop: props.backdrop,
          backdropEl: props.backdropEl,
          containerEl: props.containerEl,
          visibleBreakpoint: props.visibleBreakpoint,
          collapsedBreakpoint: props.collapsedBreakpoint,
          swipe: props.swipe,
          swipeNoFollow: props.swipeNoFollow,
          swipeOnlyClose: props.swipeOnlyClose,
          swipeActiveArea: props.swipeActiveArea,
          swipeThreshold: props.swipeThreshold,
          on: {
            open: onOpen,
            opened: onOpened,
            close: onClose,
            closed: onClosed,
            backdropClick: onBackdropClick,
            swipe: onSwipe,
            swipeOpen: onSwipeOpen,
            collapsedBreakpoint: onCollapsedBreakpoint,
            breakpoint: onBreakpoint,
            resize: onResize
          }
        });
        f7Panel = f7.panel.create(params);
        if (props.opened) {
          f7Panel.open(false);
        }
      });
    });
    onBeforeUnmount(function() {
      if (f7Panel && f7Panel.destroy) {
        f7Panel.destroy();
      }
      f7Panel = null;
    });
    var classes = computed(function() {
      var _classNames;
      var sideComputed = props.side || (props.left ? "left" : "right");
      var effectComputed = props.effect || (props.reveal ? "reveal" : "cover");
      return classNames("panel", (_classNames = {
        "panel-in": isOpened && !isClosing && !isBreakpoint,
        "panel-in-breakpoint": isBreakpoint,
        "panel-in-collapsed": isCollapsed,
        "panel-resizable": props.resizable
      }, _classNames["panel-" + sideComputed] = sideComputed, _classNames["panel-" + effectComputed] = effectComputed, _classNames), colorClasses(props));
    });
    return {
      elRef,
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/photo-browser.js
function _extends67() {
  _extends67 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends67.apply(this, arguments);
}
var photo_browser_default = {
  name: "f7-photo-browser",
  props: {
    init: {
      type: Boolean,
      default: true
    },
    params: Object,
    photos: Array,
    exposition: {
      type: Boolean,
      default: true
    },
    expositionHideCaptions: {
      type: Boolean,
      default: false
    },
    type: {
      type: String
    },
    navbar: {
      type: Boolean,
      default: true
    },
    toolbar: {
      type: Boolean,
      default: true
    },
    theme: {
      type: String
    },
    captionsTheme: {
      type: String
    },
    iconsColor: {
      type: String
    },
    swipeToClose: {
      type: Boolean,
      default: true
    },
    pageBackLinkText: {
      type: String,
      default: void 0
    },
    popupCloseLinkText: {
      type: String,
      default: void 0
    },
    navbarOfText: {
      type: String,
      default: void 0
    },
    navbarShowCount: {
      type: Boolean,
      default: void 0
    },
    swiper: {
      type: Object
    },
    url: {
      type: String
    },
    routableModals: {
      type: Boolean,
      default: false
    },
    virtualSlides: {
      type: Boolean,
      default: true
    },
    view: [String, Object],
    renderNavbar: Function,
    renderToolbar: Function,
    renderCaption: Function,
    renderObject: Function,
    renderLazyPhoto: Function,
    renderPhoto: Function,
    renderPage: Function,
    renderPopup: Function,
    renderStandalone: Function
  },
  emits: ["photobrowser:open", "photobrowser:close", "photobrowser:opened", "photobrowser:closed", "photobrowser:swipetoclose"],
  setup: function setup69(props, _ref) {
    var emit = _ref.emit;
    var f7PhotoBrowser = null;
    var open = function open2(index) {
      return f7PhotoBrowser.open(index);
    };
    var close = function close2() {
      return f7PhotoBrowser.close();
    };
    var expositionToggle = function expositionToggle2() {
      return f7PhotoBrowser.expositionToggle();
    };
    var expositionEnable = function expositionEnable2() {
      return f7PhotoBrowser.expositionEnable();
    };
    var expositionDisable = function expositionDisable2() {
      return f7PhotoBrowser.expositionDisable();
    };
    watch(function() {
      return props.photos;
    }, function(value) {
      var pb = f7PhotoBrowser;
      if (!pb)
        return;
      pb.params.photos = value;
      if (pb.opened && pb.swiper) {
        pb.swiper.update();
      }
    });
    onMounted(function() {
      if (!props.init)
        return;
      f7ready(function() {
        var paramsComputed;
        if (typeof props.params !== "undefined") {
          paramsComputed = props.params;
        } else {
          paramsComputed = _extends67({}, props);
          delete paramsComputed.params;
        }
        Object.keys(paramsComputed).forEach(function(param) {
          if (typeof paramsComputed[param] === "undefined" || paramsComputed[param] === "")
            delete paramsComputed[param];
        });
        paramsComputed = extend({}, paramsComputed, {
          on: {
            open: function open2() {
              emit("photobrowser:open");
            },
            close: function close2() {
              emit("photobrowser:close");
            },
            opened: function opened() {
              emit("photobrowser:opened");
            },
            closed: function closed() {
              emit("photobrowser:closed");
            },
            swipeToClose: function swipeToClose() {
              emit("photobrowser:swipetoclose");
            }
          }
        });
        f7PhotoBrowser = f7.photoBrowser.create(paramsComputed);
      });
    });
    onBeforeUnmount(function() {
      if (f7PhotoBrowser && f7PhotoBrowser.destroy)
        f7PhotoBrowser.destroy();
      f7PhotoBrowser = null;
    });
    return {
      open,
      close,
      expositionToggle,
      expositionEnable,
      expositionDisable
    };
  },
  render: function render62() {
    return null;
  }
};

// node_modules/framework7-vue/esm/components/pie-chart.js
function render63(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [(openBlock(), createBlock("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: _ctx.size,
    height: _ctx.size,
    viewBox: "-" + _ctx.size / 3 + " -" + _ctx.size / 3 + " " + _ctx.size * 2 / 3 + " " + _ctx.size * 2 / 3,
    style: {
      transform: "rotate(-90deg)"
    }
  }, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.paths, function(path, index) {
    return openBlock(), createBlock("path", {
      key: path.label || index,
      d: path.points,
      fill: path.color,
      "data-index": index,
      class: _ctx.classNames({
        "pie-chart-hidden": _ctx.currentIndex !== null && _ctx.currentIndex !== index
      }),
      onClick: function onClick($event) {
        return _ctx.setCurrentIndex(index);
      },
      onMouseenter: function onMouseenter($event) {
        return _ctx.setCurrentIndex(index);
      },
      onMouseleave: _cache[1] || (_cache[1] = function($event) {
        return _ctx.setCurrentIndex(null);
      })
    }, null, 42, ["d", "fill", "data-index", "onClick", "onMouseenter"]);
  }), 128))], 12, ["width", "height", "viewBox"])), renderSlot(_ctx.$slots, "default")], 2);
}
var pie_chart_default = {
  name: "f7-pie-chart",
  render: render63,
  props: {
    size: {
      type: Number,
      default: 320
    },
    tooltip: Boolean,
    datasets: {
      type: Array,
      default: function _default48() {
        return [];
      }
    },
    formatTooltip: Function
  },
  emits: ["select"],
  setup: function setup70(props, _ref) {
    var emit = _ref.emit;
    var elRef = ref(null);
    var f7Tooltip = null;
    var currentIndex = ref(null);
    var setCurrentIndex = function setCurrentIndex2(index) {
      currentIndex.value = index;
    };
    var summValue = computed(function() {
      var summ = 0;
      props.datasets.map(function(d) {
        return d.value || 0;
      }).forEach(function(value) {
        summ += value;
      });
      return summ;
    });
    var paths = computed(function() {
      var p = [];
      var cumulativePercentage = 0;
      function getCoordinatesForPercentage(percentage) {
        var x = Math.cos(2 * Math.PI * percentage) * (props.size / 3);
        var y = Math.sin(2 * Math.PI * percentage) * (props.size / 3);
        return [x, y];
      }
      props.datasets.forEach(function(_ref2) {
        var value = _ref2.value, label = _ref2.label, color = _ref2.color;
        var percentage = value / summValue.value;
        var _getCoordinatesForPer = getCoordinatesForPercentage(cumulativePercentage), startX = _getCoordinatesForPer[0], startY = _getCoordinatesForPer[1];
        cumulativePercentage += percentage;
        var _getCoordinatesForPer2 = getCoordinatesForPercentage(cumulativePercentage), endX = _getCoordinatesForPer2[0], endY = _getCoordinatesForPer2[1];
        var largeArcFlag = percentage > 0.5 ? 1 : 0;
        var points = [
          "M " + startX + " " + startY,
          "A " + props.size / 3 + " " + props.size / 3 + " 0 " + largeArcFlag + " 1 " + endX + " " + endY,
          "L 0 0"
        ].join(" ");
        p.push({
          points,
          label,
          color
        });
      });
      return p;
    });
    var formatTooltipText = function formatTooltipText2() {
      if (currentIndex.value === null)
        return "";
      var _props$datasets$curre = props.datasets[currentIndex.value], value = _props$datasets$curre.value, label = _props$datasets$curre.label, color = _props$datasets$curre.color;
      var percentage = value / summValue.value * 100;
      var round = function round2(v) {
        if (parseInt(v, 10) === v)
          return v;
        return Math.round(v * 100) / 100;
      };
      if (props.formatTooltip) {
        return props.formatTooltip({
          index: currentIndex.value,
          value,
          label,
          color,
          percentage
        });
      }
      var tooltipText = "" + (label ? label + ": " : "") + round(value) + " (" + round(percentage) + "%)";
      return '\n      <div class="pie-chart-tooltip-label">\n        <span class="pie-chart-tooltip-color" style="background-color: ' + color + ';"></span> ' + tooltipText + "\n      </div>\n    ";
    };
    var setTooltip = function setTooltip2() {
      var index = currentIndex.value;
      if (index === null && !f7Tooltip)
        return;
      if (!props.tooltip || !elRef.value || !f7)
        return;
      if (index !== null && !f7Tooltip) {
        f7Tooltip = f7.tooltip.create({
          trigger: "manual",
          containerEl: elRef.value,
          targetEl: elRef.value.querySelector('path[data-index="' + index + '"]'),
          text: formatTooltipText(),
          cssClass: "pie-chart-tooltip"
        });
        f7Tooltip.show();
        return;
      }
      if (!f7Tooltip)
        return;
      if (index !== null) {
        f7Tooltip.setText(formatTooltipText());
        f7Tooltip.setTargetEl(elRef.value.querySelector('path[data-index="' + index + '"]'));
        f7Tooltip.show();
      } else {
        f7Tooltip.hide();
      }
    };
    watch(function() {
      return currentIndex.value;
    }, function() {
      emit("select", currentIndex.value, props.datasets[currentIndex.value]);
      setTooltip();
    });
    onBeforeUnmount(function() {
      if (f7Tooltip && f7Tooltip.destroy) {
        f7Tooltip.destroy();
      }
      f7Tooltip = null;
    });
    var classes = computed(function() {
      return classNames("pie-chart");
    });
    return {
      elRef,
      currentIndex,
      classes,
      paths,
      classNames,
      setCurrentIndex
    };
  }
};

// node_modules/framework7-vue/esm/components/popover.js
function _extends68() {
  _extends68 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends68.apply(this, arguments);
}
var _hoisted_123 = createVNode("div", {
  class: "popover-angle"
}, null, -1);
var _hoisted_28 = {
  class: "popover-inner"
};
function render64(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [_hoisted_123, createVNode("div", _hoisted_28, [renderSlot(_ctx.$slots, "default")])], 2);
}
var popover_default = {
  name: "f7-popover",
  render: render64,
  props: _extends68({
    opened: Boolean,
    animate: {
      type: Boolean,
      default: void 0
    },
    targetEl: {
      type: [String, Object],
      default: void 0
    },
    backdrop: {
      type: Boolean,
      default: void 0
    },
    backdropEl: {
      type: [String, Object],
      default: void 0
    },
    closeByBackdropClick: {
      type: Boolean,
      default: void 0
    },
    closeByOutsideClick: {
      type: Boolean,
      default: void 0
    },
    closeOnEscape: {
      type: Boolean,
      default: void 0
    },
    containerEl: {
      type: [String, Object],
      default: void 0
    }
  }, colorProps),
  emits: ["popover:open", "popover:opened", "popover:close", "popover:closed", "update:opened"],
  setup: function setup71(props, _ref) {
    var emit = _ref.emit;
    var f7Popover = ref(null);
    var isOpened = props.opened;
    var isClosing = false;
    var elRef = ref(null);
    var onOpen = function onOpen2(instance) {
      isOpened = true;
      isClosing = false;
      emit("popover:open", instance);
      emit("update:opened", true);
    };
    var onOpened = function onOpened2(instance) {
      emit("popover:opened", instance);
    };
    var onClose = function onClose2(instance) {
      isOpened = false;
      isClosing = true;
      emit("popover:close", instance);
    };
    var onClosed = function onClosed2(instance) {
      isClosing = false;
      emit("popover:closed", instance);
      emit("update:opened", false);
    };
    watch(function() {
      return props.opened;
    }, function(value) {
      if (!f7Popover.value)
        return;
      if (value) {
        f7Popover.value.open();
      } else {
        f7Popover.value.close();
      }
    });
    onMounted(function() {
      if (!elRef.value)
        return;
      var popoverParams = {
        el: elRef.value,
        on: {
          open: onOpen,
          opened: onOpened,
          close: onClose,
          closed: onClosed
        }
      };
      var targetEl = props.targetEl, closeByBackdropClick = props.closeByBackdropClick, closeByOutsideClick = props.closeByOutsideClick, closeOnEscape = props.closeOnEscape, backdrop = props.backdrop, backdropEl = props.backdropEl, containerEl = props.containerEl;
      if (typeof targetEl !== "undefined")
        popoverParams.targetEl = targetEl;
      if (typeof closeByBackdropClick !== "undefined")
        popoverParams.closeByBackdropClick = closeByBackdropClick;
      if (typeof closeByOutsideClick !== "undefined")
        popoverParams.closeByOutsideClick = closeByOutsideClick;
      if (typeof closeOnEscape !== "undefined")
        popoverParams.closeOnEscape = closeOnEscape;
      if (typeof backdrop !== "undefined")
        popoverParams.backdrop = backdrop;
      if (typeof backdropEl !== "undefined")
        popoverParams.backdropEl = backdropEl;
      if (typeof containerEl !== "undefined")
        popoverParams.containerEl = containerEl;
      f7ready(function() {
        f7Popover.value = f7.popover.create(popoverParams);
        if (props.opened) {
          f7Popover.value.open(targetEl, false);
        }
      });
    });
    onBeforeUnmount(function() {
      if (f7Popover.value) {
        f7Popover.value.destroy();
      }
      f7Popover.value = null;
    });
    var classes = computed(function() {
      return classNames("popover", modalStateClasses({
        isOpened,
        isClosing
      }), colorClasses(props));
    });
    return {
      elRef,
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/popup.js
function _extends69() {
  _extends69 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends69.apply(this, arguments);
}
function render65(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var popup_default = {
  name: "f7-popup",
  render: render65,
  props: _extends69({
    tabletFullscreen: Boolean,
    opened: Boolean,
    animate: {
      type: Boolean,
      default: void 0
    },
    backdrop: {
      type: Boolean,
      default: void 0
    },
    backdropEl: {
      type: [String, Object],
      default: void 0
    },
    closeByBackdropClick: {
      type: Boolean,
      default: void 0
    },
    closeOnEscape: {
      type: Boolean,
      default: void 0
    },
    swipeToClose: {
      type: [Boolean, String],
      default: false
    },
    swipeHandler: {
      type: [String, Object],
      default: void 0
    },
    push: Boolean,
    containerEl: {
      type: [String, Object],
      default: void 0
    }
  }, colorProps),
  emits: ["popup:swipestart", "popup:swipemove", "popup:swipeend", "popup:swipeclose", "popup:open", "popup:opened", "popup:close", "popup:closed", "update:opened"],
  setup: function setup72(props, _ref) {
    var emit = _ref.emit;
    var f7Popup = ref(null);
    var isOpened = props.opened;
    var isClosing = false;
    var elRef = ref(null);
    var onSwipeStart = function onSwipeStart2(instance) {
      emit("popup:swipestart", instance);
    };
    var onSwipeMove = function onSwipeMove2(instance) {
      emit("popup:swipemove", instance);
    };
    var onSwipeEnd = function onSwipeEnd2(instance) {
      emit("popup:swipeend", instance);
    };
    var onSwipeClose = function onSwipeClose2(instance) {
      emit("popup:swipeclose", instance);
    };
    var onOpen = function onOpen2(instance) {
      isOpened = true;
      isClosing = false;
      emit("popup:open", instance);
      emit("update:opened", true);
    };
    var onOpened = function onOpened2(instance) {
      emit("popup:opened", instance);
    };
    var onClose = function onClose2(instance) {
      isOpened = false;
      isClosing = true;
      emit("popup:close", instance);
    };
    var onClosed = function onClosed2(instance) {
      isClosing = false;
      emit("popup:closed", instance);
      emit("update:opened", false);
    };
    watch(function() {
      return props.opened;
    }, function(value) {
      if (!f7Popup.value)
        return;
      if (value) {
        f7Popup.value.open();
      } else {
        f7Popup.value.close();
      }
    });
    onMounted(function() {
      if (!elRef.value)
        return;
      var popupParams = {
        el: elRef.value,
        on: {
          swipeStart: onSwipeStart,
          swipeMove: onSwipeMove,
          swipeEnd: onSwipeEnd,
          swipeClose: onSwipeClose,
          open: onOpen,
          opened: onOpened,
          close: onClose,
          closed: onClosed
        }
      };
      var closeByBackdropClick = props.closeByBackdropClick, closeOnEscape = props.closeOnEscape, animate = props.animate, backdrop = props.backdrop, backdropEl = props.backdropEl, swipeToClose = props.swipeToClose, swipeHandler = props.swipeHandler, containerEl = props.containerEl;
      if (typeof closeByBackdropClick !== "undefined")
        popupParams.closeByBackdropClick = closeByBackdropClick;
      if (typeof closeOnEscape !== "undefined")
        popupParams.closeOnEscape = closeOnEscape;
      if (typeof animate !== "undefined")
        popupParams.animate = animate;
      if (typeof backdrop !== "undefined")
        popupParams.backdrop = backdrop;
      if (typeof backdropEl !== "undefined")
        popupParams.backdropEl = backdropEl;
      if (typeof swipeToClose !== "undefined")
        popupParams.swipeToClose = swipeToClose;
      if (typeof swipeHandler !== "undefined")
        popupParams.swipeHandler = swipeHandler;
      if (typeof containerEl !== "undefined")
        popupParams.containerEl = containerEl;
      f7ready(function() {
        f7Popup.value = f7.popup.create(popupParams);
        if (props.opened) {
          f7Popup.value.open(false);
        }
      });
    });
    onBeforeUnmount(function() {
      if (f7Popup.value) {
        f7Popup.value.destroy();
      }
      f7Popup.value = null;
    });
    var classes = computed(function() {
      return classNames("popup", {
        "popup-tablet-fullscreen": props.tabletFullscreen,
        "popup-push": props.push
      }, modalStateClasses({
        isOpened,
        isClosing
      }), colorClasses(props));
    });
    return {
      elRef,
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/progressbar.js
function _extends70() {
  _extends70 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends70.apply(this, arguments);
}
function render66(_ctx, _cache) {
  return openBlock(), createBlock("span", {
    ref: "elRef",
    class: _ctx.classes,
    "data-progress": _ctx.progress
  }, [createVNode("span", {
    style: _ctx.transformStyle
  }, null, 4)], 10, ["data-progress"]);
}
var progressbar_default = {
  name: "f7-progressbar",
  render: render66,
  props: _extends70({
    progress: Number,
    infinite: Boolean
  }, colorProps),
  setup: function setup73(props) {
    var elRef = ref(null);
    var set = function set2(newProgress, speed) {
      if (!f7)
        return;
      f7.progressbar.set(elRef.value, newProgress, speed);
    };
    var transformStyle = computed(function() {
      return {
        transform: props.progress ? "translate3d(" + (-100 + props.progress) + "%, 0, 0)" : "",
        WebkitTransform: props.progress ? "translate3d(" + (-100 + props.progress) + "%, 0, 0)" : ""
      };
    });
    var classes = computed(function() {
      return classNames("progressbar", {
        "progressbar-infinite": props.infinite
      }, colorClasses(props));
    });
    return {
      classes,
      set,
      transformStyle,
      elRef
    };
  }
};

// node_modules/framework7-vue/esm/components/radio.js
function _extends71() {
  _extends71 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends71.apply(this, arguments);
}
var _hoisted_124 = createVNode("i", {
  class: "icon-radio"
}, null, -1);
function render67(_ctx, _cache) {
  return openBlock(), createBlock("label", {
    class: _ctx.classes
  }, [createVNode("input", {
    ref: "inputElRef",
    type: "radio",
    name: _ctx.name,
    value: _ctx.value,
    disabled: _ctx.disabled,
    readonly: _ctx.readonly,
    checked: _ctx.checked,
    onChange: _cache[1] || (_cache[1] = function() {
      return _ctx.onChange && _ctx.onChange.apply(_ctx, arguments);
    })
  }, null, 40, ["name", "value", "disabled", "readonly", "checked"]), _hoisted_124, renderSlot(_ctx.$slots, "default")], 2);
}
var radio_default = {
  name: "f7-radio",
  render: render67,
  props: _extends71({
    checked: Boolean,
    name: [Number, String],
    value: {
      type: [Number, String, Boolean],
      default: void 0
    },
    disabled: Boolean,
    readonly: Boolean
  }, colorProps),
  emits: ["update:checked", "change"],
  setup: function setup74(props, _ref) {
    var emit = _ref.emit;
    var inputElRef = ref(null);
    var onChange = function onChange2(event) {
      emit("update:checked", event.target.checked);
      emit("change", event);
    };
    var classes = computed(function() {
      return classNames({
        radio: true,
        disabled: props.disabled
      }, colorClasses(props));
    });
    return {
      inputElRef,
      classes,
      onChange
    };
  }
};

// node_modules/framework7-vue/esm/components/row.js
function _extends72() {
  _extends72 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends72.apply(this, arguments);
}
var _hoisted_125 = {
  key: 0,
  class: "resize-handler"
};
function render68(_ctx, _cache) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    ref: "elRef",
    class: _ctx.classes
  }, {
    default: withCtx(function() {
      return [renderSlot(_ctx.$slots, "default"), _ctx.resizable && _ctx.resizableHandler ? (openBlock(), createBlock("span", _hoisted_125)) : createCommentVNode("", true)];
    }),
    _: 3
  }, 8, ["class"]);
}
var row_default = {
  name: "f7-row",
  render: render68,
  props: _extends72({
    noGap: Boolean,
    tag: {
      type: String,
      default: "div"
    },
    resizable: Boolean,
    resizableFixed: Boolean,
    resizableAbsolute: Boolean,
    resizableHandler: {
      type: Boolean,
      default: true
    }
  }, colorProps),
  emits: ["grid:resize"],
  setup: function setup75(props, _ref) {
    var emit = _ref.emit;
    var elRef = ref(null);
    var onResize = function onResize2(el) {
      if (el === elRef.value) {
        emit("grid:resize");
      }
    };
    onMounted(function() {
      f7ready(function() {
        f7.on("gridResize", onResize);
      });
    });
    onBeforeUnmount(function() {
      f7.off("gridResize", onResize);
    });
    var classes = computed(function() {
      return classNames("row", {
        "no-gap": props.noGap,
        resizable: props.resizable,
        "resizable-fixed": props.resizableFixed,
        "resizable-absolute": props.resizableAbsolute
      }, colorClasses(props));
    });
    return {
      classes,
      elRef
    };
  }
};

// node_modules/framework7-vue/esm/components/searchbar.js
function _extends73() {
  _extends73 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends73.apply(this, arguments);
}
var _hoisted_126 = {
  class: "searchbar-inner"
};
var _hoisted_29 = {
  class: "searchbar-input-wrap"
};
var _hoisted_36 = createVNode("i", {
  class: "searchbar-icon"
}, null, -1);
function render69(_ctx, _cache) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    ref: "elRef",
    class: _ctx.classes,
    onSubmit: _ctx.onSubmit
  }, {
    default: withCtx(function() {
      return [renderSlot(_ctx.$slots, "before-inner"), createVNode("div", _hoisted_126, [renderSlot(_ctx.$slots, "inner-start"), createVNode("div", _hoisted_29, [renderSlot(_ctx.$slots, "input-wrap-start"), createVNode("input", {
        value: _ctx.value,
        placeholder: _ctx.placeholder,
        spellcheck: _ctx.spellcheck,
        type: "search",
        onInput: _cache[1] || (_cache[1] = function() {
          return _ctx.onInput && _ctx.onInput.apply(_ctx, arguments);
        }),
        onChange: _cache[2] || (_cache[2] = function() {
          return _ctx.onChange && _ctx.onChange.apply(_ctx, arguments);
        }),
        onFocus: _cache[3] || (_cache[3] = function() {
          return _ctx.onFocus && _ctx.onFocus.apply(_ctx, arguments);
        }),
        onBlur: _cache[4] || (_cache[4] = function() {
          return _ctx.onBlur && _ctx.onBlur.apply(_ctx, arguments);
        })
      }, null, 40, ["value", "placeholder", "spellcheck"]), _hoisted_36, _ctx.clearButton ? (openBlock(), createBlock("span", {
        key: 0,
        class: "input-clear-button",
        onClick: _cache[5] || (_cache[5] = function() {
          return _ctx.onClearButtonClick && _ctx.onClearButtonClick.apply(_ctx, arguments);
        })
      })) : createCommentVNode("", true), renderSlot(_ctx.$slots, "input-wrap-end")]), _ctx.disableButton ? (openBlock(), createBlock("span", {
        key: 0,
        class: "searchbar-disable-button",
        onClick: _cache[6] || (_cache[6] = function() {
          return _ctx.onDisableButtonClick && _ctx.onDisableButtonClick.apply(_ctx, arguments);
        })
      }, toDisplayString(_ctx.disableButtonText), 1)) : createCommentVNode("", true), renderSlot(_ctx.$slots, "inner-end"), renderSlot(_ctx.$slots, "default")]), renderSlot(_ctx.$slots, "after-inner")];
    }),
    _: 3
  }, 8, ["class", "onSubmit"]);
}
var searchbar_default = {
  name: "f7-searchbar",
  render: render69,
  props: _extends73({
    noShadow: Boolean,
    noHairline: Boolean,
    form: {
      type: Boolean,
      default: true
    },
    placeholder: {
      type: String,
      default: "Search"
    },
    spellcheck: {
      type: Boolean,
      default: void 0
    },
    disableButton: {
      type: Boolean,
      default: true
    },
    disableButtonText: {
      type: String,
      default: "Cancel"
    },
    clearButton: {
      type: Boolean,
      default: true
    },
    value: [String, Number, Array],
    inputEvents: {
      type: String,
      default: "change input compositionend"
    },
    expandable: Boolean,
    inline: Boolean,
    searchContainer: [String, Object],
    searchIn: {
      type: String,
      default: ".item-title"
    },
    searchItem: {
      type: String,
      default: "li"
    },
    searchGroup: {
      type: String,
      default: ".list-group"
    },
    searchGroupTitle: {
      type: String,
      default: ".item-divider, .list-group-title"
    },
    foundEl: {
      type: [String, Object],
      default: ".searchbar-found"
    },
    notFoundEl: {
      type: [String, Object],
      default: ".searchbar-not-found"
    },
    backdrop: {
      type: Boolean,
      default: void 0
    },
    backdropEl: [String, Object],
    hideOnEnableEl: {
      type: [String, Object],
      default: ".searchbar-hide-on-enable"
    },
    hideOnSearchEl: {
      type: [String, Object],
      default: ".searchbar-hide-on-search"
    },
    ignore: {
      type: String,
      default: ".searchbar-ignore"
    },
    customSearch: {
      type: Boolean,
      default: false
    },
    removeDiacritics: {
      type: Boolean,
      default: false
    },
    hideDividers: {
      type: Boolean,
      default: true
    },
    hideGroups: {
      type: Boolean,
      default: true
    },
    init: {
      type: Boolean,
      default: true
    }
  }, colorProps),
  emits: ["change", "input", "focus", "blur", "submit", "click:clear", "click:disable", "searchbar:search", "searchbar:clear", "searchbar:enable", "searchbar:disable", "update:value"],
  setup: function setup76(props, _ref) {
    var emit = _ref.emit;
    var f7Searchbar = null;
    var elRef = ref(null);
    var search = function search2(query) {
      if (!f7Searchbar)
        return void 0;
      return f7Searchbar.search(query);
    };
    var enable = function enable2() {
      if (!f7Searchbar)
        return void 0;
      return f7Searchbar.enable();
    };
    var disable = function disable2() {
      if (!f7Searchbar)
        return void 0;
      return f7Searchbar.disable();
    };
    var toggle = function toggle2() {
      if (!f7Searchbar)
        return void 0;
      return f7Searchbar.toggle();
    };
    var clear = function clear2() {
      if (!f7Searchbar)
        return void 0;
      return f7Searchbar.clear();
    };
    var onChange = function onChange2(event) {
      emit("change", event);
    };
    var onInput = function onInput2(event) {
      emit("input", event);
      emit("update:value", event.target.value);
    };
    var onFocus = function onFocus2(event) {
      emit("focus", event);
    };
    var onBlur = function onBlur2(event) {
      emit("blur", event);
    };
    var onSubmit = function onSubmit2(event) {
      emit("submit", event);
    };
    var onClearButtonClick = function onClearButtonClick2(event) {
      emit("click:clear", event);
    };
    var onDisableButtonClick = function onDisableButtonClick2(event) {
      emit("click:disable", event);
    };
    onMounted(function() {
      if (!props.init)
        return;
      f7ready(function() {
        var params = noUndefinedProps({
          el: elRef.value,
          inputEvents: props.inputEvents,
          searchContainer: props.searchContainer,
          searchIn: props.searchIn,
          searchItem: props.searchItem,
          searchGroup: props.searchGroup,
          searchGroupTitle: props.searchGroupTitle,
          hideOnEnableEl: props.hideOnEnableEl,
          hideOnSearchEl: props.hideOnSearchEl,
          foundEl: props.foundEl,
          notFoundEl: props.notFoundEl,
          backdrop: props.backdrop,
          backdropEl: props.backdropEl,
          disableButton: props.disableButton,
          ignore: props.ignore,
          customSearch: props.customSearch,
          removeDiacritics: props.removeDiacritics,
          hideDividers: props.hideDividers,
          hideGroups: props.hideGroups,
          expandable: props.expandable,
          inline: props.inline,
          on: {
            search: function search2(searchbar, query, previousQuery) {
              emit("searchbar:search", searchbar, query, previousQuery);
            },
            clear: function clear2(searchbar, previousQuery) {
              emit("searchbar:clear", searchbar, previousQuery);
            },
            enable: function enable2(searchbar) {
              emit("searchbar:enable", searchbar);
            },
            disable: function disable2(searchbar) {
              emit("searchbar:disable", searchbar);
            }
          }
        });
        Object.keys(params).forEach(function(key) {
          if (params[key] === "") {
            delete params[key];
          }
        });
        f7Searchbar = f7.searchbar.create(params);
      });
    });
    onBeforeUnmount(function() {
      if (f7Searchbar && f7Searchbar.destroy)
        f7Searchbar.destroy();
      f7Searchbar = null;
    });
    var classes = computed(function() {
      return classNames("searchbar", {
        "searchbar-inline": props.inline,
        "no-shadow": props.noShadow,
        "no-hairline": props.noHairline,
        "searchbar-expandable": props.expandable
      }, colorClasses(props));
    });
    var tag = computed(function() {
      return props.form ? "form" : "div";
    });
    return {
      elRef,
      tag,
      classes,
      search,
      enable,
      disable,
      toggle,
      clear,
      onChange,
      onInput,
      onFocus,
      onBlur,
      onSubmit,
      onClearButtonClick,
      onDisableButtonClick
    };
  }
};

// node_modules/framework7-vue/esm/components/segmented.js
function _extends74() {
  _extends74 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends74.apply(this, arguments);
}
var _hoisted_127 = {
  key: 0,
  class: "segmented-highlight"
};
function render70(_ctx, _cache) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
    class: _ctx.classes
  }, {
    default: withCtx(function() {
      return [renderSlot(_ctx.$slots, "default"), _ctx.strong || _ctx.strongIos || _ctx.strongMd || _ctx.strongAurora ? (openBlock(), createBlock("span", _hoisted_127)) : createCommentVNode("", true)];
    }),
    _: 3
  }, 8, ["class"]);
}
var segmented_default = {
  name: "f7-segmented",
  render: render70,
  props: _extends74({
    raised: Boolean,
    raisedIos: Boolean,
    raisedMd: Boolean,
    raisedAurora: Boolean,
    round: Boolean,
    roundIos: Boolean,
    roundMd: Boolean,
    roundAurora: Boolean,
    strong: Boolean,
    strongIos: Boolean,
    strongMd: Boolean,
    strongAurora: Boolean,
    tag: {
      type: String,
      default: "div"
    }
  }, colorProps),
  setup: function setup77(props) {
    var classes = computed(function() {
      return classNames({
        segmented: true,
        "segmented-raised": props.raised,
        "segmented-raised-ios": props.raisedIos,
        "segmented-raised-aurora": props.raisedAurora,
        "segmented-raised-md": props.raisedMd,
        "segmented-round": props.round,
        "segmented-round-ios": props.roundIos,
        "segmented-round-aurora": props.roundAurora,
        "segmented-round-md": props.roundMd,
        "segmented-strong": props.strong,
        "segmented-strong-ios": props.strongIos,
        "segmented-strong-md": props.strongMd,
        "segmented-strong-aurora": props.strongAurora
      }, colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/sheet.js
function _extends75() {
  _extends75 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends75.apply(this, arguments);
}
var sheet_default = {
  name: "f7-sheet",
  props: _extends75({
    opened: Boolean,
    animate: {
      type: Boolean,
      default: void 0
    },
    top: Boolean,
    bottom: Boolean,
    position: String,
    backdrop: {
      type: Boolean,
      default: void 0
    },
    backdropEl: {
      type: [String, Object],
      default: void 0
    },
    closeByBackdropClick: {
      type: Boolean,
      default: void 0
    },
    closeByOutsideClick: {
      type: Boolean,
      default: void 0
    },
    closeOnEscape: {
      type: Boolean,
      default: void 0
    },
    push: Boolean,
    swipeToClose: {
      type: Boolean,
      default: void 0
    },
    swipeToStep: {
      type: Boolean,
      default: void 0
    },
    swipeHandler: {
      type: [String, Object],
      default: void 0
    },
    containerEl: {
      type: [String, Object],
      default: void 0
    }
  }, colorProps),
  emits: ["sheet:stepprogress", "sheet:stepopen", "sheet:stepclose", "sheet:open", "sheet:opened", "sheet:close", "sheet:closed", "update:opened"],
  setup: function setup78(props, _ref) {
    var emit = _ref.emit, slots = _ref.slots;
    var f7Sheet = null;
    var isOpened = props.opened;
    var isClosing = false;
    var elRef = ref(null);
    var onStepProgress = function onStepProgress2(instance, progress) {
      emit("sheet:stepprogress", instance, progress);
    };
    var onStepOpen = function onStepOpen2(instance) {
      emit("sheet:stepopen", instance);
    };
    var onStepClose = function onStepClose2(instance) {
      emit("sheet:stepclose", instance);
    };
    var onOpen = function onOpen2(instance) {
      isOpened = true;
      isClosing = false;
      emit("sheet:open", instance);
      emit("update:opened", true);
    };
    var onOpened = function onOpened2(instance) {
      emit("sheet:opened", instance);
    };
    var onClose = function onClose2(instance) {
      isOpened = false;
      isClosing = true;
      emit("sheet:close", instance);
    };
    var onClosed = function onClosed2(instance) {
      isClosing = false;
      emit("sheet:closed", instance);
      emit("update:opened", false);
    };
    onMounted(function() {
      if (!elRef.value)
        return;
      var sheetParams = {
        el: elRef.value,
        on: {
          open: onOpen,
          opened: onOpened,
          close: onClose,
          closed: onClosed,
          stepOpen: onStepOpen,
          stepClose: onStepClose,
          stepProgress: onStepProgress
        }
      };
      var animate = props.animate, backdrop = props.backdrop, backdropEl = props.backdropEl, closeByBackdropClick = props.closeByBackdropClick, closeByOutsideClick = props.closeByOutsideClick, closeOnEscape = props.closeOnEscape, swipeToClose = props.swipeToClose, swipeToStep = props.swipeToStep, swipeHandler = props.swipeHandler, containerEl = props.containerEl;
      if (typeof animate !== "undefined")
        sheetParams.animate = animate;
      if (typeof backdrop !== "undefined")
        sheetParams.backdrop = backdrop;
      if (typeof backdropEl !== "undefined")
        sheetParams.backdropEl = backdropEl;
      if (typeof closeByBackdropClick !== "undefined")
        sheetParams.closeByBackdropClick = closeByBackdropClick;
      if (typeof closeByOutsideClick !== "undefined")
        sheetParams.closeByOutsideClick = closeByOutsideClick;
      if (typeof closeOnEscape !== "undefined")
        sheetParams.closeOnEscape = closeOnEscape;
      if (typeof swipeToClose !== "undefined")
        sheetParams.swipeToClose = swipeToClose;
      if (typeof swipeToStep !== "undefined")
        sheetParams.swipeToStep = swipeToStep;
      if (typeof swipeHandler !== "undefined")
        sheetParams.swipeHandler = swipeHandler;
      if (typeof containerEl !== "undefined")
        sheetParams.containerEl = containerEl;
      f7ready(function() {
        f7Sheet = f7.sheet.create(sheetParams);
        if (props.opened) {
          f7Sheet.open(false);
        }
      });
    });
    onBeforeUnmount(function() {
      if (f7Sheet) {
        f7Sheet.destroy();
      }
      f7Sheet = null;
    });
    watch(function() {
      return props.opened;
    }, function(value) {
      if (!f7Sheet)
        return;
      if (value) {
        f7Sheet.open();
      } else {
        f7Sheet.close();
      }
    });
    var classes = computed(function() {
      var positionComputed = "bottom";
      if (props.position)
        positionComputed = props.position;
      else if (props.top)
        positionComputed = "top";
      else if (props.bottom)
        positionComputed = "bottom";
      return classNames("sheet-modal", "sheet-modal-" + positionComputed, {
        "sheet-modal-push": props.push
      }, modalStateClasses({
        isOpened,
        isClosing
      }), colorClasses(props));
    });
    var fixedTags = "navbar toolbar tabbar subnavbar searchbar messagebar fab list-index panel".split(" ").map(function(tagName) {
      return "f7-" + tagName;
    });
    return function() {
      var fixedList = [];
      var staticList = [];
      if (slots.default) {
        slots.default().forEach(function(vnode) {
          if (typeof vnode === "undefined")
            return;
          var tag = vnode.type && vnode.type.name ? vnode.type.name : vnode.type;
          if (fixedTags.indexOf(tag) >= 0) {
            fixedList.push(vnode);
          } else {
            staticList.push(vnode);
          }
        });
      }
      return h("div", {
        class: classes.value,
        ref: elRef
      }, [fixedList, slots.fixed && slots.fixed(), h("div", {
        class: "sheet-modal-inner"
      }, [staticList, slots.static && slots.static()])]);
    };
  }
};

// node_modules/skeleton-elements/vue/esm/SkeletonBlock.js
var SkeletonBlock_default = {
  name: "skeleton-block",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    width: [String, Number],
    height: [String, Number],
    borderRadius: String,
    effect: String
  },
  render: function render71() {
    var _class;
    return h(this.tag, {
      class: (_class = {
        "skeleton-block": true
      }, _class["skeleton-effect-" + this.effect] = this.effect, _class),
      style: {
        width: this.width,
        height: this.height,
        borderRadius: this.borderRadius
      }
    }, this.$slots["default"] && this.$slots["default"]());
  }
};

// node_modules/skeleton-elements/vue/esm/SkeletonText.js
var SkeletonText_default = {
  name: "skeleton-text",
  props: {
    tag: {
      type: String,
      default: "span"
    },
    effect: String
  },
  render: function render72() {
    var _class;
    return h(this.tag, {
      class: (_class = {
        "skeleton-text": true
      }, _class["skeleton-effect-" + this.effect] = this.effect, _class)
    }, this.$slots["default"] && this.$slots["default"]());
  }
};

// node_modules/skeleton-elements/vue/esm/multiply-svg-points.js
function multiplySvgPoints(pointsString, iconSize, width, height) {
  var iconMaxSize = Math.min(width, height) * 0.5;
  var scale = iconMaxSize / iconSize;
  return pointsString.replace(/([0-9,\.]{1,})/g, function(coords) {
    coords = coords.split(",").map(function(p) {
      return parseFloat(p);
    });
    var x = coords[0] * scale + width / 2 - iconSize * scale / 2;
    var y = coords[1] * scale + height / 2 - iconSize * scale / 2;
    if (iconMaxSize >= 100) {
      return Math.round(x) + "," + Math.round(y);
    }
    return x + "," + y;
  });
}
var multiply_svg_points_default = multiplySvgPoints;

// node_modules/skeleton-elements/vue/esm/SkeletonImage.js
var SkeletonImage_default = {
  name: "skeleton-image",
  props: {
    tag: {
      type: String,
      default: "span"
    },
    width: {
      type: Number,
      default: 1200
    },
    height: {
      type: Number,
      default: 600
    },
    color: String,
    iconColor: String,
    showIcon: {
      type: Boolean,
      default: true
    },
    effect: String,
    borderRadius: String
  },
  render: function render73() {
    var _class;
    var tag = this.tag, color = this.color, iconColor = this.iconColor, showIcon = this.showIcon, width = this.width, height = this.height, effect = this.effect, borderRadius = this.borderRadius;
    return h(tag, {
      class: (_class = {
        "skeleton-image": true
      }, _class["skeleton-effect-" + effect] = effect, _class)
    }, [h("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width,
      height,
      viewBox: "0 0 " + width + " " + height,
      style: {
        borderRadius
      },
      preserveAspectRatio: "none"
    }, [h("polygon", {
      style: {
        fill: color
      },
      fillRule: "evenodd",
      points: "0 0 " + width + " 0 " + width + " " + height + " 0 " + height
    }), showIcon && h("path", {
      style: {
        fill: iconColor
      },
      d: multiply_svg_points_default("M7.7148,49.5742 L48.2852,49.5742 C53.1836,49.5742 55.6446,47.1367 55.6446,42.3086 L55.6446,13.6914 C55.6446,8.8633 53.1836,6.4258 48.2852,6.4258 L7.7148,6.4258 C2.8398,6.4258 0.3554,8.8398 0.3554,13.6914 L0.3554,42.3086 C0.3554,47.1602 2.8398,49.5742 7.7148,49.5742 Z M39.2851,27.9414 C38.2304,27.0039 37.0351,26.5118 35.7695,26.5118 C34.457,26.5118 33.3085,26.9571 32.2304,27.918 L21.6366,37.3867 L17.3007,33.4492 C16.3163,32.582 15.2617,32.1133 14.1366,32.1133 C13.1054,32.1133 12.0976,32.5586 11.1366,33.4258 L4.1288,39.7305 L4.1288,13.8789 C4.1288,11.4414 5.4413,10.1992 7.7851,10.1992 L48.2147,10.1992 C50.535,10.1992 51.8708,11.4414 51.8708,13.8789 L51.8708,39.7539 L39.2851,27.9414 Z M17.8163,28.1992 C20.8398,28.1992 23.3241,25.7149 23.3241,22.668 C23.3241,19.6445 20.8398,17.1367 17.8163,17.1367 C14.7695,17.1367 12.2851,19.6445 12.2851,22.668 C12.2851,25.7149 14.7695,28.1992 17.8163,28.1992 Z", 56, width, height)
    })]), this.$slots["default"] && this.$slots["default"]()]);
  }
};

// node_modules/skeleton-elements/vue/esm/SkeletonAvatar.js
var SkeletonAvatar_default = {
  name: "skeleton-avatar",
  props: {
    tag: {
      type: String,
      default: "span"
    },
    size: {
      type: Number,
      default: 48
    },
    borderRadius: {
      type: [String, Number],
      default: "50%"
    },
    color: String,
    iconColor: String,
    showIcon: {
      type: Boolean,
      default: true
    },
    effect: String
  },
  render: function render74() {
    var _class;
    var tag = this.tag, color = this.color, iconColor = this.iconColor, showIcon = this.showIcon, size = this.size, borderRadius = this.borderRadius, effect = this.effect;
    return h(tag, {
      class: (_class = {
        "skeleton-avatar": true
      }, _class["skeleton-effect-" + effect] = effect, _class)
    }, [h("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: size,
      height: size,
      viewBox: "0 0 " + size + " " + size,
      preserveAspectRatio: "none"
    }, [h("rect", {
      style: {
        fill: color
      },
      fillRule: "evenodd",
      width: size,
      height: size,
      rx: borderRadius
    }), showIcon && h("path", {
      style: {
        fill: iconColor
      },
      d: multiply_svg_points_default("M28.22461,27.1590817 C34.9209931,27.1590817 40.6829044,21.1791004 40.6829044,13.3926332 C40.6829044,5.69958662 34.8898972,0 28.22461,0 C21.5594557,0 15.7663156,5.82423601 15.7663156,13.4549579 C15.7663156,21.1791004 21.5594557,27.1590817 28.22461,27.1590817 Z M8.66515427,56 L47.7841986,56 C52.6739629,56 54.4181241,54.5984253 54.4181241,51.8576005 C54.4181241,43.8219674 44.358068,32.7341519 28.22461,32.7341519 C12.0600561,32.7341519 2,43.8219674 2,51.8576005 C2,54.5984253 3.74402832,56 8.66515427,56 Z", 56, size, size)
    })]), this.$slots["default"] && this.$slots["default"]()]);
  }
};

// node_modules/framework7-vue/esm/components/skeleton-avatar.js
var skeleton_avatar_default = SkeletonAvatar_default;

// node_modules/framework7-vue/esm/components/skeleton-block.js
var skeleton_block_default = SkeletonBlock_default;

// node_modules/framework7-vue/esm/components/skeleton-image.js
var skeleton_image_default = SkeletonImage_default;

// node_modules/framework7-vue/esm/components/skeleton-text.js
var skeleton_text_default = SkeletonText_default;

// node_modules/framework7-vue/esm/components/stepper.js
function _extends76() {
  _extends76 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends76.apply(this, arguments);
}
var _hoisted_128 = {
  key: 0,
  class: "stepper-input-wrap"
};
var _hoisted_210 = {
  key: 1,
  class: "stepper-value"
};
function render75(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [createVNode("div", {
    class: "stepper-button-minus",
    onClick: _cache[1] || (_cache[1] = function() {
      return _ctx.onMinusClick && _ctx.onMinusClick.apply(_ctx, arguments);
    })
  }), _ctx.input && !_ctx.buttonsOnly ? (openBlock(), createBlock("div", _hoisted_128, [createVNode("input", {
    id: _ctx.inputId,
    name: _ctx.name,
    type: _ctx.inputType,
    min: _ctx.inputType === "number" ? _ctx.min : void 0,
    max: _ctx.inputType === "number" ? _ctx.max : void 0,
    step: _ctx.inputType === "number" ? _ctx.step : void 0,
    value: _ctx.value,
    readonly: _ctx.inputReadonly,
    onInput: _cache[2] || (_cache[2] = function() {
      return _ctx.onInput && _ctx.onInput.apply(_ctx, arguments);
    }),
    onChange: _cache[3] || (_cache[3] = function() {
      return _ctx.onChange && _ctx.onChange.apply(_ctx, arguments);
    })
  }, null, 40, ["id", "name", "type", "min", "max", "step", "value", "readonly"])])) : createCommentVNode("", true), !_ctx.input && !_ctx.buttonsOnly ? (openBlock(), createBlock("div", _hoisted_210, toDisplayString(_ctx.value), 1)) : createCommentVNode("", true), createVNode("div", {
    class: "stepper-button-plus",
    onClick: _cache[4] || (_cache[4] = function() {
      return _ctx.onPlusClick && _ctx.onPlusClick.apply(_ctx, arguments);
    })
  })], 2);
}
var stepper_default = {
  name: "f7-stepper",
  render: render75,
  props: _extends76({
    init: {
      type: Boolean,
      default: true
    },
    value: {
      type: Number,
      default: 0
    },
    min: {
      type: Number,
      default: 0
    },
    max: {
      type: Number,
      default: 100
    },
    step: {
      type: Number,
      default: 1
    },
    formatValue: Function,
    name: String,
    inputId: String,
    input: {
      type: Boolean,
      default: true
    },
    inputType: {
      type: String,
      default: "text"
    },
    inputReadonly: {
      type: Boolean,
      default: false
    },
    autorepeat: {
      type: Boolean,
      default: false
    },
    autorepeatDynamic: {
      type: Boolean,
      default: false
    },
    wraps: {
      type: Boolean,
      default: false
    },
    manualInputMode: {
      type: Boolean,
      default: false
    },
    decimalPoint: {
      type: Number,
      default: 4
    },
    buttonsEndInputMode: {
      type: Boolean,
      default: true
    },
    disabled: Boolean,
    buttonsOnly: Boolean,
    round: Boolean,
    roundMd: Boolean,
    roundIos: Boolean,
    roundAurora: Boolean,
    fill: Boolean,
    fillMd: Boolean,
    fillIos: Boolean,
    fillAurora: Boolean,
    large: Boolean,
    largeMd: Boolean,
    largeIos: Boolean,
    largeAurora: Boolean,
    small: Boolean,
    smallMd: Boolean,
    smallIos: Boolean,
    smallAurora: Boolean,
    raised: Boolean,
    raisedMd: Boolean,
    raisedIos: Boolean,
    raisedAurora: Boolean
  }, colorProps),
  emits: ["input", "change", "stepper:minusclick", "stepper:plusclick", "stepper:change", "update:value"],
  setup: function setup79(props, _ref) {
    var emit = _ref.emit;
    var f7Stepper = null;
    var elRef = ref(null);
    var increment = function increment2() {
      if (!f7Stepper)
        return;
      f7Stepper.increment();
    };
    var decrement = function decrement2() {
      if (!f7Stepper)
        return;
      f7Stepper.decrement();
    };
    var setValue = function setValue2(newValue) {
      if (f7Stepper && f7Stepper.setValue)
        f7Stepper.setValue(newValue);
    };
    var getValue = function getValue2() {
      if (f7Stepper && f7Stepper.getValue) {
        return f7Stepper.getValue();
      }
      return void 0;
    };
    var onInput = function onInput2(event) {
      emit("input", event, f7Stepper);
    };
    var onChange = function onChange2(event) {
      emit("change", event, f7Stepper);
    };
    var onMinusClick = function onMinusClick2(event) {
      emit("stepper:minusclick", event, f7Stepper);
    };
    var onPlusClick = function onPlusClick2(event) {
      emit("stepper:plusclick", event, f7Stepper);
    };
    watch(function() {
      return props.value;
    }, function(newValue) {
      if (!f7Stepper)
        return;
      f7Stepper.setValue(newValue);
    });
    onMounted(function() {
      f7ready(function() {
        if (!props.init || !elRef.value)
          return;
        f7Stepper = f7.stepper.create(noUndefinedProps({
          el: elRef.value,
          min: props.min,
          max: props.max,
          value: props.value,
          step: props.step,
          formatValue: props.formatValue,
          autorepeat: props.autorepeat,
          autorepeatDynamic: props.autorepeatDynamic,
          wraps: props.wraps,
          manualInputMode: props.manualInputMode,
          decimalPoint: props.decimalPoint,
          buttonsEndInputMode: props.buttonsEndInputMode,
          on: {
            change: function change(stepper, newValue) {
              emit("stepper:change", newValue);
              emit("update:value", newValue);
            }
          }
        }));
      });
    });
    onBeforeUnmount(function() {
      if (f7Stepper && f7Stepper.destroy) {
        f7Stepper.destroy();
      }
      f7Stepper = null;
    });
    var classes = computed(function() {
      return classNames("stepper", {
        disabled: props.disabled,
        "stepper-round": props.round,
        "stepper-round-ios": props.roundIos,
        "stepper-round-md": props.roundMd,
        "stepper-round-aurora": props.roundAurora,
        "stepper-fill": props.fill,
        "stepper-fill-ios": props.fillIos,
        "stepper-fill-md": props.fillMd,
        "stepper-fill-aurora": props.fillAurora,
        "stepper-large": props.large,
        "stepper-large-ios": props.largeIos,
        "stepper-large-md": props.largeMd,
        "stepper-large-aurora": props.largeAurora,
        "stepper-small": props.small,
        "stepper-small-ios": props.smallIos,
        "stepper-small-md": props.smallMd,
        "stepper-small-aurora": props.smallAurora,
        "stepper-raised": props.raised,
        "stepper-raised-ios": props.raisedIos,
        "stepper-raised-md": props.raisedMd,
        "stepper-raised-aurora": props.raisedAurora
      }, colorClasses(props));
    });
    return {
      elRef,
      classes,
      increment,
      decrement,
      setValue,
      getValue,
      onInput,
      onChange,
      onMinusClick,
      onPlusClick
    };
  }
};

// node_modules/framework7-vue/esm/components/subnavbar.js
function _extends77() {
  _extends77 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends77.apply(this, arguments);
}
var _hoisted_129 = {
  key: 0,
  class: "subnavbar-inner"
};
var _hoisted_211 = {
  key: 0,
  class: "subnavbar-title"
};
function render76(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [_ctx.inner ? (openBlock(), createBlock("div", _hoisted_129, [_ctx.title ? (openBlock(), createBlock("div", _hoisted_211, toDisplayString(_ctx.title), 1)) : createCommentVNode("", true), renderSlot(_ctx.$slots, "default")])) : renderSlot(_ctx.$slots, "default", {
    key: 1
  })], 2);
}
var subnavbar_default2 = {
  name: "f7-subnavbar",
  render: render76,
  props: _extends77({
    sliding: Boolean,
    title: String,
    inner: {
      type: Boolean,
      default: true
    }
  }, colorProps),
  setup: function setup80(props) {
    var classes = computed(function() {
      return classNames("subnavbar", {
        sliding: props.sliding
      }, colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/swipeout-actions.js
function _extends78() {
  _extends78 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends78.apply(this, arguments);
}
function render77(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var swipeout_actions_default = {
  name: "f7-swipeout-actions",
  render: render77,
  props: _extends78({
    left: Boolean,
    right: Boolean,
    side: String
  }, colorProps),
  setup: function setup81(props) {
    var side = computed(function() {
      var sideComputed = props.side;
      if (!sideComputed) {
        if (props.left)
          sideComputed = "left";
        if (props.right)
          sideComputed = "right";
      }
      return sideComputed;
    });
    var classes = computed(function() {
      return classNames("swipeout-actions-" + side.value, colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/components/swipeout-button.js
function _extends79() {
  _extends79 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends79.apply(this, arguments);
}
function render78(_ctx, _cache) {
  return openBlock(), createBlock("a", {
    href: _ctx.href || "#",
    "data-confirm": _ctx.confirmText || void 0,
    "data-confirm-title": _ctx.confirmTitle || void 0,
    class: _ctx.classes,
    onClick: _cache[1] || (_cache[1] = function() {
      return _ctx.onClick && _ctx.onClick.apply(_ctx, arguments);
    })
  }, [createTextVNode(toDisplayString(_ctx.text) + " ", 1), renderSlot(_ctx.$slots, "default")], 10, ["href", "data-confirm", "data-confirm-title"]);
}
var swipeout_button_default = {
  name: "f7-swipeout-button",
  render: render78,
  props: _extends79({
    text: String,
    confirmTitle: String,
    confirmText: String,
    overswipe: Boolean,
    close: Boolean,
    delete: Boolean,
    href: String
  }, colorProps),
  emits: ["click"],
  setup: function setup82(props, _ref) {
    var emit = _ref.emit;
    var onClick = function onClick2(e) {
      emit("click", e);
    };
    var classes = computed(function() {
      return classNames({
        "swipeout-overswipe": props.overswipe,
        "swipeout-delete": props.delete,
        "swipeout-close": props.close
      }, colorClasses(props));
    });
    return {
      classes,
      onClick
    };
  }
};

// node_modules/swiper/esm/vue/utils.js
function isObject2(o) {
  return typeof o === "object" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === "Object";
}
function extend2(target, src) {
  var noExtend = ["__proto__", "constructor", "prototype"];
  Object.keys(src).filter(function(key) {
    return noExtend.indexOf(key) < 0;
  }).forEach(function(key) {
    if (typeof target[key] === "undefined")
      target[key] = src[key];
    else if (isObject2(src[key]) && isObject2(target[key]) && Object.keys(src[key]).length > 0) {
      if (src[key].__swiper__)
        target[key] = src[key];
      else
        extend2(target[key], src[key]);
    } else {
      target[key] = src[key];
    }
  });
}
function needsNavigation(props) {
  if (props === void 0) {
    props = {};
  }
  return props.navigation && typeof props.navigation.nextEl === "undefined" && typeof props.navigation.prevEl === "undefined";
}
function needsPagination(props) {
  if (props === void 0) {
    props = {};
  }
  return props.pagination && typeof props.pagination.el === "undefined";
}
function needsScrollbar(props) {
  if (props === void 0) {
    props = {};
  }
  return props.scrollbar && typeof props.scrollbar.el === "undefined";
}
function uniqueClasses(classNames2) {
  if (classNames2 === void 0) {
    classNames2 = "";
  }
  var classes = classNames2.split(" ").map(function(c) {
    return c.trim();
  }).filter(function(c) {
    return !!c;
  });
  var unique = [];
  classes.forEach(function(c) {
    if (unique.indexOf(c) < 0)
      unique.push(c);
  });
  return unique.join(" ");
}

// node_modules/swiper/esm/vue/params-list.js
var paramsList = [
  "init",
  "_direction",
  "touchEventsTarget",
  "initialSlide",
  "_speed",
  "cssMode",
  "updateOnWindowResize",
  "resizeObserver",
  "nested",
  "_width",
  "_height",
  "preventInteractionOnTransition",
  "userAgent",
  "url",
  "_edgeSwipeDetection",
  "_edgeSwipeThreshold",
  "_freeMode",
  "_freeModeMomentum",
  "_freeModeMomentumRatio",
  "_freeModeMomentumBounce",
  "_freeModeMomentumBounceRatio",
  "_freeModeMomentumVelocityRatio",
  "_freeModeSticky",
  "_freeModeMinimumVelocity",
  "_autoHeight",
  "setWrapperSize",
  "virtualTranslate",
  "_effect",
  "breakpoints",
  "_spaceBetween",
  "_slidesPerView",
  "_slidesPerColumn",
  "_slidesPerColumnFill",
  "_slidesPerGroup",
  "_slidesPerGroupSkip",
  "_centeredSlides",
  "_centeredSlidesBounds",
  "_slidesOffsetBefore",
  "_slidesOffsetAfter",
  "normalizeSlideIndex",
  "_centerInsufficientSlides",
  "_watchOverflow",
  "roundLengths",
  "touchRatio",
  "touchAngle",
  "simulateTouch",
  "_shortSwipes",
  "_longSwipes",
  "longSwipesRatio",
  "longSwipesMs",
  "_followFinger",
  "allowTouchMove",
  "_threshold",
  "touchMoveStopPropagation",
  "touchStartPreventDefault",
  "touchStartForcePreventDefault",
  "touchReleaseOnEdges",
  "uniqueNavElements",
  "_resistance",
  "_resistanceRatio",
  "_watchSlidesProgress",
  "_watchSlidesVisibility",
  "_grabCursor",
  "preventClicks",
  "preventClicksPropagation",
  "_slideToClickedSlide",
  "_preloadImages",
  "updateOnImagesReady",
  "_loop",
  "_loopAdditionalSlides",
  "_loopedSlides",
  "_loopFillGroupWithBlank",
  "loopPreventsSlide",
  "_allowSlidePrev",
  "_allowSlideNext",
  "_swipeHandler",
  "_noSwiping",
  "noSwipingClass",
  "noSwipingSelector",
  "passiveListeners",
  "containerModifierClass",
  "slideClass",
  "slideBlankClass",
  "slideActiveClass",
  "slideDuplicateActiveClass",
  "slideVisibleClass",
  "slideDuplicateClass",
  "slideNextClass",
  "slideDuplicateNextClass",
  "slidePrevClass",
  "slideDuplicatePrevClass",
  "wrapperClass",
  "runCallbacksOnInit",
  "observer",
  "observeParents",
  "observeSlideChildren",
  "a11y",
  "autoplay",
  "_controller",
  "coverflowEffect",
  "cubeEffect",
  "fadeEffect",
  "flipEffect",
  "hashNavigation",
  "history",
  "keyboard",
  "lazy",
  "mousewheel",
  "_navigation",
  "_pagination",
  "parallax",
  "_scrollbar",
  "_thumbs",
  "virtual",
  "zoom"
];

// node_modules/swiper/esm/vue/get-params.js
function getParams(obj) {
  if (obj === void 0) {
    obj = {};
  }
  var params = {
    on: {}
  };
  var passedParams = {};
  extend2(params, core_class_default.defaults);
  extend2(params, core_class_default.extendedDefaults);
  params._emitClasses = true;
  params.init = false;
  var rest = {};
  var allowedParams = paramsList.map(function(key) {
    return key.replace(/_/, "");
  });
  var plainObj = Object.assign({}, obj);
  Object.keys(plainObj).forEach(function(key) {
    if (typeof obj[key] === "undefined")
      return;
    if (allowedParams.indexOf(key) >= 0) {
      if (isObject2(obj[key])) {
        params[key] = {};
        passedParams[key] = {};
        extend2(params[key], obj[key]);
        extend2(passedParams[key], obj[key]);
      } else {
        params[key] = obj[key];
        passedParams[key] = obj[key];
      }
    } else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === "function") {
      params.on["" + key[2].toLowerCase() + key.substr(3)] = obj[key];
    } else {
      rest[key] = obj[key];
    }
  });
  ["navigation", "pagination", "scrollbar"].forEach(function(key) {
    if (params[key] === true)
      params[key] = {};
  });
  return {
    params,
    passedParams,
    rest
  };
}

// node_modules/swiper/esm/vue/init-swiper.js
function initSwiper(swiperParams) {
  return new core_class_default(swiperParams);
}
function mountSwiper(_ref, swiperParams) {
  var el = _ref.el, nextEl = _ref.nextEl, prevEl = _ref.prevEl, paginationEl = _ref.paginationEl, scrollbarEl = _ref.scrollbarEl, swiper = _ref.swiper;
  if (needsNavigation(swiperParams) && nextEl && prevEl) {
    swiper.params.navigation.nextEl = nextEl;
    swiper.originalParams.navigation.nextEl = nextEl;
    swiper.params.navigation.prevEl = prevEl;
    swiper.originalParams.navigation.prevEl = prevEl;
  }
  if (needsPagination(swiperParams) && paginationEl) {
    swiper.params.pagination.el = paginationEl;
    swiper.originalParams.pagination.el = paginationEl;
  }
  if (needsScrollbar(swiperParams) && scrollbarEl) {
    swiper.params.scrollbar.el = scrollbarEl;
    swiper.originalParams.scrollbar.el = scrollbarEl;
  }
  swiper.init(el);
}

// node_modules/swiper/esm/vue/loop.js
function _extends80() {
  _extends80 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends80.apply(this, arguments);
}
function calcLoopedSlides(slides, swiperParams) {
  var slidesPerViewParams = swiperParams.slidesPerView;
  if (swiperParams.breakpoints) {
    var breakpoint = core_class_default.prototype.getBreakpoint(swiperParams.breakpoints);
    var breakpointOnlyParams = breakpoint in swiperParams.breakpoints ? swiperParams.breakpoints[breakpoint] : void 0;
    if (breakpointOnlyParams && breakpointOnlyParams.slidesPerView) {
      slidesPerViewParams = breakpointOnlyParams.slidesPerView;
    }
  }
  var loopedSlides = Math.ceil(parseFloat(swiperParams.loopedSlides || slidesPerViewParams, 10));
  loopedSlides += swiperParams.loopAdditionalSlides;
  if (loopedSlides > slides.length) {
    loopedSlides = slides.length;
  }
  return loopedSlides;
}
function renderLoop(swiperRef, slides, swiperParams) {
  var modifiedSlides = slides.map(function(child, index) {
    if (!child.props)
      child.props = {};
    child.props.swiperRef = swiperRef;
    child.props["data-swiper-slide-index"] = index;
    return child;
  });
  function duplicateSlide(child, index, position) {
    if (!child.props)
      child.props = {};
    return h(child.type, _extends80({}, child.props, {
      key: child.key + "-duplicate-" + index + "-" + position,
      class: (child.props.className || "") + " " + swiperParams.slideDuplicateClass + " " + (child.props.class || "")
    }), child.children);
  }
  if (swiperParams.loopFillGroupWithBlank) {
    var blankSlidesNum = swiperParams.slidesPerGroup - modifiedSlides.length % swiperParams.slidesPerGroup;
    if (blankSlidesNum !== swiperParams.slidesPerGroup) {
      for (var i = 0; i < blankSlidesNum; i += 1) {
        var blankSlide = h("div", {
          class: swiperParams.slideClass + " " + swiperParams.slideBlankClass
        });
        modifiedSlides.push(blankSlide);
      }
    }
  }
  if (swiperParams.slidesPerView === "auto" && !swiperParams.loopedSlides) {
    swiperParams.loopedSlides = modifiedSlides.length;
  }
  var loopedSlides = calcLoopedSlides(modifiedSlides, swiperParams);
  var prependSlides = [];
  var appendSlides = [];
  modifiedSlides.forEach(function(child, index) {
    if (index < loopedSlides) {
      appendSlides.push(duplicateSlide(child, index, "prepend"));
    }
    if (index < modifiedSlides.length && index >= modifiedSlides.length - loopedSlides) {
      prependSlides.push(duplicateSlide(child, index, "append"));
    }
  });
  if (swiperRef.value) {
    swiperRef.value.loopedSlides = loopedSlides;
  }
  return [].concat(prependSlides, modifiedSlides, appendSlides);
}

// node_modules/swiper/esm/vue/get-changed-params.js
function getChangedParams(swiperParams, oldParams, children, oldChildren) {
  var keys = [];
  if (!oldParams)
    return keys;
  var addKey = function addKey2(key) {
    if (keys.indexOf(key) < 0)
      keys.push(key);
  };
  var oldChildrenKeys = oldChildren.map(function(child) {
    return child.props && child.props.key;
  });
  var childrenKeys = children.map(function(child) {
    return child.props && child.props.key;
  });
  if (oldChildrenKeys.join("") !== childrenKeys.join(""))
    keys.push("children");
  if (oldChildren.length !== children.length)
    keys.push("children");
  var watchParams = paramsList.filter(function(key) {
    return key[0] === "_";
  }).map(function(key) {
    return key.replace(/_/, "");
  });
  watchParams.forEach(function(key) {
    if (key in swiperParams && key in oldParams) {
      if (isObject2(swiperParams[key]) && isObject2(oldParams[key])) {
        var newKeys = Object.keys(swiperParams[key]);
        var oldKeys = Object.keys(oldParams[key]);
        if (newKeys.length !== oldKeys.length) {
          addKey(key);
        } else {
          newKeys.forEach(function(newKey) {
            if (swiperParams[key][newKey] !== oldParams[key][newKey]) {
              addKey(key);
            }
          });
          oldKeys.forEach(function(oldKey) {
            if (swiperParams[key][oldKey] !== oldParams[key][oldKey])
              addKey(key);
          });
        }
      } else if (swiperParams[key] !== oldParams[key]) {
        addKey(key);
      }
    }
  });
  return keys;
}

// node_modules/swiper/esm/vue/get-children.js
function getChildren(originalSlots, slidesRef, oldSlidesRef) {
  if (originalSlots === void 0) {
    originalSlots = {};
  }
  var slides = [];
  var slots = {
    "container-start": [],
    "container-end": [],
    "wrapper-start": [],
    "wrapper-end": []
  };
  var getSlidesFromElements = function getSlidesFromElements2(els, slotName) {
    if (!Array.isArray(els)) {
      return;
    }
    els.forEach(function(vnode) {
      var isFragment = typeof vnode.type === "symbol";
      if (slotName === "default")
        slotName = "container-end";
      if (isFragment && vnode.children) {
        getSlidesFromElements2(vnode.children, "default");
      } else if (vnode.type && vnode.type.name === "SwiperSlide") {
        slides.push(vnode);
      } else if (slots[slotName]) {
        slots[slotName].push(vnode);
      }
    });
  };
  Object.keys(originalSlots).forEach(function(slotName) {
    var els = originalSlots[slotName]();
    getSlidesFromElements(els, slotName);
  });
  oldSlidesRef.value = slidesRef.value;
  slidesRef.value = slides;
  return {
    slides,
    slots
  };
}

// node_modules/swiper/esm/vue/update-swiper.js
function updateSwiper(swiper, slides, passedParams, changedParams) {
  var updateParams = changedParams.filter(function(key) {
    return key !== "children" && key !== "direction";
  });
  var currentParams = swiper.params, pagination = swiper.pagination, navigation = swiper.navigation, scrollbar = swiper.scrollbar, virtual = swiper.virtual, thumbs = swiper.thumbs;
  var needThumbsInit;
  var needControllerInit;
  var needPaginationInit;
  var needScrollbarInit;
  var needNavigationInit;
  if (changedParams.includes("thumbs") && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper) {
    needThumbsInit = true;
  }
  if (changedParams.includes("controller") && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {
    needControllerInit = true;
  }
  if (changedParams.includes("pagination") && passedParams.pagination && passedParams.pagination.el && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {
    needPaginationInit = true;
  }
  if (changedParams.includes("scrollbar") && passedParams.scrollbar && passedParams.scrollbar.el && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {
    needScrollbarInit = true;
  }
  if (changedParams.includes("navigation") && passedParams.navigation && passedParams.navigation.prevEl && passedParams.navigation.nextEl && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {
    needNavigationInit = true;
  }
  updateParams.forEach(function(key) {
    if (isObject2(currentParams[key]) && isObject2(passedParams[key])) {
      extend2(currentParams[key], passedParams[key]);
    } else {
      currentParams[key] = passedParams[key];
    }
  });
  if (changedParams.includes("children") && virtual && currentParams.virtual.enabled) {
    virtual.slides = slides;
    virtual.update(true);
  } else if (changedParams.includes("children") && swiper.lazy && swiper.params.lazy.enabled) {
    swiper.lazy.load();
  }
  if (needThumbsInit) {
    var initialized = thumbs.init();
    if (initialized)
      thumbs.update(true);
  }
  if (needControllerInit) {
    swiper.controller.control = currentParams.controller.control;
  }
  if (needPaginationInit) {
    pagination.init();
    pagination.render();
    pagination.update();
  }
  if (needScrollbarInit) {
    scrollbar.init();
    scrollbar.updateSize();
    scrollbar.setTranslate();
  }
  if (needNavigationInit) {
    navigation.init();
    navigation.update();
  }
  if (changedParams.includes("allowSlideNext")) {
    swiper.allowSlideNext = passedParams.allowSlideNext;
  }
  if (changedParams.includes("allowSlidePrev")) {
    swiper.allowSlidePrev = passedParams.allowSlidePrev;
  }
  if (changedParams.includes("direction")) {
    swiper.changeDirection(passedParams.direction, false);
  }
  swiper.update();
}

// node_modules/swiper/esm/vue/virtual.js
function _extends81() {
  _extends81 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends81.apply(this, arguments);
}
function updateOnVirtualData(swiper) {
  if (!swiper || swiper.destroyed || !swiper.params.virtual || swiper.params.virtual && !swiper.params.virtual.enabled)
    return;
  swiper.updateSlides();
  swiper.updateProgress();
  swiper.updateSlidesClasses();
  if (swiper.lazy && swiper.params.lazy.enabled) {
    swiper.lazy.load();
  }
}
function renderVirtual(swiperRef, slides, virtualData) {
  var _ref;
  if (!virtualData)
    return null;
  var style = swiperRef.value.isHorizontal() ? (_ref = {}, _ref[swiperRef.value.rtlTranslate ? "right" : "left"] = virtualData.offset + "px", _ref) : {
    top: virtualData.offset + "px"
  };
  return slides.filter(function(slide, index) {
    return index >= virtualData.from && index <= virtualData.to;
  }).map(function(slide) {
    if (!slide.props)
      slide.props = {};
    if (!slide.props.style)
      slide.props.style = {};
    slide.props.swiperRef = swiperRef;
    slide.props.style = style;
    return h(slide.type, _extends81({}, slide.props), slide.children);
  });
}

// node_modules/swiper/esm/vue/swiper.js
var Swiper = {
  name: "Swiper",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    wrapperTag: {
      type: String,
      default: "div"
    },
    init: {
      type: Boolean,
      default: void 0
    },
    direction: {
      type: String,
      default: void 0
    },
    touchEventsTarget: {
      type: String,
      default: void 0
    },
    initialSlide: {
      type: Number,
      default: void 0
    },
    speed: {
      type: Number,
      default: void 0
    },
    cssMode: {
      type: Boolean,
      default: void 0
    },
    updateOnWindowResize: {
      type: Boolean,
      default: void 0
    },
    resizeObserver: {
      type: Boolean,
      default: void 0
    },
    nested: {
      type: Boolean,
      default: void 0
    },
    width: {
      type: Number,
      default: void 0
    },
    height: {
      type: Number,
      default: void 0
    },
    preventInteractionOnTransition: {
      type: Boolean,
      default: void 0
    },
    userAgent: {
      type: String,
      default: void 0
    },
    url: {
      type: String,
      default: void 0
    },
    edgeSwipeDetection: {
      type: [Boolean, String],
      default: void 0
    },
    edgeSwipeThreshold: {
      type: Number,
      default: void 0
    },
    freeMode: {
      type: Boolean,
      default: void 0
    },
    freeModeMomentum: {
      type: Boolean,
      default: void 0
    },
    freeModeMomentumRatio: {
      type: Number,
      default: void 0
    },
    freeModeMomentumBounce: {
      type: Boolean,
      default: void 0
    },
    freeModeMomentumBounceRatio: {
      type: Number,
      default: void 0
    },
    freeModeMomentumVelocityRatio: {
      type: Number,
      default: void 0
    },
    freeModeSticky: {
      type: Boolean,
      default: void 0
    },
    freeModeMinimumVelocity: {
      type: Number,
      default: void 0
    },
    autoHeight: {
      type: Boolean,
      default: void 0
    },
    setWrapperSize: {
      type: Boolean,
      default: void 0
    },
    virtualTranslate: {
      type: Boolean,
      default: void 0
    },
    effect: {
      type: String,
      default: void 0
    },
    breakpoints: {
      type: Object,
      default: void 0
    },
    spaceBetween: {
      type: Number,
      default: void 0
    },
    slidesPerView: {
      type: [Number, String],
      default: void 0
    },
    slidesPerColumn: {
      type: Number,
      default: void 0
    },
    slidesPerColumnFill: {
      type: String,
      default: void 0
    },
    slidesPerGroup: {
      type: Number,
      default: void 0
    },
    slidesPerGroupSkip: {
      type: Number,
      default: void 0
    },
    centeredSlides: {
      type: Boolean,
      default: void 0
    },
    centeredSlidesBounds: {
      type: Boolean,
      default: void 0
    },
    slidesOffsetBefore: {
      type: Number,
      default: void 0
    },
    slidesOffsetAfter: {
      type: Number,
      default: void 0
    },
    normalizeSlideIndex: {
      type: Boolean,
      default: void 0
    },
    centerInsufficientSlides: {
      type: Boolean,
      default: void 0
    },
    watchOverflow: {
      type: Boolean,
      default: void 0
    },
    roundLengths: {
      type: Boolean,
      default: void 0
    },
    touchRatio: {
      type: Number,
      default: void 0
    },
    touchAngle: {
      type: Number,
      default: void 0
    },
    simulateTouch: {
      type: Boolean,
      default: void 0
    },
    shortSwipes: {
      type: Boolean,
      default: void 0
    },
    longSwipes: {
      type: Boolean,
      default: void 0
    },
    longSwipesRatio: {
      type: Number,
      default: void 0
    },
    longSwipesMs: {
      type: Number,
      default: void 0
    },
    followFinger: {
      type: Boolean,
      default: void 0
    },
    allowTouchMove: {
      type: Boolean,
      default: void 0
    },
    threshold: {
      type: Number,
      default: void 0
    },
    touchMoveStopPropagation: {
      type: Boolean,
      default: void 0
    },
    touchStartPreventDefault: {
      type: Boolean,
      default: void 0
    },
    touchStartForcePreventDefault: {
      type: Boolean,
      default: void 0
    },
    touchReleaseOnEdges: {
      type: Boolean,
      default: void 0
    },
    uniqueNavElements: {
      type: Boolean,
      default: void 0
    },
    resistance: {
      type: Boolean,
      default: void 0
    },
    resistanceRatio: {
      type: Number,
      default: void 0
    },
    watchSlidesProgress: {
      type: Boolean,
      default: void 0
    },
    watchSlidesVisibility: {
      type: Boolean,
      default: void 0
    },
    grabCursor: {
      type: Boolean,
      default: void 0
    },
    preventClicks: {
      type: Boolean,
      default: void 0
    },
    preventClicksPropagation: {
      type: Boolean,
      default: void 0
    },
    slideToClickedSlide: {
      type: Boolean,
      default: void 0
    },
    preloadImages: {
      type: Boolean,
      default: void 0
    },
    updateOnImagesReady: {
      type: Boolean,
      default: void 0
    },
    loop: {
      type: Boolean,
      default: void 0
    },
    loopAdditionalSlides: {
      type: Number,
      default: void 0
    },
    loopedSlides: {
      type: Number,
      default: void 0
    },
    loopFillGroupWithBlank: {
      type: Boolean,
      default: void 0
    },
    loopPreventsSlide: {
      type: Boolean,
      default: void 0
    },
    allowSlidePrev: {
      type: Boolean,
      default: void 0
    },
    allowSlideNext: {
      type: Boolean,
      default: void 0
    },
    swipeHandler: {
      type: Boolean,
      default: void 0
    },
    noSwiping: {
      type: Boolean,
      default: void 0
    },
    noSwipingClass: {
      type: String,
      default: void 0
    },
    noSwipingSelector: {
      type: String,
      default: void 0
    },
    passiveListeners: {
      type: Boolean,
      default: void 0
    },
    containerModifierClass: {
      type: String,
      default: void 0
    },
    slideClass: {
      type: String,
      default: void 0
    },
    slideBlankClass: {
      type: String,
      default: void 0
    },
    slideActiveClass: {
      type: String,
      default: void 0
    },
    slideDuplicateActiveClass: {
      type: String,
      default: void 0
    },
    slideVisibleClass: {
      type: String,
      default: void 0
    },
    slideDuplicateClass: {
      type: String,
      default: void 0
    },
    slideNextClass: {
      type: String,
      default: void 0
    },
    slideDuplicateNextClass: {
      type: String,
      default: void 0
    },
    slidePrevClass: {
      type: String,
      default: void 0
    },
    slideDuplicatePrevClass: {
      type: String,
      default: void 0
    },
    wrapperClass: {
      type: String,
      default: void 0
    },
    runCallbacksOnInit: {
      type: Boolean,
      default: void 0
    },
    observer: {
      type: Boolean,
      default: void 0
    },
    observeParents: {
      type: Boolean,
      default: void 0
    },
    observeSlideChildren: {
      type: Boolean,
      default: void 0
    },
    a11y: {
      type: [Boolean, Object],
      default: void 0
    },
    autoplay: {
      type: [Boolean, Object],
      default: void 0
    },
    controller: {
      type: Object,
      default: void 0
    },
    coverflowEffect: {
      type: Object,
      default: void 0
    },
    cubeEffect: {
      type: Object,
      default: void 0
    },
    fadeEffect: {
      type: Object,
      default: void 0
    },
    flipEffect: {
      type: Object,
      default: void 0
    },
    hashNavigation: {
      type: [Boolean, Object],
      default: void 0
    },
    history: {
      type: [Boolean, Object],
      default: void 0
    },
    keyboard: {
      type: [Boolean, Object],
      default: void 0
    },
    lazy: {
      type: [Boolean, Object],
      default: void 0
    },
    mousewheel: {
      type: [Boolean, Object],
      default: void 0
    },
    navigation: {
      type: [Boolean, Object],
      default: void 0
    },
    pagination: {
      type: [Boolean, Object],
      default: void 0
    },
    parallax: {
      type: [Boolean, Object],
      default: void 0
    },
    scrollbar: {
      type: [Boolean, Object],
      default: void 0
    },
    thumbs: {
      type: Object,
      default: void 0
    },
    virtual: {
      type: [Boolean, Object],
      default: void 0
    },
    zoom: {
      type: [Boolean, Object],
      default: void 0
    }
  },
  emits: ["_beforeBreakpoint", "_containerClasses", "_slideClass", "_slideClasses", "_swiper", "activeIndexChange", "afterInit", "autoplay", "autoplayStart", "autoplayStop", "beforeDestroy", "beforeInit", "beforeLoopFix", "beforeResize", "beforeSlideChangeStart", "beforeTransitionStart", "breakpoint", "changeDirection", "click", "doubleTap", "doubleClick", "destroy", "fromEdge", "hashChange", "hashSet", "imagesReady", "init", "keyPress", "lazyImageLoad", "lazyImageReady", "loopFix", "momentumBounce", "navigationHide", "navigationShow", "observerUpdate", "orientationchange", "paginationHide", "paginationRender", "paginationShow", "paginationUpdate", "progress", "reachBeginning", "reachEnd", "realIndexChange", "resize", "scroll", "scrollbarDragEnd", "scrollbarDragMove", "scrollbarDragStart", "setTransition", "setTranslate", "slideChange", "slideChangeTransitionEnd", "slideChangeTransitionStart", "slideNextTransitionEnd", "slideNextTransitionStart", "slidePrevTransitionEnd", "slidePrevTransitionStart", "slideResetTransitionStart", "slideResetTransitionEnd", "sliderMove", "sliderFirstMove", "slidesLengthChange", "slidesGridLengthChange", "snapGridLengthChange", "snapIndexChange", "swiper", "tap", "toEdge", "touchEnd", "touchMove", "touchMoveOpposite", "touchStart", "transitionEnd", "transitionStart", "update", "zoomChange"],
  setup: function setup83(props, _ref) {
    var originalSlots = _ref.slots, emit = _ref.emit;
    var Tag = props.tag, WrapperTag = props.wrapperTag;
    var containerClasses = ref("swiper-container");
    var virtualData = ref(null);
    var breakpointChanged = ref(false);
    var initializedRef = ref(false);
    var swiperElRef = ref(null);
    var swiperRef = ref(null);
    var oldPassedParamsRef = ref(null);
    var slidesRef = {
      value: []
    };
    var oldSlidesRef = {
      value: []
    };
    var nextElRef = ref(null);
    var prevElRef = ref(null);
    var paginationElRef = ref(null);
    var scrollbarElRef = ref(null);
    var _getParams = getParams(props), swiperParams = _getParams.params, passedParams = _getParams.passedParams;
    getChildren(originalSlots, slidesRef, oldSlidesRef);
    oldPassedParamsRef.value = passedParams;
    oldSlidesRef.value = slidesRef.value;
    var onBeforeBreakpoint = function onBeforeBreakpoint2() {
      getChildren(originalSlots, slidesRef, oldSlidesRef);
      breakpointChanged.value = true;
    };
    swiperParams.onAny = function(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      emit.apply(void 0, [event].concat(args));
    };
    Object.assign(swiperParams.on, {
      _beforeBreakpoint: onBeforeBreakpoint,
      _containerClasses: function _containerClasses(swiper, classes) {
        containerClasses.value = classes;
      }
    });
    swiperRef.value = initSwiper(swiperParams);
    swiperRef.value.loopCreate = function() {
    };
    swiperRef.value.loopDestroy = function() {
    };
    if (swiperParams.loop) {
      swiperRef.value.loopedSlides = calcLoopedSlides(slidesRef.value, swiperParams);
    }
    if (swiperRef.value.virtual && swiperRef.value.params.virtual.enabled) {
      swiperRef.value.virtual.slides = slidesRef.value;
      var extendWith = {
        cache: false,
        renderExternal: function renderExternal(data) {
          virtualData.value = data;
        },
        renderExternalUpdate: false
      };
      extend2(swiperRef.value.params.virtual, extendWith);
      extend2(swiperRef.value.originalParams.virtual, extendWith);
    }
    onUpdated(function() {
      if (!initializedRef.value && swiperRef.value) {
        swiperRef.value.emitSlidesClasses();
        initializedRef.value = true;
      }
      var _getParams2 = getParams(props), newPassedParams = _getParams2.passedParams;
      var changedParams = getChangedParams(newPassedParams, oldPassedParamsRef.value, slidesRef.value, oldSlidesRef.value);
      oldPassedParamsRef.value = newPassedParams;
      if ((changedParams.length || breakpointChanged.value) && swiperRef.value && !swiperRef.value.destroyed) {
        updateSwiper(swiperRef.value, slidesRef.value, newPassedParams, changedParams);
      }
      breakpointChanged.value = false;
    });
    watch(virtualData, function() {
      nextTick(function() {
        updateOnVirtualData(swiperRef.value);
      });
    });
    onMounted(function() {
      if (!swiperElRef.value)
        return;
      mountSwiper({
        el: swiperElRef.value,
        nextEl: nextElRef.value,
        prevEl: prevElRef.value,
        paginationEl: paginationElRef.value,
        scrollbarEl: scrollbarElRef.value,
        swiper: swiperRef.value
      }, swiperParams);
      emit("swiper", swiperRef.value);
    });
    onBeforeUnmount(function() {
      if (swiperRef.value && !swiperRef.value.destroyed) {
        swiperRef.value.destroy(true, false);
      }
    });
    function renderSlides(slides) {
      if (swiperParams.virtual) {
        return renderVirtual(swiperRef, slides, virtualData.value);
      }
      if (!swiperParams.loop || swiperRef.value && swiperRef.value.destroyed) {
        slides.forEach(function(slide) {
          if (!slide.props)
            slide.props = {};
          slide.props.swiperRef = swiperRef;
        });
        return slides;
      }
      return renderLoop(swiperRef, slides, swiperParams);
    }
    return function() {
      var _getChildren = getChildren(originalSlots, slidesRef, oldSlidesRef), slides = _getChildren.slides, slots = _getChildren.slots;
      return h(Tag, {
        ref: swiperElRef,
        class: uniqueClasses(containerClasses.value)
      }, [slots["container-start"], needsNavigation(props) && [h("div", {
        ref: prevElRef,
        class: "swiper-button-prev"
      }), h("div", {
        ref: nextElRef,
        class: "swiper-button-next"
      })], needsScrollbar(props) && h("div", {
        ref: scrollbarElRef,
        class: "swiper-scrollbar"
      }), needsPagination(props) && h("div", {
        ref: paginationElRef,
        class: "swiper-pagination"
      }), h(WrapperTag, {
        class: "swiper-wrapper"
      }, [slots["wrapper-start"], renderSlides(slides), slots["wrapper-end"]]), slots["container-end"]]);
    };
  }
};

// node_modules/swiper/esm/vue/swiper-slide.js
var SwiperSlide = {
  name: "SwiperSlide",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    swiperRef: Object,
    zoom: {
      type: Boolean,
      default: void 0
    },
    virtualIndex: {
      type: [String, Number],
      default: void 0
    }
  },
  setup: function setup84(props, _ref) {
    var slots = _ref.slots;
    var eventAttached = false;
    var swiperRef = props.swiperRef;
    var slideElRef = ref(null);
    var slideClasses = ref("swiper-slide");
    function updateClasses(swiper, el, classNames2) {
      if (el === slideElRef.value) {
        slideClasses.value = classNames2;
      }
    }
    onMounted(function() {
      if (!swiperRef.value)
        return;
      swiperRef.value.on("_slideClass", updateClasses);
      eventAttached = true;
    });
    onBeforeUpdate(function() {
      if (eventAttached || !swiperRef || !swiperRef.value)
        return;
      swiperRef.value.on("_slideClass", updateClasses);
      eventAttached = true;
    });
    onUpdated(function() {
      if (!slideElRef.value || !swiperRef || !swiperRef.value)
        return;
      if (swiperRef.value.destroyed) {
        if (slideClasses.value !== "swiper-slide") {
          slideClasses.value = "swiper-slide";
        }
      }
    });
    onBeforeUnmount(function() {
      if (!swiperRef || !swiperRef.value)
        return;
      swiperRef.value.off("_slideClass", updateClasses);
    });
    var slideData = computed(function() {
      return {
        isActive: slideClasses.value.indexOf("swiper-slide-active") >= 0 || slideClasses.value.indexOf("swiper-slide-duplicate-active") >= 0,
        isVisible: slideClasses.value.indexOf("swiper-slide-visible") >= 0,
        isDuplicate: slideClasses.value.indexOf("swiper-slide-duplicate") >= 0,
        isPrev: slideClasses.value.indexOf("swiper-slide-prev") >= 0 || slideClasses.value.indexOf("swiper-slide-duplicate-prev") >= 0,
        isNext: slideClasses.value.indexOf("swiper-slide-next") >= 0 || slideClasses.value.indexOf("swiper-slide-duplicate-next") >= 0
      };
    });
    return function() {
      return h(props.tag, {
        class: uniqueClasses("" + slideClasses.value),
        ref: slideElRef,
        "data-swiper-slide-index": props.virtualIndex
      }, props.zoom ? h("div", {
        class: "swiper-zoom-container",
        "data-swiper-zoom": typeof props.zoom === "number" ? props.zoom : void 0
      }, slots.default && slots.default(slideData.value)) : slots.default && slots.default(slideData.value));
    };
  }
};

// node_modules/framework7-vue/esm/components/swiper-slide.js
var swiper_slide_default = SwiperSlide;

// node_modules/framework7-vue/esm/components/swiper.js
var swiper_default = Swiper;

// node_modules/framework7-vue/esm/components/tab.js
function _extends82() {
  _extends82 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends82.apply(this, arguments);
}
function render79(_ctx, _cache) {
  var _mergeProps2;
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [_ctx.tabContent ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.getComponent(_ctx.tabContent)), mergeProps((_mergeProps2 = {
    key: 0
  }, _mergeProps2["key"] = _ctx.tabContent.id, _mergeProps2), _ctx.getProps(_ctx.tabContent)), null, 16)) : renderSlot(_ctx.$slots, "default", {
    key: 1
  })], 2);
}
var tab_default = {
  name: "f7-tab",
  render: render79,
  props: _extends82({
    tabActive: Boolean
  }, colorProps),
  emits: ["tab:show", "tab:hide"],
  setup: function setup85(props, _ref) {
    var emit = _ref.emit;
    var elRef = ref(null);
    var routerData = ref(null);
    var route = inject("f7route", null);
    var router = inject("f7route", null);
    var initialTabContent = null;
    if (!routerData.value && route && route.route && route.route.tab && route.route.tab.id === props.id) {
      var _route$route$tab = route.route.tab, component = _route$route$tab.component, asyncComponent = _route$route$tab.asyncComponent;
      if (component || asyncComponent) {
        initialTabContent = {
          id: getComponentId(),
          component: component || asyncComponent,
          isAsync: !!asyncComponent,
          props: _extends82({
            f7router: router,
            f7route: route
          }, route.params)
        };
      }
    }
    var tabContent = ref(initialTabContent || null);
    var setTabContent = function setTabContent2(newContent) {
      tabContent.value = newContent;
    };
    if (f7 && !routerData.value) {
      routerData.value = {
        setTabContent
      };
      f7routers.tabs.push(routerData.value);
    }
    onMounted(function() {
      if (elRef.value && initialTabContent) {
        elRef.value.f7RouterTabLoaded = true;
      }
      f7ready(function() {
        if (!routerData.value) {
          routerData.value = {
            el: elRef.value,
            setTabContent
          };
          f7routers.tabs.push(routerData.value);
        } else {
          routerData.value.el = elRef.value;
        }
      });
    });
    onBeforeUnmount(function() {
      if (!routerData.value)
        return;
      f7routers.tabs.splice(f7routers.tabs.indexOf(routerData.value), 1);
      routerData.value = null;
    });
    onUpdated(function() {
      if (!routerData.value || !f7)
        return;
      f7events.emit("tabRouterDidUpdate", routerData.value);
    });
    useTab(elRef, emit);
    var classes = computed(function() {
      return classNames("tab", {
        "tab-active": props.tabActive
      }, colorClasses(props));
    });
    var getComponent = function getComponent2(content) {
      return toRaw(content.component);
    };
    var getProps = function getProps2(content) {
      var tabComponent = content.component, tabProps = content.props;
      var keys = [];
      var passProps = {};
      if (tabComponent && tabComponent.props)
        keys = Object.keys(tabComponent.props);
      keys.forEach(function(key) {
        if (key in tabProps)
          passProps[key] = tabProps[key];
      });
      return passProps;
    };
    return {
      elRef,
      classes,
      tabContent,
      getComponent,
      getProps
    };
  }
};

// node_modules/framework7-vue/esm/components/tabs.js
function _extends83() {
  _extends83 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends83.apply(this, arguments);
}
function render80(_ctx, _cache) {
  return _ctx.animated || _ctx.swipeable ? (openBlock(), createBlock("div", {
    key: 0,
    ref: "elRef",
    class: _ctx.classNames(_ctx.wrapClasses, _ctx.classes)
  }, [createVNode("div", {
    class: _ctx.tabsClasses
  }, [renderSlot(_ctx.$slots, "default")], 2)], 2)) : (openBlock(), createBlock("div", {
    key: 1,
    ref: "elRef",
    class: _ctx.classNames(_ctx.tabsClasses, _ctx.classes)
  }, [renderSlot(_ctx.$slots, "default")], 2));
}
var tabs_default = {
  name: "f7-tabs",
  render: render80,
  props: _extends83({
    animated: Boolean,
    swipeable: Boolean,
    routable: Boolean,
    swiperParams: {
      type: Object,
      default: void 0
    }
  }, colorProps),
  setup: function setup86(props) {
    var elRef = ref(null);
    onMounted(function() {
      if (!props.swipeable || !props.swiperParams)
        return;
      if (!elRef.value)
        return;
      elRef.value.f7SwiperParams = props.swiperParams;
    });
    var classes = computed(function() {
      return classNames(colorClasses(props));
    });
    var wrapClasses = computed(function() {
      return classNames({
        "tabs-animated-wrap": props.animated,
        "tabs-swipeable-wrap": props.swipeable
      });
    });
    var tabsClasses = computed(function() {
      return classNames({
        tabs: true,
        "tabs-routable": props.routable
      });
    });
    return {
      elRef,
      classes,
      wrapClasses,
      tabsClasses,
      classNames
    };
  }
};

// node_modules/framework7-vue/esm/components/toolbar.js
function _extends84() {
  _extends84 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends84.apply(this, arguments);
}
var _hoisted_130 = {
  key: 0,
  className: "toolbar-inner"
};
function render81(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "before-inner"), _ctx.inner ? (openBlock(), createBlock("div", _hoisted_130, [renderSlot(_ctx.$slots, "default")])) : renderSlot(_ctx.$slots, "default", {
    key: 1
  }), renderSlot(_ctx.$slots, "after-inner")], 2);
}
var toolbar_default2 = {
  name: "f7-toolbar",
  render: render81,
  props: _extends84({
    tabbar: Boolean,
    labels: Boolean,
    scrollable: Boolean,
    hidden: Boolean,
    noShadow: Boolean,
    noHairline: Boolean,
    noBorder: Boolean,
    position: {
      type: String,
      default: void 0
    },
    topMd: {
      type: Boolean,
      default: void 0
    },
    topIos: {
      type: Boolean,
      default: void 0
    },
    topAurora: {
      type: Boolean,
      default: void 0
    },
    top: {
      type: Boolean,
      default: void 0
    },
    bottomMd: {
      type: Boolean,
      default: void 0
    },
    bottomIos: {
      type: Boolean,
      default: void 0
    },
    bottomAurora: {
      type: Boolean,
      default: void 0
    },
    bottom: {
      type: Boolean,
      default: void 0
    },
    inner: {
      type: Boolean,
      default: true
    }
  }, colorProps),
  emits: ["toolbar:hide", "toolbar:show"],
  setup: function setup87(props, _ref) {
    var emit = _ref.emit;
    var elRef = ref(null);
    var theme2 = useTheme();
    var onHide = function onHide2(toolbarEl) {
      if (elRef.value !== toolbarEl)
        return;
      emit("toolbar:hide");
    };
    var onShow = function onShow2(toolbarEl) {
      if (elRef.value !== toolbarEl)
        return;
      emit("toolbar:show");
    };
    var hide = function hide2(animate) {
      if (!f7)
        return;
      f7.toolbar.hide(elRef.value, animate);
    };
    var show = function show2(animate) {
      if (!f7)
        return;
      f7.toolbar.show(elRef.value, animate);
    };
    onMounted(function() {
      if (props.tabbar && f7 && elRef.value) {
        f7.toolbar.setHighlight(elRef.value);
      }
      f7.on("toolbarShow", onShow);
      f7.on("toolbarHide", onHide);
    });
    onBeforeUnmount(function() {
      f7.off("toolbarShow", onShow);
      f7.off("toolbarHide", onHide);
    });
    var TabbarContext = computed(function() {
      return {
        tabbarHasLabels: props.labels
      };
    });
    provide("TabbarContext", TabbarContext);
    var classes = computed(function() {
      var tabbar = props.tabbar, bottomMd = props.bottomMd, bottomIos = props.bottomIos, bottomAurora = props.bottomAurora, bottom = props.bottom, position = props.position, topMd = props.topMd, topIos = props.topIos, topAurora = props.topAurora, top = props.top, labels = props.labels, scrollable = props.scrollable, hidden = props.hidden, noShadow = props.noShadow, noHairline = props.noHairline, noBorder = props.noBorder;
      return classNames("toolbar", {
        tabbar,
        "toolbar-bottom": theme2.value && theme2.value.md && bottomMd || theme2.value && theme2.value.ios && bottomIos || theme2.value && theme2.value.aurora && bottomAurora || bottom || position === "bottom",
        "toolbar-top": theme2.value && theme2.value.md && topMd || theme2.value && theme2.value.ios && topIos || theme2.value && theme2.value.aurora && topAurora || top || position === "top",
        "tabbar-labels": labels,
        "tabbar-scrollable": scrollable,
        "toolbar-hidden": hidden,
        "no-shadow": noShadow,
        "no-hairline": noHairline || noBorder
      }, colorClasses(props));
    });
    return {
      classes,
      elRef,
      hide,
      show
    };
  }
};

// node_modules/framework7-vue/esm/components/treeview-item.js
function _extends85() {
  _extends85 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends85.apply(this, arguments);
}
var _hoisted_131 = {
  key: 0,
  className: "treeview-toggle"
};
var _hoisted_212 = {
  className: "treeview-item-content"
};
var _hoisted_37 = {
  className: "treeview-item-label"
};
var _hoisted_44 = {
  key: 0,
  className: "treeview-item-children"
};
function render82(_ctx, _cache) {
  var _component_f7_use_icon = resolveComponent("f7-use-icon");
  return openBlock(), createBlock("div", {
    ref: "elRef",
    class: _ctx.classes
  }, [(openBlock(), createBlock(resolveDynamicComponent(_ctx.itemRootTag), mergeProps({
    class: _ctx.itemRootClasses
  }, _ctx.itemRootAttrs, {
    onClick: _ctx.onClick
  }), {
    default: withCtx(function() {
      return [renderSlot(_ctx.$slots, "root-start"), _ctx.needToggle ? (openBlock(), createBlock("div", _hoisted_131)) : createCommentVNode("", true), createVNode("div", _hoisted_212, [renderSlot(_ctx.$slots, "content-start"), _ctx.icon ? (openBlock(), createBlock(_component_f7_use_icon, {
        key: 0,
        icon: _ctx.icon
      }, null, 8, ["icon"])) : createCommentVNode("", true), renderSlot(_ctx.$slots, "media"), createVNode("div", _hoisted_37, [renderSlot(_ctx.$slots, "label-start"), createTextVNode(" " + toDisplayString(_ctx.label) + " ", 1), renderSlot(_ctx.$slots, "label")]), renderSlot(_ctx.$slots, "content"), renderSlot(_ctx.$slots, "content-end")]), renderSlot(_ctx.$slots, "root"), renderSlot(_ctx.$slots, "root-end")];
    }),
    _: 3
  }, 16, ["class", "onClick"])), _ctx.hasChildren ? (openBlock(), createBlock("div", _hoisted_44, [renderSlot(_ctx.$slots, "children-start"), renderSlot(_ctx.$slots, "default"), renderSlot(_ctx.$slots, "children")])) : createCommentVNode("", true)], 2);
}
var treeview_item_default = {
  name: "f7-treeview-item",
  render: render82,
  components: {
    f7UseIcon: use_icon_default
  },
  props: _extends85({
    toggle: {
      type: Boolean,
      default: void 0
    },
    itemToggle: Boolean,
    selectable: Boolean,
    selected: Boolean,
    opened: Boolean,
    label: String,
    loadChildren: Boolean,
    link: {
      type: [Boolean, String],
      default: void 0
    }
  }, colorProps, actionsProps, iconProps, routerProps),
  emits: ["click", "treeview:open", "treeview:close", "treeview:loadchildren"],
  setup: function setup88(props, _ref) {
    var slots = _ref.slots, emit = _ref.emit;
    var elRef = ref(null);
    var hasChildren = computed(function() {
      return slots.default || slots.children || slots["children-start"];
    });
    var needToggle = computed(function() {
      return typeof props.toggle === "undefined" ? hasChildren.value : props.toggle;
    });
    var icon = computed(function() {
      return useIcon(props);
    });
    var onClick = function onClick2(event) {
      emit("click", event);
    };
    var onOpen = function onOpen2(el) {
      if (elRef.value !== el)
        return;
      emit("treeview:open", el);
    };
    var onClose = function onClose2(el) {
      if (elRef.value !== el)
        return;
      emit("treeview:close", el);
    };
    var onLoadChildren = function onLoadChildren2(el, done) {
      if (elRef.value !== el)
        return;
      emit("treeview:loadchildren", el, done);
    };
    var attachEvents = function attachEvents2() {
      if (!elRef.value)
        return;
      f7ready(function() {
        f7.on("treeviewOpen", onOpen);
        f7.on("treeviewClose", onClose);
        f7.on("treeviewLoadChildren", onLoadChildren);
      });
    };
    var detachEvents = function detachEvents2() {
      if (!f7)
        return;
      f7.off("treeviewOpen", onOpen);
      f7.off("treeviewClose", onClose);
      f7.off("treeviewLoadChildren", onLoadChildren);
    };
    onMounted(function() {
      return attachEvents();
    });
    onBeforeUnmount(function() {
      return detachEvents();
    });
    var classes = computed(function() {
      return classNames("treeview-item", {
        "treeview-item-opened": props.opened,
        "treeview-load-children": props.loadChildren
      }, colorClasses(props));
    });
    var itemRootClasses = computed(function() {
      return classNames("treeview-item-root", {
        "treeview-item-selectable": props.selectable,
        "treeview-item-selected": props.selected,
        "treeview-item-toggle": props.itemToggle
      }, routerClasses(props), actionsClasses(props));
    });
    var itemRootTag = computed(function() {
      return props.link || props.link === "" ? "a" : "div";
    });
    var itemRootAttrs = computed(function() {
      var href = props.link;
      if (props.link === true)
        href = "#";
      if (props.link === false)
        href = void 0;
      return _extends85({
        href
      }, routerAttrs(props), actionsAttrs(props));
    });
    return {
      itemRootTag,
      itemRootAttrs,
      itemRootClasses,
      classes,
      icon,
      onClick,
      hasChildren,
      needToggle,
      elRef
    };
  }
};

// node_modules/framework7-vue/esm/components/treeview.js
function _extends86() {
  _extends86 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends86.apply(this, arguments);
}
function render83(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var treeview_default = {
  name: "f7-treeview",
  render: render83,
  props: _extends86({}, colorProps),
  setup: function setup89(props) {
    var classes = computed(function() {
      return classNames("treeview", colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/shared/get-router-initial-component.js
function _extends87() {
  _extends87 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends87.apply(this, arguments);
}
var getRouterInitialComponent = function getRouterInitialComponent2(router, initialComponent) {
  var initialComponentData;
  var _router$getInitialUrl = router.getInitialUrl(), initialUrl = _router$getInitialUrl.initialUrl;
  var initialRoute = router.findMatchingRoute(initialUrl);
  var routeProps = {};
  if (initialRoute && initialRoute.route && initialRoute.route.options) {
    routeProps = initialRoute.route.options.props;
  }
  var isMasterRoute = function isMasterRoute2(route) {
    if (route.master === true)
      return true;
    if (typeof route.master === "function")
      return route.master(router.app);
    return false;
  };
  if (initialRoute && initialRoute.route && (initialRoute.route.component || initialRoute.route.asyncComponent) && !isMasterRoute(initialRoute.route)) {
    initialComponentData = {
      component: initialRoute.route.component || initialRoute.route.asyncComponent,
      initialComponent,
      id: getComponentId(),
      isAsync: !!initialRoute.route.asyncComponent,
      props: _extends87({
        f7route: initialRoute,
        f7router: router
      }, routeProps, initialRoute.params)
    };
  }
  return {
    initialPage: initialComponentData,
    initialRoute
  };
};

// node_modules/framework7-vue/esm/components/view.js
function _extends88() {
  _extends88 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends88.apply(this, arguments);
}
var view_default2 = {
  name: "f7-view",
  props: _extends88({
    tab: Boolean,
    tabActive: Boolean,
    name: String,
    router: {
      type: Boolean,
      default: true
    },
    linksView: [Object, String],
    url: String,
    main: {
      type: Boolean,
      default: void 0
    },
    stackPages: {
      type: Boolean,
      default: void 0
    },
    xhrCache: {
      type: Boolean,
      default: void 0
    },
    xhrCacheIgnore: Array,
    xhrCacheIgnoreGetParameters: {
      type: Boolean,
      default: void 0
    },
    xhrCacheDuration: Number,
    preloadPreviousPage: {
      type: Boolean,
      default: void 0
    },
    allowDuplicateUrls: {
      type: Boolean,
      default: void 0
    },
    reloadPages: {
      type: Boolean,
      default: void 0
    },
    reloadDetail: {
      type: Boolean,
      default: void 0
    },
    masterDetailResizable: {
      type: Boolean,
      default: void 0
    },
    masterDetailBreakpoint: Number,
    removeElements: {
      type: Boolean,
      default: void 0
    },
    removeElementsWithTimeout: {
      type: Boolean,
      default: void 0
    },
    removeElementsTimeout: Number,
    restoreScrollTopOnBack: {
      type: Boolean,
      default: void 0
    },
    loadInitialPage: {
      type: Boolean,
      default: void 0
    },
    iosSwipeBack: {
      type: Boolean,
      default: void 0
    },
    iosSwipeBackAnimateShadow: {
      type: Boolean,
      default: void 0
    },
    iosSwipeBackAnimateOpacity: {
      type: Boolean,
      default: void 0
    },
    iosSwipeBackActiveArea: Number,
    iosSwipeBackThreshold: Number,
    mdSwipeBack: {
      type: Boolean,
      default: void 0
    },
    mdSwipeBackAnimateShadow: {
      type: Boolean,
      default: void 0
    },
    mdSwipeBackAnimateOpacity: {
      type: Boolean,
      default: void 0
    },
    mdSwipeBackActiveArea: Number,
    mdSwipeBackThreshold: Number,
    auroraSwipeBack: {
      type: Boolean,
      default: void 0
    },
    auroraSwipeBackAnimateShadow: {
      type: Boolean,
      default: void 0
    },
    auroraSwipeBackAnimateOpacity: {
      type: Boolean,
      default: void 0
    },
    auroraSwipeBackActiveArea: Number,
    auroraSwipeBackThreshold: Number,
    browserHistory: {
      type: Boolean,
      default: void 0
    },
    browserHistoryRoot: String,
    browserHistoryAnimate: {
      type: Boolean,
      default: void 0
    },
    browserHistoryAnimateOnLoad: {
      type: Boolean,
      default: void 0
    },
    browserHistorySeparator: String,
    browserHistoryOnLoad: {
      type: Boolean,
      default: void 0
    },
    browserHistoryInitialMatch: {
      type: Boolean,
      default: true
    },
    browserHistoryStoreHistory: {
      type: Boolean,
      default: void 0
    },
    animate: {
      type: Boolean,
      default: void 0
    },
    transition: String,
    iosDynamicNavbar: {
      type: Boolean,
      default: void 0
    },
    iosAnimateNavbarBackIcon: {
      type: Boolean,
      default: void 0
    },
    materialPageLoadDelay: Number,
    passRouteQueryToRequest: {
      type: Boolean,
      default: void 0
    },
    passRouteParamsToRequest: {
      type: Boolean,
      default: void 0
    },
    routes: Array,
    routesAdd: Array,
    routesBeforeEnter: [Function, Array],
    routesBeforeLeave: [Function, Array],
    init: {
      type: Boolean,
      default: true
    }
  }, colorProps),
  emits: ["view:init", "view:resize", "swipeback:move", "swipeback:beforechange", "swipeback:afterchange", "swipeback:beforereset", "swipeback:afterreset", "tab:hide", "tab:show"],
  setup: function setup90(props, _ref) {
    var emit = _ref.emit, slots = _ref.slots;
    var initialPageComponent = null;
    var f7View = null;
    var elRef = ref(null);
    var routerData = null;
    var initialPage;
    var initialRoute;
    var onViewInit = function onViewInit2(view) {
      emit("view:init", view);
      if (!props.init) {
        routerData.instance = view;
        f7View = routerData.instance;
      }
    };
    var getViewParams = function getViewParams2() {
      var routes = toRaw(props.routes || []);
      var routesAdd = toRaw(props.routesAdd || []);
      return noUndefinedProps(_extends88({}, props, {
        routes,
        routesAdd
      }));
    };
    if (f7 && !f7View && props.init) {
      var routerId = getRouterId();
      f7View = f7.views.create(elRef.value, _extends88({}, getViewParams(), {
        routerId,
        init: false,
        on: {
          init: onViewInit
        }
      }));
      routerData = {
        routerId,
        instance: f7View
      };
      f7routers.views.push(routerData);
      if (f7View && f7View.router && (props.url || props.main)) {
        var initialData = getRouterInitialComponent(f7View.router, initialPageComponent);
        initialPage = initialData.initialPage;
        initialRoute = initialData.initialRoute;
      }
    }
    var pages = ref(initialPage ? [initialPage] : []);
    var _setPages = function setPages(newPages) {
      newPages.forEach(function(page) {
        page.component = toRaw(page.component);
      });
      pages.value = newPages;
    };
    var onResize = function onResize2(view, width) {
      emit("view:resize", width);
    };
    var onSwipeBackMove = function onSwipeBackMove2(data) {
      var swipeBackData = data;
      emit("swipeback:move", swipeBackData);
    };
    var onSwipeBackBeforeChange = function onSwipeBackBeforeChange2(data) {
      var swipeBackData = data;
      emit("swipeback:beforechange", swipeBackData);
    };
    var onSwipeBackAfterChange = function onSwipeBackAfterChange2(data) {
      var swipeBackData = data;
      emit("swipeback:afterchange", swipeBackData);
    };
    var onSwipeBackBeforeReset = function onSwipeBackBeforeReset2(data) {
      var swipeBackData = data;
      emit("swipeback:beforereset", swipeBackData);
    };
    var onSwipeBackAfterReset = function onSwipeBackAfterReset2(data) {
      var swipeBackData = data;
      emit("swipeback:afterreset", swipeBackData);
    };
    onMounted(function() {
      f7ready(function() {
        if (f7View) {
          routerData.el = elRef.value;
          routerData.pages = pages.value;
          routerData.setPages = function(newPages) {
            _setPages([].concat(newPages));
          };
          if (initialPage && initialPage.isAsync && !initialPage.initialComponent) {
            initialPage.component().then(function() {
              setTimeout(function() {
                f7View.init(elRef.value);
                if (initialPage) {
                  initialPage.el = f7View.router.currentPageEl;
                  if (initialRoute && initialRoute.route && initialRoute.route.keepAlive) {
                    initialRoute.route.keepAliveData = {
                      pageEl: initialPage.el
                    };
                  }
                }
              }, 100);
            });
          } else {
            f7View.init(elRef.value);
            if (initialPage) {
              initialPage.el = f7View.router.currentPageEl;
              if (initialRoute && initialRoute.route && initialRoute.route.keepAlive) {
                initialRoute.route.keepAliveData = {
                  pageEl: initialPage.el
                };
              }
            }
          }
        } else {
          var _routerId = getRouterId();
          routerData = {
            el: elRef.value,
            routerId: _routerId,
            pages: pages.value,
            instance: f7View,
            setPages: function setPages(newPages) {
              _setPages([].concat(newPages));
            }
          };
          f7routers.views.push(routerData);
          routerData.instance = f7.views.create(elRef.value, _extends88({
            routerId: _routerId
          }, getViewParams(), {
            on: {
              init: onViewInit
            }
          }));
          f7View = routerData.instance;
        }
        if (!props.init)
          return;
        f7View.on("resize", onResize);
        f7View.on("swipebackMove", onSwipeBackMove);
        f7View.on("swipebackBeforeChange", onSwipeBackBeforeChange);
        f7View.on("swipebackAfterChange", onSwipeBackAfterChange);
        f7View.on("swipebackBeforeReset", onSwipeBackBeforeReset);
        f7View.on("swipebackAfterReset", onSwipeBackAfterReset);
      });
    });
    onBeforeUnmount(function() {
      if (f7View) {
        f7View.off("resize", onResize);
        f7View.off("swipebackMove", onSwipeBackMove);
        f7View.off("swipebackBeforeChange", onSwipeBackBeforeChange);
        f7View.off("swipebackAfterChange", onSwipeBackAfterChange);
        f7View.off("swipebackBeforeReset", onSwipeBackBeforeReset);
        f7View.off("swipebackAfterReset", onSwipeBackAfterReset);
        if (f7View.destroy)
          f7View.destroy();
        f7View = null;
      }
      f7routers.views.splice(f7routers.views.indexOf(routerData), 1);
      routerData = null;
    });
    onUpdated(function() {
      if (!routerData || !f7)
        return;
      f7events.emit("viewRouterDidUpdate", routerData);
    });
    useTab(elRef, emit);
    var classes = computed(function() {
      return classNames("view", {
        "view-main": props.main,
        "tab-active": props.tabActive,
        tab: props.tab
      }, colorClasses(props));
    });
    var getComponent = function getComponent2(page) {
      return toRaw(page.component);
    };
    var getProps = function getProps2(page) {
      var pageComponent = page.component, pageProps = page.props;
      var keys = [];
      var passProps = {};
      if (pageComponent && pageComponent.props)
        keys = Object.keys(pageComponent.props);
      keys.forEach(function(key) {
        if (key in pageProps)
          passProps[key] = pageProps[key];
      });
      return passProps;
    };
    return function() {
      return h("div", {
        ref: elRef,
        class: classes.value
      }, [slots.default && slots.default()].concat(pages.value.map(function(page) {
        return h(getComponent(page), _extends88({
          key: page.id
        }, getProps(page)));
      })));
    };
  }
};

// node_modules/framework7-vue/esm/components/views.js
function _extends89() {
  _extends89 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends89.apply(this, arguments);
}
function render84(_ctx, _cache) {
  return openBlock(), createBlock("div", {
    class: _ctx.classes
  }, [renderSlot(_ctx.$slots, "default")], 2);
}
var views_default = {
  name: "f7-views",
  render: render84,
  props: _extends89({
    tabs: Boolean
  }, colorProps),
  setup: function setup91(props) {
    var classes = computed(function() {
      return classNames("views", {
        tabs: props.tabs
      }, colorClasses(props));
    });
    return {
      classes
    };
  }
};

// node_modules/framework7-vue/esm/framework7-vue.js
var framework7_vue_default = plugin_default;

// dep:framework7-vue
var framework7_vue_default2 = framework7_vue_default;
export {
  framework7_vue_default2 as default,
  f7,
  accordion_default as f7Accordion,
  accordion_content_default as f7AccordionContent,
  accordion_item_default as f7AccordionItem,
  accordion_toggle_default as f7AccordionToggle,
  actions_default as f7Actions,
  actions_button_default as f7ActionsButton,
  actions_group_default as f7ActionsGroup,
  actions_label_default as f7ActionsLabel,
  app_default as f7App,
  appbar_default as f7Appbar,
  area_chart_default as f7AreaChart,
  badge_default as f7Badge,
  block_default as f7Block,
  block_footer_default as f7BlockFooter,
  block_header_default as f7BlockHeader,
  block_title_default as f7BlockTitle,
  button_default as f7Button,
  card_default as f7Card,
  card_content_default as f7CardContent,
  card_footer_default as f7CardFooter,
  card_header_default as f7CardHeader,
  checkbox_default as f7Checkbox,
  chip_default as f7Chip,
  col_default as f7Col,
  fab_default as f7Fab,
  fab_backdrop_default as f7FabBackdrop,
  fab_button_default as f7FabButton,
  fab_buttons_default as f7FabButtons,
  gauge_default as f7Gauge,
  icon_default as f7Icon,
  input_default as f7Input,
  link_default as f7Link,
  list_default as f7List,
  list_button_default as f7ListButton,
  list_group_default as f7ListGroup,
  list_index_default as f7ListIndex,
  list_input_default as f7ListInput,
  list_item_default as f7ListItem,
  list_item_cell_default as f7ListItemCell,
  list_item_row_default as f7ListItemRow,
  login_screen_default as f7LoginScreen,
  login_screen_title_default as f7LoginScreenTitle,
  menu_default as f7Menu,
  menu_dropdown_default as f7MenuDropdown,
  menu_dropdown_item_default as f7MenuDropdownItem,
  menu_item_default as f7MenuItem,
  message_default as f7Message,
  messagebar_default as f7Messagebar,
  messagebar_attachment_default as f7MessagebarAttachment,
  messagebar_attachments_default as f7MessagebarAttachments,
  messagebar_sheet_default as f7MessagebarSheet,
  messagebar_sheet_image_default as f7MessagebarSheetImage,
  messagebar_sheet_item_default as f7MessagebarSheetItem,
  messages_default as f7Messages,
  messages_title_default as f7MessagesTitle,
  nav_left_default as f7NavLeft,
  nav_right_default as f7NavRight,
  nav_title_default as f7NavTitle,
  nav_title_large_default as f7NavTitleLarge,
  navbar_default2 as f7Navbar,
  page_default as f7Page,
  page_content_default as f7PageContent,
  panel_default as f7Panel,
  photo_browser_default as f7PhotoBrowser,
  pie_chart_default as f7PieChart,
  popover_default as f7Popover,
  popup_default as f7Popup,
  preloader_default as f7Preloader,
  progressbar_default as f7Progressbar,
  radio_default as f7Radio,
  range_default as f7Range,
  routable_modals_default as f7RoutableModals,
  row_default as f7Row,
  searchbar_default as f7Searchbar,
  segmented_default as f7Segmented,
  sheet_default as f7Sheet,
  skeleton_avatar_default as f7SkeletonAvatar,
  skeleton_block_default as f7SkeletonBlock,
  skeleton_image_default as f7SkeletonImage,
  skeleton_text_default as f7SkeletonText,
  stepper_default as f7Stepper,
  subnavbar_default2 as f7Subnavbar,
  swipeout_actions_default as f7SwipeoutActions,
  swipeout_button_default as f7SwipeoutButton,
  swiper_default as f7Swiper,
  swiper_slide_default as f7SwiperSlide,
  tab_default as f7Tab,
  tabs_default as f7Tabs,
  text_editor_default as f7TextEditor,
  toggle_default as f7Toggle,
  toolbar_default2 as f7Toolbar,
  treeview_default as f7Treeview,
  treeview_item_default as f7TreeviewItem,
  use_icon_default as f7UseIcon,
  view_default2 as f7View,
  views_default as f7Views,
  f7ready,
  theme,
  useStore
};
//# sourceMappingURL=framework7-vue.js.map
